{
  "version": 3,
  "file": "ghost-dev.js",
  "sources": [
    ".tmp/ember-transpiled/adapters/application.js",
    ".tmp/ember-transpiled/adapters/embedded-relation-adapter.js",
    ".tmp/ember-transpiled/adapters/post.js",
    ".tmp/ember-transpiled/adapters/setting.js",
    ".tmp/ember-transpiled/adapters/user.js",
    ".tmp/ember-transpiled/app.js",
    ".tmp/ember-transpiled/assets/lib/touch-editor.js",
    ".tmp/ember-transpiled/assets/lib/uploader.js",
    ".tmp/ember-transpiled/components/gh-activating-list-item.js",
    ".tmp/ember-transpiled/components/gh-codemirror.js",
    ".tmp/ember-transpiled/components/gh-dropdown-button.js",
    ".tmp/ember-transpiled/components/gh-dropdown.js",
    ".tmp/ember-transpiled/components/gh-file-upload.js",
    ".tmp/ember-transpiled/components/gh-form.js",
    ".tmp/ember-transpiled/components/gh-input.js",
    ".tmp/ember-transpiled/components/gh-markdown.js",
    ".tmp/ember-transpiled/components/gh-modal-dialog.js",
    ".tmp/ember-transpiled/components/gh-notification.js",
    ".tmp/ember-transpiled/components/gh-notifications.js",
    ".tmp/ember-transpiled/components/gh-popover-button.js",
    ".tmp/ember-transpiled/components/gh-popover.js",
    ".tmp/ember-transpiled/components/gh-role-selector.js",
    ".tmp/ember-transpiled/components/gh-select.js",
    ".tmp/ember-transpiled/components/gh-tab-pane.js",
    ".tmp/ember-transpiled/components/gh-tab.js",
    ".tmp/ember-transpiled/components/gh-tabs-manager.js",
    ".tmp/ember-transpiled/components/gh-textarea.js",
    ".tmp/ember-transpiled/components/gh-trim-focus-input.js",
    ".tmp/ember-transpiled/components/gh-upload-modal.js",
    ".tmp/ember-transpiled/components/gh-uploader.js",
    ".tmp/ember-transpiled/config.js",
    ".tmp/ember-transpiled/controllers/application.js",
    ".tmp/ember-transpiled/controllers/debug.js",
    ".tmp/ember-transpiled/controllers/editor/edit.js",
    ".tmp/ember-transpiled/controllers/editor/new.js",
    ".tmp/ember-transpiled/controllers/error.js",
    ".tmp/ember-transpiled/controllers/forgotten.js",
    ".tmp/ember-transpiled/controllers/modals/auth-failed-unsaved.js",
    ".tmp/ember-transpiled/controllers/modals/copy-html.js",
    ".tmp/ember-transpiled/controllers/modals/delete-all.js",
    ".tmp/ember-transpiled/controllers/modals/delete-post.js",
    ".tmp/ember-transpiled/controllers/modals/delete-user.js",
    ".tmp/ember-transpiled/controllers/modals/invite-new-user.js",
    ".tmp/ember-transpiled/controllers/modals/leave-editor.js",
    ".tmp/ember-transpiled/controllers/modals/transfer-owner.js",
    ".tmp/ember-transpiled/controllers/modals/upload.js",
    ".tmp/ember-transpiled/controllers/post-settings-menu.js",
    ".tmp/ember-transpiled/controllers/post-tags-input.js",
    ".tmp/ember-transpiled/controllers/posts.js",
    ".tmp/ember-transpiled/controllers/posts/post.js",
    ".tmp/ember-transpiled/controllers/reset.js",
    ".tmp/ember-transpiled/controllers/settings.js",
    ".tmp/ember-transpiled/controllers/settings/app.js",
    ".tmp/ember-transpiled/controllers/settings/general.js",
    ".tmp/ember-transpiled/controllers/settings/users/index.js",
    ".tmp/ember-transpiled/controllers/settings/users/user.js",
    ".tmp/ember-transpiled/controllers/setup.js",
    ".tmp/ember-transpiled/controllers/signin.js",
    ".tmp/ember-transpiled/controllers/signup.js",
    ".tmp/ember-transpiled/docs/js/nav.js",
    ".tmp/ember-transpiled/helpers/gh-blog-url.js",
    ".tmp/ember-transpiled/helpers/gh-count-characters.js",
    ".tmp/ember-transpiled/helpers/gh-count-down-characters.js",
    ".tmp/ember-transpiled/helpers/gh-count-words.js",
    ".tmp/ember-transpiled/helpers/gh-format-html.js",
    ".tmp/ember-transpiled/helpers/gh-format-markdown.js",
    ".tmp/ember-transpiled/helpers/gh-format-timeago.js",
    ".tmp/ember-transpiled/helpers/ghost-paths.js",
    ".tmp/ember-transpiled/initializers/authentication.js",
    ".tmp/ember-transpiled/initializers/dropdown.js",
    ".tmp/ember-transpiled/initializers/ghost-config.js",
    ".tmp/ember-transpiled/initializers/ghost-paths.js",
    ".tmp/ember-transpiled/initializers/notifications.js",
    ".tmp/ember-transpiled/initializers/store-injector.js",
    ".tmp/ember-transpiled/initializers/trailing-history.js",
    ".tmp/ember-transpiled/mixins/body-event-listener.js",
    ".tmp/ember-transpiled/mixins/current-user-settings.js",
    ".tmp/ember-transpiled/mixins/dropdown-mixin.js",
    ".tmp/ember-transpiled/mixins/editor-base-controller.js",
    ".tmp/ember-transpiled/mixins/editor-base-route.js",
    ".tmp/ember-transpiled/mixins/editor-base-view.js",
    ".tmp/ember-transpiled/mixins/loading-indicator.js",
    ".tmp/ember-transpiled/mixins/marker-manager.js",
    ".tmp/ember-transpiled/mixins/nprogress-save.js",
    ".tmp/ember-transpiled/mixins/pagination-controller.js",
    ".tmp/ember-transpiled/mixins/pagination-route.js",
    ".tmp/ember-transpiled/mixins/pagination-view-infinite-scroll.js",
    ".tmp/ember-transpiled/mixins/selective-save.js",
    ".tmp/ember-transpiled/mixins/shortcuts-route.js",
    ".tmp/ember-transpiled/mixins/style-body.js",
    ".tmp/ember-transpiled/mixins/text-input.js",
    ".tmp/ember-transpiled/mixins/validation-engine.js",
    ".tmp/ember-transpiled/models/notification.js",
    ".tmp/ember-transpiled/models/post.js",
    ".tmp/ember-transpiled/models/role.js",
    ".tmp/ember-transpiled/models/setting.js",
    ".tmp/ember-transpiled/models/slug-generator.js",
    ".tmp/ember-transpiled/models/tag.js",
    ".tmp/ember-transpiled/models/user.js",
    ".tmp/ember-transpiled/router.js",
    ".tmp/ember-transpiled/routes/application.js",
    ".tmp/ember-transpiled/routes/authenticated.js",
    ".tmp/ember-transpiled/routes/content.js",
    ".tmp/ember-transpiled/routes/debug.js",
    ".tmp/ember-transpiled/routes/editor/edit.js",
    ".tmp/ember-transpiled/routes/editor/index.js",
    ".tmp/ember-transpiled/routes/editor/new.js",
    ".tmp/ember-transpiled/routes/error404.js",
    ".tmp/ember-transpiled/routes/forgotten.js",
    ".tmp/ember-transpiled/routes/mobile-index-route.js",
    ".tmp/ember-transpiled/routes/posts.js",
    ".tmp/ember-transpiled/routes/posts/index.js",
    ".tmp/ember-transpiled/routes/posts/post.js",
    ".tmp/ember-transpiled/routes/reset.js",
    ".tmp/ember-transpiled/routes/settings.js",
    ".tmp/ember-transpiled/routes/settings/about.js",
    ".tmp/ember-transpiled/routes/settings/apps.js",
    ".tmp/ember-transpiled/routes/settings/general.js",
    ".tmp/ember-transpiled/routes/settings/index.js",
    ".tmp/ember-transpiled/routes/settings/tags.js",
    ".tmp/ember-transpiled/routes/settings/users.js",
    ".tmp/ember-transpiled/routes/settings/users/index.js",
    ".tmp/ember-transpiled/routes/settings/users/user.js",
    ".tmp/ember-transpiled/routes/setup.js",
    ".tmp/ember-transpiled/routes/signin.js",
    ".tmp/ember-transpiled/routes/signout.js",
    ".tmp/ember-transpiled/routes/signup.js",
    ".tmp/ember-transpiled/serializers/application.js",
    ".tmp/ember-transpiled/serializers/post.js",
    ".tmp/ember-transpiled/serializers/setting.js",
    ".tmp/ember-transpiled/serializers/user.js",
    ".tmp/ember-transpiled/transforms/moment-date.js",
    ".tmp/ember-transpiled/utils/ajax.js",
    ".tmp/ember-transpiled/utils/bind.js",
    ".tmp/ember-transpiled/utils/bound-one-way.js",
    ".tmp/ember-transpiled/utils/caja-sanitizers.js",
    ".tmp/ember-transpiled/utils/codemirror-mobile.js",
    ".tmp/ember-transpiled/utils/codemirror-shortcuts.js",
    ".tmp/ember-transpiled/utils/ctrl-or-cmd.js",
    ".tmp/ember-transpiled/utils/date-formatting.js",
    ".tmp/ember-transpiled/utils/dropdown-service.js",
    ".tmp/ember-transpiled/utils/editor-shortcuts.js",
    ".tmp/ember-transpiled/utils/ghost-paths.js",
    ".tmp/ember-transpiled/utils/isFinite.js",
    ".tmp/ember-transpiled/utils/isNumber.js",
    ".tmp/ember-transpiled/utils/link-view.js",
    ".tmp/ember-transpiled/utils/mobile.js",
    ".tmp/ember-transpiled/utils/notifications.js",
    ".tmp/ember-transpiled/utils/set-scroll-classname.js",
    ".tmp/ember-transpiled/utils/text-field.js",
    ".tmp/ember-transpiled/utils/titleize.js",
    ".tmp/ember-transpiled/utils/validator-extensions.js",
    ".tmp/ember-transpiled/utils/word-count.js",
    ".tmp/ember-transpiled/validators/forgotten.js",
    ".tmp/ember-transpiled/validators/new-user.js",
    ".tmp/ember-transpiled/validators/post.js",
    ".tmp/ember-transpiled/validators/reset.js",
    ".tmp/ember-transpiled/validators/setting.js",
    ".tmp/ember-transpiled/validators/setup.js",
    ".tmp/ember-transpiled/validators/signin.js",
    ".tmp/ember-transpiled/validators/signup.js",
    ".tmp/ember-transpiled/validators/user.js",
    ".tmp/ember-transpiled/views/application.js",
    ".tmp/ember-transpiled/views/content-preview-content-view.js",
    ".tmp/ember-transpiled/views/editor-save-button.js",
    ".tmp/ember-transpiled/views/editor/edit.js",
    ".tmp/ember-transpiled/views/editor/new.js",
    ".tmp/ember-transpiled/views/item-view.js",
    ".tmp/ember-transpiled/views/mobile/content-view.js",
    ".tmp/ember-transpiled/views/mobile/index-view.js",
    ".tmp/ember-transpiled/views/mobile/parent-view.js",
    ".tmp/ember-transpiled/views/paginated-scroll-box.js",
    ".tmp/ember-transpiled/views/post-item-view.js",
    ".tmp/ember-transpiled/views/post-settings-menu.js",
    ".tmp/ember-transpiled/views/post-tags-input.js",
    ".tmp/ember-transpiled/views/posts.js",
    ".tmp/ember-transpiled/views/posts/index.js",
    ".tmp/ember-transpiled/views/posts/post.js",
    ".tmp/ember-transpiled/views/settings.js",
    ".tmp/ember-transpiled/views/settings/about.js",
    ".tmp/ember-transpiled/views/settings/apps.js",
    ".tmp/ember-transpiled/views/settings/content-base.js",
    ".tmp/ember-transpiled/views/settings/general.js",
    ".tmp/ember-transpiled/views/settings/index.js",
    ".tmp/ember-transpiled/views/settings/tags.js",
    ".tmp/ember-transpiled/views/settings/users.js",
    ".tmp/ember-transpiled/views/settings/users/user.js",
    ".tmp/ember-transpiled/views/settings/users/users-list-view.js",
    "core/client/loader.js"
  ],
  "names": [],
  "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACzjzrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AChGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACznDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACntEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACtxndvPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACtzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACnnnOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACzjnbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACflhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AClrHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACpjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACtpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACjvJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACjxJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACnzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACZA;AACA;AACA;AACA;A",
  "sourcesContent": [
    "define(\"ghost/adapters/application\", \n  [\"ghost/utils/ghost-paths\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ghostPaths = __dependency1__[\"default\"];\n\n    \r\n    var ApplicationAdapter = DS.RESTAdapter.extend({\r\n        host: window.location.origin,\r\n        namespace: ghostPaths().apiRoot.slice(1),\r\n    \r\n        findQuery: function (store, type, query) {\r\n            var id;\r\n    \r\n            if (query.id) {\r\n                id = query.id;\r\n                delete query.id;\r\n            }\r\n    \r\n            return this.ajax(this.buildURL(type.typeKey, id), 'GET', {data: query});\r\n        },\r\n    \r\n        buildURL: function (type, id) {\r\n            // Ensure trailing slashes\r\n            var url = this._super(type, id);\r\n    \r\n            if (url.slice(-1) !== '/') {\r\n                url += '/';\r\n            }\r\n    \r\n            return url;\r\n        },\r\n    \r\n        // Override deleteRecord to disregard the response body on 2xx responses.\r\n        // This is currently needed because the API is returning status 200 along\r\n        // with the JSON object for the deleted entity and Ember expects an empty\r\n        // response body for successful DELETEs.\r\n        // Non-2xx (failure) responses will still work correctly as Ember will turn\r\n        // them into rejected promises.\r\n        deleteRecord: function () {\r\n            var response = this._super.apply(this, arguments);\r\n    \r\n            return response.then(function () {\r\n                return null;\r\n            });\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = ApplicationAdapter;\n  });",
    "define(\"ghost/adapters/embedded-relation-adapter\", \n  [\"ghost/adapters/application\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ApplicationAdapter = __dependency1__[\"default\"];\n\n    \r\n    // EmbeddedRelationAdapter will augment the query object in calls made to\r\n    // DS.Store#find, findQuery, and findAll with the correct \"includes\"\r\n    // (?include=relatedType) by introspecting on the provided subclass of the DS.Model.\r\n    //\r\n    // Example:\r\n    // If a model has an embedded hasMany relation, the related type will be included:\r\n    // roles: DS.hasMany('role', { embedded: 'always' }) => ?include=roles\r\n    \r\n    var EmbeddedRelationAdapter = ApplicationAdapter.extend({\r\n        find: function (store, type, id) {\r\n            return this.findQuery(store, type, this.buildQuery(store, type, id));\r\n        },\r\n    \r\n        findQuery: function (store, type, query) {\r\n            return this._super(store, type, this.buildQuery(store, type, query));\r\n        },\r\n    \r\n        findAll: function (store, type, sinceToken) {\r\n            return this.findQuery(store, type, this.buildQuery(store, type, sinceToken));\r\n        },\r\n    \r\n        buildQuery: function (store, type, options) {\r\n            var model,\r\n                toInclude = [],\r\n                query = {},\r\n                deDupe = {};\r\n    \r\n            // Get the class responsible for creating records of this type\r\n            model = store.modelFor(type);\r\n    \r\n            // Iterate through the model's relationships and build a list\r\n            // of those that need to be pulled in via \"include\" from the API\r\n            model.eachRelationship(function (name, meta) {\r\n                if (meta.kind === 'hasMany' &&\r\n                    Object.prototype.hasOwnProperty.call(meta.options, 'embedded') &&\r\n                    meta.options.embedded === 'always') {\r\n                    toInclude.push(name);\r\n                }\r\n            });\r\n    \r\n            if (toInclude.length) {\r\n                // If this is a find by id, build a query object and attach the includes\r\n                if (typeof options === 'string' || typeof options === 'number') {\r\n                    query.id = options;\r\n                    query.include = toInclude.join(',');\r\n                } else if (typeof options === 'object' || Ember.isNone(options)) {\r\n                    // If this is a find all (no existing query object) build one and attach\r\n                    // the includes.\r\n                    // If this is a find with an existing query object then merge the includes\r\n                    // into the existing object. Existing properties and includes are preserved.\r\n                    query = options || query;\r\n                    toInclude = toInclude.concat(query.include ? query.include.split(',') : []);\r\n    \r\n                    toInclude.forEach(function (include) {\r\n                        deDupe[include] = true;\r\n                    });\r\n    \r\n                    query.include = Object.keys(deDupe).join(',');\r\n                }\r\n            }\r\n    \r\n            return query;\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = EmbeddedRelationAdapter;\n  });",
    "define(\"ghost/adapters/post\", \n  [\"ghost/adapters/embedded-relation-adapter\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var EmbeddedRelationAdapter = __dependency1__[\"default\"];\n\n    \r\n    var PostAdapter = EmbeddedRelationAdapter.extend({\r\n        createRecord: function (store, type, record) {\r\n            var data = {},\r\n                serializer = store.serializerFor(type.typeKey),\r\n                url = this.buildURL(type.typeKey);\r\n    \r\n            // make the server return with the tags embedded\r\n            url = url + '?include=tags';\r\n    \r\n            // use the PostSerializer to transform the model back into\r\n            // an array with a post object like the API expects\r\n            serializer.serializeIntoHash(data, type, record);\r\n    \r\n            return this.ajax(url, 'POST', {data: data});\r\n        },\r\n    \r\n        updateRecord: function (store, type, record) {\r\n            var data = {},\r\n                serializer = store.serializerFor(type.typeKey),\r\n                id = Ember.get(record, 'id'),\r\n                url = this.buildURL(type.typeKey, id);\r\n    \r\n            // make the server return with the tags embedded\r\n            url = url + '?include=tags';\r\n    \r\n            // use the PostSerializer to transform the model back into\r\n            // an array of posts objects like the API expects\r\n            serializer.serializeIntoHash(data, type, record);\r\n    \r\n            // use the ApplicationAdapter's buildURL method\r\n            return this.ajax(url, 'PUT', {data: data});\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = PostAdapter;\n  });",
    "define(\"ghost/adapters/setting\", \n  [\"ghost/adapters/application\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ApplicationAdapter = __dependency1__[\"default\"];\n\n    \r\n    var SettingAdapter = ApplicationAdapter.extend({\r\n        updateRecord: function (store, type, record) {\r\n            var data = {},\r\n                serializer = store.serializerFor(type.typeKey);\r\n    \r\n            // remove the fake id that we added onto the model.\r\n            delete record.id;\r\n    \r\n            // use the SettingSerializer to transform the model back into\r\n            // an array of settings objects like the API expects\r\n            serializer.serializeIntoHash(data, type, record);\r\n    \r\n            // use the ApplicationAdapter's buildURL method but do not\r\n            // pass in an id.\r\n            return this.ajax(this.buildURL(type.typeKey), 'PUT', {data: data});\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = SettingAdapter;\n  });",
    "define(\"ghost/adapters/user\", \n  [\"ghost/adapters/embedded-relation-adapter\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var EmbeddedRelationAdapter = __dependency1__[\"default\"];\n\n    \r\n    var UserAdapter = EmbeddedRelationAdapter.extend({\r\n        createRecord: function (store, type, record) {\r\n            var data = {},\r\n                serializer = store.serializerFor(type.typeKey),\r\n                url = this.buildURL(type.typeKey);\r\n    \r\n            // Ask the API to include full role objects in its response\r\n            url += '?include=roles';\r\n    \r\n            // Use the UserSerializer to transform the model back into\r\n            // an array of user objects like the API expects\r\n            serializer.serializeIntoHash(data, type, record);\r\n    \r\n            // Use the url from the ApplicationAdapter's buildURL method\r\n            return this.ajax(url, 'POST', {data: data});\r\n        },\r\n    \r\n        updateRecord: function (store, type, record) {\r\n            var data = {},\r\n                serializer = store.serializerFor(type.typeKey),\r\n                id = Ember.get(record, 'id'),\r\n                url = this.buildURL(type.typeKey, id);\r\n    \r\n            // Ask the API to include full role objects in its response\r\n            url += '?include=roles';\r\n    \r\n            // Use the UserSerializer to transform the model back into\r\n            // an array of user objects like the API expects\r\n            serializer.serializeIntoHash(data, type, record);\r\n    \r\n            // Use the url from the ApplicationAdapter's buildURL method\r\n            return this.ajax(url, 'PUT', {data: data});\r\n        },\r\n    \r\n        find: function (store, type, id) {\r\n            var url = this.buildQuery(store, type, id);\r\n            url.status = 'all';\r\n            return this.findQuery(store, type, url);\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = UserAdapter;\n  });",
    "define(\"ghost/app\", \n  [\"ember/resolver\",\"ember/load-initializers\",\"ghost/utils/link-view\",\"ghost/utils/text-field\",\"ghost/config\",\"ghost/helpers/ghost-paths\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __exports__) {\n    \"use strict\";\n    var Resolver = __dependency1__[\"default\"];\n\n    var loadInitializers = __dependency2__[\"default\"];\n\n\n\n    var configureApp = __dependency5__[\"default\"];\n\n    var ghostPathsHelper = __dependency6__[\"default\"];\n\n    \r\n    Ember.MODEL_FACTORY_INJECTIONS = true;\r\n    \r\n    var App = Ember.Application.extend({\r\n        modulePrefix: 'ghost',\r\n        Resolver: Resolver['default']\r\n    });\r\n    \r\n    // Runtime configuration of Ember.Application\r\n    configureApp(App);\r\n    \r\n    loadInitializers(App, 'ghost');\r\n    \r\n    Ember.Handlebars.registerHelper('gh-path', ghostPathsHelper);\r\n    \r\n    __exports__[\"default\"] = App;\n  });",
    "define(\"ghost/assets/lib/touch-editor\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var createTouchEditor = function createTouchEditor() {\r\n        var noop = function () {},\r\n            TouchEditor;\r\n    \r\n        TouchEditor = function (el, options) {\r\n            /*jshint unused:false*/\r\n            this.textarea = el;\r\n            this.win = {document: this.textarea};\r\n            this.ready = true;\r\n            this.wrapping = document.createElement('div');\r\n    \r\n            var textareaParent = this.textarea.parentNode;\r\n    \r\n            this.wrapping.appendChild(this.textarea);\r\n            textareaParent.appendChild(this.wrapping);\r\n    \r\n            this.textarea.style.opacity = 1;\r\n        };\r\n    \r\n        TouchEditor.prototype = {\r\n            setOption: function (type, handler) {\r\n                if (type === 'onChange') {\r\n                    $(this.textarea).change(handler);\r\n                }\r\n            },\r\n            eachLine: function () {\r\n                return [];\r\n            },\r\n            getValue: function () {\r\n                return this.textarea.value;\r\n            },\r\n            setValue: function (code) {\r\n                this.textarea.value = code;\r\n            },\r\n            focus: noop,\r\n            getCursor: function () {\r\n                return {line: 0, ch: 0};\r\n            },\r\n            setCursor: noop,\r\n            currentLine: function () {\r\n                return 0;\r\n            },\r\n            cursorPosition: function () {\r\n                return {character: 0};\r\n            },\r\n            addMarkdown: noop,\r\n            nthLine: noop,\r\n            refresh: noop,\r\n            selectLines: noop,\r\n            on: noop,\r\n            off: noop\r\n        };\r\n    \r\n        return TouchEditor;\r\n    };\r\n    \r\n    __exports__[\"default\"] = createTouchEditor;\n  });",
    "define(\"ghost/assets/lib/uploader\", \n  [\"ghost/utils/ghost-paths\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ghostPaths = __dependency1__[\"default\"];\n\n    \r\n    var UploadUi,\r\n        upload,\r\n        Ghost = ghostPaths();\r\n    \r\n    UploadUi = function ($dropzone, settings) {\r\n        var $url = '<div class=\"js-url\"><input class=\"url js-upload-url\" type=\"url\" placeholder=\"http://\"/></div>',\r\n            $cancel = '<a class=\"image-cancel js-cancel\" title=\"Delete\"><span class=\"hidden\">Delete</span></a>',\r\n            $progress =  $('<div />', {\r\n                class: 'js-upload-progress progress progress-success active',\r\n                role: 'progressbar',\r\n                'aria-valuemin': '0',\r\n                'aria-valuemax': '100'\r\n            }).append($('<div />', {\r\n                class: 'js-upload-progress-bar bar',\r\n                style: 'width:0%'\r\n            }));\r\n    \r\n        $.extend(this, {\r\n            complete: function (result) {\r\n                var self = this;\r\n    \r\n                function showImage(width, height) {\r\n                    $dropzone.find('img.js-upload-target').attr({width: width, height: height}).css({display: 'block'});\r\n                    $dropzone.find('.fileupload-loading').remove();\r\n                    $dropzone.css({height: 'auto'});\r\n                    $dropzone.delay(250).animate({opacity: 100}, 1000, function () {\r\n                        $('.js-button-accept').prop('disabled', false);\r\n                        self.init();\r\n                    });\r\n                }\r\n    \r\n                function animateDropzone($img) {\r\n                    $dropzone.animate({opacity: 0}, 250, function () {\r\n                        $dropzone.removeClass('image-uploader').addClass('pre-image-uploader');\r\n                        $dropzone.css({minHeight: 0});\r\n                        self.removeExtras();\r\n                        $dropzone.animate({height: $img.height()}, 250, function () {\r\n                            showImage($img.width(), $img.height());\r\n                        });\r\n                    });\r\n                }\r\n    \r\n                function preLoadImage() {\r\n                    var $img = $dropzone.find('img.js-upload-target')\r\n                        .attr({src: '', width: 'auto', height: 'auto'});\r\n    \r\n                    $progress.animate({opacity: 0}, 250, function () {\r\n                        $dropzone.find('span.media').after('<img class=\"fileupload-loading\"  src=\"' + Ghost.subdir + '/ghost/img/loadingcat.gif\" />');\r\n                        if (!settings.editor) {$progress.find('.fileupload-loading').css({top: '56px'}); }\r\n                    });\r\n                    $dropzone.trigger('uploadsuccess', [result]);\r\n                    $img.one('load', function () {\r\n                        animateDropzone($img);\r\n                    }).attr('src', result);\r\n                }\r\n                preLoadImage();\r\n            },\r\n    \r\n            bindFileUpload: function () {\r\n                var self = this;\r\n    \r\n                $dropzone.find('.js-fileupload').fileupload().fileupload('option', {\r\n                    url: Ghost.apiRoot + '/uploads/',\r\n                    add: function (e, data) {\r\n                        /*jshint unused:false*/\r\n                        $('.js-button-accept').prop('disabled', true);\r\n                        $dropzone.find('.js-fileupload').removeClass('right');\r\n                        $dropzone.find('.js-url').remove();\r\n                        $progress.find('.js-upload-progress-bar').removeClass('fail');\r\n                        $dropzone.trigger('uploadstart', [$dropzone.attr('id')]);\r\n                        $dropzone.find('span.media, div.description, a.image-url, a.image-webcam')\r\n                            .animate({opacity: 0}, 250, function () {\r\n                                $dropzone.find('div.description').hide().css({opacity: 100});\r\n                                if (settings.progressbar) {\r\n                                    $dropzone.find('div.js-fail').after($progress);\r\n                                    $progress.animate({opacity: 100}, 250);\r\n                                }\r\n                                data.submit();\r\n                            });\r\n                    },\r\n                    dropZone: settings.fileStorage ? $dropzone : null,\r\n                    progressall: function (e, data) {\r\n                        /*jshint unused:false*/\r\n                        var progress = parseInt(data.loaded / data.total * 100, 10);\r\n                        if (!settings.editor) {$progress.find('div.js-progress').css({position: 'absolute', top: '40px'}); }\r\n                        if (settings.progressbar) {\r\n                            $dropzone.trigger('uploadprogress', [progress, data]);\r\n                            $progress.find('.js-upload-progress-bar').css('width', progress + '%');\r\n                        }\r\n                    },\r\n                    fail: function (e, data) {\r\n                        /*jshint unused:false*/\r\n                        $('.js-button-accept').prop('disabled', false);\r\n                        $dropzone.trigger('uploadfailure', [data.result]);\r\n                        $dropzone.find('.js-upload-progress-bar').addClass('fail');\r\n                        if (data.jqXHR.status === 413) {\r\n                            $dropzone.find('div.js-fail').text('The image you uploaded was larger than the maximum file size your server allows.');\r\n                        } else if (data.jqXHR.status === 415) {\r\n                            $dropzone.find('div.js-fail').text('The image type you uploaded is not supported. Please use .PNG, .JPG, .GIF, .SVG.');\r\n                        } else {\r\n                            $dropzone.find('div.js-fail').text('Something went wrong :(');\r\n                        }\r\n                        $dropzone.find('div.js-fail, button.js-fail').fadeIn(1500);\r\n                        $dropzone.find('button.js-fail').on('click', function () {\r\n                            $dropzone.css({minHeight: 0});\r\n                            $dropzone.find('div.description').show();\r\n                            self.removeExtras();\r\n                            self.init();\r\n                        });\r\n                    },\r\n                    done: function (e, data) {\r\n                        /*jshint unused:false*/\r\n                        self.complete(data.result);\r\n                    }\r\n                });\r\n            },\r\n    \r\n            buildExtras: function () {\r\n                if (!$dropzone.find('span.media')[0]) {\r\n                    $dropzone.prepend('<span class=\"media\"><span class=\"hidden\">Image Upload</span></span>');\r\n                }\r\n                if (!$dropzone.find('div.description')[0]) {\r\n                    $dropzone.append('<div class=\"description\">Add image</div>');\r\n                }\r\n                if (!$dropzone.find('div.js-fail')[0]) {\r\n                    $dropzone.append('<div class=\"js-fail failed\" style=\"display: none\">Something went wrong :(</div>');\r\n                }\r\n                if (!$dropzone.find('button.js-fail')[0]) {\r\n                    $dropzone.append('<button class=\"js-fail btn btn-green\" style=\"display: none\">Try Again</button>');\r\n                }\r\n                if (!$dropzone.find('a.image-url')[0]) {\r\n                    $dropzone.append('<a class=\"image-url\" title=\"Add image from URL\"><span class=\"hidden\">URL</span></a>');\r\n                }\r\n               // if (!$dropzone.find('a.image-webcam')[0]) {\r\n               //     $dropzone.append('<a class=\"image-webcam\" title=\"Add image from webcam\"><span class=\"hidden\">Webcam</span></a>');\r\n               // }\r\n            },\r\n    \r\n            removeExtras: function () {\r\n                $dropzone.find('span.media, div.js-upload-progress, a.image-url, a.image-upload, a.image-webcam, div.js-fail, button.js-fail, a.js-cancel').remove();\r\n            },\r\n    \r\n            initWithDropzone: function () {\r\n                var self = this;\r\n    \r\n                // This is the start point if no image exists\r\n                $dropzone.find('img.js-upload-target').css({display: 'none'});\r\n                $dropzone.removeClass('pre-image-uploader image-uploader-url').addClass('image-uploader');\r\n                this.removeExtras();\r\n                this.buildExtras();\r\n                this.bindFileUpload();\r\n                if (!settings.fileStorage) {\r\n                    self.initUrl();\r\n                    return;\r\n                }\r\n                $dropzone.find('a.image-url').on('click', function () {\r\n                    self.initUrl();\r\n                });\r\n            },\r\n            initUrl: function () {\r\n                var self = this, val;\r\n                this.removeExtras();\r\n                $dropzone.addClass('image-uploader-url').removeClass('pre-image-uploader');\r\n                $dropzone.find('.js-fileupload').addClass('right');\r\n                if (settings.fileStorage) {\r\n                    $dropzone.append($cancel);\r\n                }\r\n                $dropzone.find('.js-cancel').on('click', function () {\r\n                    $dropzone.find('.js-url').remove();\r\n                    $dropzone.find('.js-fileupload').removeClass('right');\r\n                    self.removeExtras();\r\n                    self.initWithDropzone();\r\n                });\r\n    \r\n                $dropzone.find('div.description').before($url);\r\n    \r\n                if (settings.editor) {\r\n                    $dropzone.find('div.js-url').append('<button class=\"btn btn-blue js-button-accept\">Save</button>');\r\n                }\r\n    \r\n                $dropzone.find('.js-button-accept').on('click', function () {\r\n                    val = $dropzone.find('.js-upload-url').val();\r\n                    $dropzone.find('div.description').hide();\r\n                    $dropzone.find('.js-fileupload').removeClass('right');\r\n                    $dropzone.find('.js-url').remove();\r\n                    if (val === '') {\r\n                        $dropzone.trigger('uploadsuccess', 'http://');\r\n                        self.initWithDropzone();\r\n                    } else {\r\n                        self.complete(val);\r\n                    }\r\n                });\r\n    \r\n                // Only show the toggle icon if there is a dropzone mode to go back to\r\n                if (settings.fileStorage !== false) {\r\n                    $dropzone.append('<a class=\"image-upload\" title=\"Add image\"><span class=\"hidden\">Upload</span></a>');\r\n                }\r\n    \r\n                $dropzone.find('a.image-upload').on('click', function () {\r\n                    $dropzone.find('.js-url').remove();\r\n                    $dropzone.find('.js-fileupload').removeClass('right');\r\n                    self.initWithDropzone();\r\n                });\r\n            },\r\n    \r\n            initWithImage: function () {\r\n                var self = this;\r\n    \r\n                // This is the start point if an image already exists\r\n                $dropzone.removeClass('image-uploader image-uploader-url').addClass('pre-image-uploader');\r\n                $dropzone.find('div.description').hide();\r\n                $dropzone.append($cancel);\r\n                $dropzone.find('.js-cancel').on('click', function () {\r\n                    $dropzone.find('img.js-upload-target').attr({src: ''});\r\n                    $dropzone.find('div.description').show();\r\n                    $dropzone.delay(2500).animate({opacity: 100}, 1000, function () {\r\n                        self.init();\r\n                    });\r\n    \r\n                    $dropzone.trigger('uploadsuccess', 'http://');\r\n                    self.initWithDropzone();\r\n                });\r\n            },\r\n    \r\n            init: function () {\r\n                var imageTarget = $dropzone.find('img.js-upload-target');\r\n                // First check if field image is defined by checking for js-upload-target class\r\n                if (!imageTarget[0]) {\r\n                    // This ensures there is an image we can hook into to display uploaded image\r\n                    $dropzone.prepend('<img class=\"js-upload-target\" style=\"display: none\"  src=\"\" />');\r\n                }\r\n                $('.js-button-accept').prop('disabled', false);\r\n                if (imageTarget.attr('src') === '' || imageTarget.attr('src') === undefined) {\r\n                    this.initWithDropzone();\r\n                } else {\r\n                    this.initWithImage();\r\n                }\r\n            }\r\n        });\r\n    };\r\n    \r\n    upload = function (options) {\r\n        var settings = $.extend({\r\n            progressbar: true,\r\n            editor: false,\r\n            fileStorage: true\r\n        }, options);\r\n    \r\n        return this.each(function () {\r\n            var $dropzone = $(this),\r\n                ui;\r\n    \r\n            ui = new UploadUi($dropzone, settings);\r\n            ui.init();\r\n        });\r\n    };\r\n    \r\n    __exports__[\"default\"] = upload;\n  });",
    "define(\"ghost/components/gh-activating-list-item\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var ActivatingListItem = Ember.Component.extend({\r\n        tagName: 'li',\r\n        classNameBindings: ['active'],\r\n        active: false\r\n    });\r\n    \r\n    __exports__[\"default\"] = ActivatingListItem;\n  });",
    "define(\"ghost/components/gh-codemirror\", \n  [\"ghost/mixins/marker-manager\",\"ghost/utils/codemirror-mobile\",\"ghost/utils/set-scroll-classname\",\"ghost/utils/codemirror-shortcuts\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    /*global CodeMirror */\r\n    \r\n    var MarkerManager = __dependency1__[\"default\"];\n\n    var mobileCodeMirror = __dependency2__[\"default\"];\n\n    var setScrollClassName = __dependency3__[\"default\"];\n\n    var codeMirrorShortcuts = __dependency4__[\"default\"];\n\n    \r\n    var onChangeHandler,\r\n        onScrollHandler,\r\n        Codemirror;\r\n    \r\n    codeMirrorShortcuts.init();\r\n    \r\n    onChangeHandler = function (cm, changeObj) {\r\n        var line,\r\n            component = cm.component;\r\n    \r\n        // fill array with a range of numbers\r\n        for (line = changeObj.from.line; line < changeObj.from.line + changeObj.text.length; line += 1) {\r\n            component.checkLine.call(component, line, changeObj.origin);\r\n        }\r\n    \r\n        // Is this a line which may have had a marker on it?\r\n        component.checkMarkers.call(component);\r\n    \r\n        cm.component.set('value', cm.getValue());\r\n    \r\n        component.sendAction('typingPause');\r\n    };\r\n    \r\n    onScrollHandler = function (cm) {\r\n        var scrollInfo = cm.getScrollInfo(),\r\n            component = cm.component;\r\n    \r\n        scrollInfo.codemirror = cm;\r\n    \r\n        // throttle scroll updates\r\n        component.throttle = Ember.run.throttle(component, function () {\r\n            this.set('scrollInfo', scrollInfo);\r\n        }, 10);\r\n    };\r\n    \r\n    Codemirror = Ember.TextArea.extend(MarkerManager, {\r\n        focus: true,\r\n        focusCursorAtEnd: false,\r\n    \r\n        setFocus: function () {\r\n            if (this.get('focus')) {\r\n                this.$().val(this.$().val()).focus();\r\n            }\r\n        }.on('didInsertElement'),\r\n    \r\n        didInsertElement: function () {\r\n            Ember.run.scheduleOnce('afterRender', this, this.afterRenderEvent);\r\n        },\r\n    \r\n        afterRenderEvent: function () {\r\n            var self = this,\r\n                codemirror;\r\n    \r\n            // replaces CodeMirror with TouchEditor only if we're on mobile\r\n            mobileCodeMirror.createIfMobile();\r\n    \r\n            codemirror = this.initCodemirror();\r\n            this.set('codemirror', codemirror);\r\n    \r\n            this.sendAction('setCodeMirror', this);\r\n    \r\n            if (this.get('focus') && this.get('focusCursorAtEnd')) {\r\n                codemirror.execCommand('goDocEnd');\r\n            }\r\n    \r\n            codemirror.eachLine(function initMarkers() {\r\n                self.initMarkers.apply(self, arguments);\r\n            });\r\n        },\r\n    \r\n        // this needs to be placed on the 'afterRender' queue otherwise CodeMirror gets wonky\r\n        initCodemirror: function () {\r\n            // create codemirror\r\n            var codemirror,\r\n                self = this;\r\n    \r\n            codemirror = CodeMirror.fromTextArea(this.get('element'), {\r\n                mode:           'gfm',\r\n                tabMode:        'indent',\r\n                tabindex:       '2',\r\n                cursorScrollMargin: 10,\r\n                lineWrapping:   true,\r\n                dragDrop:       false,\r\n                extraKeys: {\r\n                    Home:   'goLineLeft',\r\n                    End:    'goLineRight',\r\n                    'Ctrl-U': false,\r\n                    'Cmd-U': false,\r\n                    'Shift-Ctrl-U': false,\r\n                    'Shift-Cmd-U': false,\r\n                    'Ctrl-S': false,\r\n                    'Cmd-S': false,\r\n                    'Ctrl-D': false,\r\n                    'Cmd-D': false\r\n                }\r\n            });\r\n    \r\n            // Codemirror needs a reference to the component\r\n            // so that codemirror originating events can propogate\r\n            // up the ember action pipeline\r\n            codemirror.component = this;\r\n    \r\n            // propagate changes to value property\r\n            codemirror.on('change', onChangeHandler);\r\n    \r\n            // on scroll update scrollPosition property\r\n            codemirror.on('scroll', onScrollHandler);\r\n    \r\n            codemirror.on('scroll', Ember.run.bind(Ember.$('.CodeMirror-scroll'), setScrollClassName, {\r\n                target: Ember.$('.js-entry-markdown'),\r\n                offset: 10\r\n            }));\r\n    \r\n            codemirror.on('focus', function () {\r\n                self.sendAction('onFocusIn');\r\n            });\r\n    \r\n            return codemirror;\r\n        },\r\n    \r\n        disableCodeMirror: function () {\r\n            var codemirror = this.get('codemirror');\r\n    \r\n            codemirror.setOption('readOnly', 'nocursor');\r\n            codemirror.off('change', onChangeHandler);\r\n        },\r\n    \r\n        enableCodeMirror: function () {\r\n            var codemirror = this.get('codemirror');\r\n    \r\n            codemirror.setOption('readOnly', false);\r\n    \r\n            // clicking the trash button on an image dropzone causes this function to fire.\r\n            // this line is a hack to prevent multiple event handlers from being attached.\r\n            codemirror.off('change', onChangeHandler);\r\n    \r\n            codemirror.on('change', onChangeHandler);\r\n        },\r\n    \r\n        removeThrottle: function () {\r\n            Ember.run.cancel(this.throttle);\r\n        }.on('willDestroyElement'),\r\n    \r\n        removeCodemirrorHandlers: function () {\r\n            // not sure if this is needed.\r\n            var codemirror = this.get('codemirror');\r\n            codemirror.off('change', onChangeHandler);\r\n            codemirror.off('scroll');\r\n        }.on('willDestroyElement'),\r\n    \r\n        clearMarkerManagerMarkers: function () {\r\n            this.clearMarkers();\r\n        }.on('willDestroyElement')\r\n    });\r\n    \r\n    __exports__[\"default\"] = Codemirror;\n  });",
    "define(\"ghost/components/gh-dropdown-button\", \n  [\"ghost/mixins/dropdown-mixin\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DropdownMixin = __dependency1__[\"default\"];\n\n    \r\n    var DropdownButton = Ember.Component.extend(DropdownMixin, {\r\n        tagName: 'button',\r\n    \r\n        // matches with the dropdown this button toggles\r\n        dropdownName: null,\r\n    \r\n        // Notify dropdown service this dropdown should be toggled\r\n        click: function (event) {\r\n            this._super(event);\r\n            this.get('dropdown').toggleDropdown(this.get('dropdownName'), this);\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = DropdownButton;\n  });",
    "define(\"ghost/components/gh-dropdown\", \n  [\"ghost/mixins/dropdown-mixin\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DropdownMixin = __dependency1__[\"default\"];\n\n    \r\n    var GhostDropdown = Ember.Component.extend(DropdownMixin, {\r\n        classNames: 'ghost-dropdown',\r\n        name: null,\r\n        closeOnClick: false,\r\n    \r\n        // Helps track the user re-opening the menu while it's fading out.\r\n        closing: false,\r\n    \r\n        // Helps track whether the dropdown is open or closes, or in a transition to either\r\n        isOpen: false,\r\n    \r\n        // Managed the toggle between the fade-in and fade-out classes\r\n        fadeIn: Ember.computed('isOpen', 'closing', function () {\r\n            return this.get('isOpen') && !this.get('closing');\r\n        }),\r\n    \r\n        classNameBindings: ['fadeIn:fade-in-scale:fade-out', 'isOpen:open:closed'],\r\n    \r\n        open: function () {\r\n            this.set('isOpen', true);\r\n            this.set('closing', false);\r\n            this.set('button.isOpen', true);\r\n        },\r\n    \r\n        close: function () {\r\n            var self = this;\r\n    \r\n            this.set('closing', true);\r\n    \r\n            if (this.get('button')) {\r\n                this.set('button.isOpen', false);\r\n            }\r\n            this.$().on('animationend webkitAnimationEnd oanimationend MSAnimationEnd', function (event) {\r\n                if (event.originalEvent.animationName === 'fade-out') {\r\n                    if (self.get('closing')) {\r\n                        self.set('isOpen', false);\r\n                        self.set('closing', false);\r\n                    }\r\n                }\r\n            });\r\n        },\r\n    \r\n        // Called by the dropdown service when any dropdown button is clicked.\r\n        toggle: function (options) {\r\n            var isClosing = this.get('closing'),\r\n                isOpen = this.get('isOpen'),\r\n                name = this.get('name'),\r\n                button = this.get('button'),\r\n                targetDropdownName = options.target;\r\n    \r\n            if (name === targetDropdownName && (!isOpen || isClosing)) {\r\n                if (!button) {\r\n                    button = options.button;\r\n                    this.set('button', button);\r\n                }\r\n                this.open();\r\n            } else if (isOpen) {\r\n                this.close();\r\n            }\r\n        },\r\n    \r\n        click: function (event) {\r\n            this._super(event);\r\n    \r\n            if (this.get('closeOnClick')) {\r\n                return this.close();\r\n            }\r\n        },\r\n    \r\n        didInsertElement: function () {\r\n            this._super();\r\n    \r\n            var dropdownService = this.get('dropdown');\r\n    \r\n            dropdownService.on('close', this, this.close);\r\n            dropdownService.on('toggle', this, this.toggle);\r\n        },\r\n    \r\n        willDestroyElement: function () {\r\n            this._super();\r\n    \r\n            var dropdownService = this.get('dropdown');\r\n    \r\n            dropdownService.off('close', this, this.close);\r\n            dropdownService.off('toggle', this, this.toggle);\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = GhostDropdown;\n  });",
    "define(\"ghost/components/gh-file-upload\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var FileUpload = Ember.Component.extend({\r\n        _file: null,\r\n    \r\n        uploadButtonText: 'Text',\r\n    \r\n        uploadButtonDisabled: true,\r\n    \r\n        change: function (event) {\r\n            this.set('uploadButtonDisabled', false);\r\n            this.sendAction('onAdd');\r\n            this._file = event.target.files[0];\r\n        },\r\n    \r\n        onUpload: 'onUpload',\r\n    \r\n        actions: {\r\n            upload: function () {\r\n                if (!this.uploadButtonDisabled && this._file) {\r\n                    this.sendAction('onUpload', this._file);\r\n                }\r\n    \r\n                // Prevent double post by disabling the button.\r\n                this.set('uploadButtonDisabled', true);\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = FileUpload;\n  });",
    "define(\"ghost/components/gh-form\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var Form = Ember.View.extend({\r\n        tagName: 'form',\r\n        attributeBindings: ['enctype'],\r\n        reset: function () {\r\n            this.$().get(0).reset();\r\n        },\r\n        didInsertElement: function () {\r\n            this.get('controller').on('reset', this, this.reset);\r\n        },\r\n        willClearRender: function () {\r\n            this.get('controller').off('reset', this, this.reset);\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = Form;\n  });",
    "define(\"ghost/components/gh-input\", \n  [\"ghost/mixins/text-input\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var TextInputMixin = __dependency1__[\"default\"];\n\n    \r\n    var Input = Ember.TextField.extend(TextInputMixin);\r\n    \r\n    __exports__[\"default\"] = Input;\n  });",
    "define(\"ghost/components/gh-markdown\", \n  [\"ghost/assets/lib/uploader\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var uploader = __dependency1__[\"default\"];\n\n    \r\n    var Markdown = Ember.Component.extend({\r\n        didInsertElement: function () {\r\n            this.set('scrollWrapper', this.$().closest('.entry-preview-content'));\r\n        },\r\n    \r\n        adjustScrollPosition: function () {\r\n            var scrollWrapper = this.get('scrollWrapper'),\r\n                scrollPosition = this.get('scrollPosition');\r\n    \r\n            scrollWrapper.scrollTop(scrollPosition);\r\n        }.observes('scrollPosition'),\r\n    \r\n        // fire off 'enable' API function from uploadManager\r\n        // might need to make sure markdown has been processed first\r\n        reInitDropzones: function () {\r\n            function handleDropzoneEvents() {\r\n                var dropzones = $('.js-drop-zone');\r\n    \r\n                uploader.call(dropzones, {\r\n                    editor: true,\r\n                    fileStorage: this.get('config.fileStorage')\r\n                });\r\n    \r\n                dropzones.on('uploadstart', Ember.run.bind(this, 'sendAction', 'uploadStarted'));\r\n                dropzones.on('uploadfailure', Ember.run.bind(this, 'sendAction', 'uploadFinished'));\r\n                dropzones.on('uploadsuccess', Ember.run.bind(this, 'sendAction', 'uploadFinished'));\r\n                dropzones.on('uploadsuccess', Ember.run.bind(this, 'sendAction', 'uploadSuccess'));\r\n            }\r\n    \r\n            Ember.run.scheduleOnce('afterRender', this, handleDropzoneEvents);\r\n        }.observes('markdown')\r\n    });\r\n    \r\n    __exports__[\"default\"] = Markdown;\n  });",
    "define(\"ghost/components/gh-modal-dialog\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var ModalDialog = Ember.Component.extend({\r\n        didInsertElement: function () {\r\n            this.$('.js-modal-container').fadeIn(50);\r\n    \r\n            this.$('.js-modal-background').show().fadeIn(10, function () {\r\n                $(this).addClass('in');\r\n            });\r\n    \r\n            this.$('.js-modal').addClass('in');\r\n        },\r\n    \r\n        willDestroyElement: function () {\r\n            this.$('.js-modal').removeClass('in');\r\n    \r\n            this.$('.js-modal-background').removeClass('in');\r\n    \r\n            return this._super();\r\n        },\r\n    \r\n        confirmaccept: 'confirmAccept',\r\n        confirmreject: 'confirmReject',\r\n    \r\n        actions: {\r\n            closeModal: function () {\r\n                this.sendAction();\r\n            },\r\n            confirm: function (type) {\r\n                this.sendAction('confirm' + type);\r\n                this.sendAction();\r\n            }\r\n        },\r\n    \r\n        klass: Ember.computed('type', 'style', 'animation', function () {\r\n            var classNames = [];\r\n    \r\n            classNames.push(this.get('type') ? 'modal-' + this.get('type') : 'modal');\r\n    \r\n            if (this.get('style')) {\r\n                this.get('style').split(',').forEach(function (style) {\r\n                    classNames.push('modal-style-' + style);\r\n                });\r\n            }\r\n    \r\n            classNames.push(this.get('animation'));\r\n    \r\n            return classNames.join(' ');\r\n        }),\r\n    \r\n        acceptButtonClass: Ember.computed('confirm.accept.buttonClass', function () {\r\n            return this.get('confirm.accept.buttonClass') ? this.get('confirm.accept.buttonClass') : 'btn btn-green';\r\n        }),\r\n    \r\n        rejectButtonClass: Ember.computed('confirm.reject.buttonClass', function () {\r\n            return this.get('confirm.reject.buttonClass') ? this.get('confirm.reject.buttonClass') : 'btn btn-red';\r\n        })\r\n    });\r\n    \r\n    __exports__[\"default\"] = ModalDialog;\n  });",
    "define(\"ghost/components/gh-notification\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var NotificationComponent = Ember.Component.extend({\r\n        classNames: ['js-bb-notification'],\r\n    \r\n        typeClass: Ember.computed(function () {\r\n            var classes = '',\r\n                message = this.get('message'),\r\n                type,\r\n                dismissible;\r\n    \r\n            // Check to see if we're working with a DS.Model or a plain JS object\r\n            if (typeof message.toJSON === 'function') {\r\n                type = message.get('type');\r\n                dismissible = message.get('dismissible');\r\n            } else {\r\n                type = message.type;\r\n                dismissible = message.dismissible;\r\n            }\r\n    \r\n            classes += 'notification-' + type;\r\n    \r\n            if (type === 'success' && dismissible !== false) {\r\n                classes += ' notification-passive';\r\n            }\r\n    \r\n            return classes;\r\n        }),\r\n    \r\n        didInsertElement: function () {\r\n            var self = this;\r\n    \r\n            self.$().on('animationend webkitAnimationEnd oanimationend MSAnimationEnd', function (event) {\r\n                /* jshint unused: false */\r\n                if (event.originalEvent.animationName === 'fade-out') {\r\n                    self.notifications.removeObject(self.get('message'));\r\n                }\r\n            });\r\n        },\r\n    \r\n        actions: {\r\n            closeNotification: function () {\r\n                var self = this;\r\n                self.notifications.closeNotification(self.get('message'));\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = NotificationComponent;\n  });",
    "define(\"ghost/components/gh-notifications\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var NotificationsComponent = Ember.Component.extend({\r\n        tagName: 'aside',\r\n        classNames: 'notifications',\r\n        classNameBindings: ['location'],\r\n    \r\n        messages: Ember.computed.filter('notifications', function (notification) {\r\n            // If this instance of the notifications component has no location affinity\r\n            // then it gets all notifications\r\n            if (!this.get('location')) {\r\n                return true;\r\n            }\r\n    \r\n            var displayLocation = (typeof notification.toJSON === 'function') ?\r\n                notification.get('location') : notification.location;\r\n    \r\n            return this.get('location') === displayLocation;\r\n        }),\r\n    \r\n        messageCountObserver: function () {\r\n            this.sendAction('notify', this.get('messages').length);\r\n        }.observes('messages.[]')\r\n    });\r\n    \r\n    __exports__[\"default\"] = NotificationsComponent;\n  });",
    "define(\"ghost/components/gh-popover-button\", \n  [\"ghost/components/gh-dropdown-button\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DropdownButton = __dependency1__[\"default\"];\n\n    \r\n    var PopoverButton = DropdownButton.extend({\r\n        click: Ember.K, // We don't want clicks on popovers, but dropdowns have them. So `K`ill them here.\r\n    \r\n        mouseEnter: function (event) {\r\n            this._super(event);\r\n            this.get('dropdown').toggleDropdown(this.get('popoverName'), this);\r\n        },\r\n    \r\n        mouseLeave: function (event) {\r\n            this._super(event);\r\n            this.get('dropdown').toggleDropdown(this.get('popoverName'), this);\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = PopoverButton;\n  });",
    "define(\"ghost/components/gh-popover\", \n  [\"ghost/components/gh-dropdown\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var GhostDropdown = __dependency1__[\"default\"];\n\n    \r\n    var GhostPopover = GhostDropdown.extend({\r\n        classNames: 'ghost-popover'\r\n    });\r\n    \r\n    __exports__[\"default\"] = GhostPopover;\n  });",
    "define(\"ghost/components/gh-role-selector\", \n  [\"ghost/components/gh-select\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var GhostSelect = __dependency1__[\"default\"];\n\n    \r\n    var RolesSelector = GhostSelect.extend({\r\n        roles: Ember.computed.alias('options'),\r\n    \r\n        options: Ember.computed(function () {\r\n            var rolesPromise = this.store.find('role', {permissions: 'assign'});\r\n    \r\n            return Ember.ArrayProxy.extend(Ember.PromiseProxyMixin)\r\n                .create({promise: rolesPromise});\r\n        })\r\n    });\r\n    \r\n    __exports__[\"default\"] = RolesSelector;\n  });",
    "define(\"ghost/components/gh-select\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    // GhostSelect is a solution to Ember.Select being evil and worthless.\r\n    // (Namely, this solves problems with async data in Ember.Select)\r\n    // Inspired by (that is, totally ripped off from) this JSBin\r\n    // http://emberjs.jsbin.com/rwjblue/40/edit\r\n    \r\n    // Usage:\r\n    // Extend this component and create a template for your component.\r\n    // Your component must define the `options` property.\r\n    // Optionally use `initialValue` to set the object\r\n    //     you want to have selected to start with.\r\n    // Both options and initalValue are promise safe.\r\n    // Set onChange in your template to be the name\r\n    //    of the action you want called in your\r\n    // For an example, see gh-roles-selector\r\n    \r\n    var GhostSelect = Ember.Component.extend({\r\n        tagName: 'span',\r\n        classNames: ['gh-select'],\r\n        attributeBindings: ['tabindex'],\r\n    \r\n        tabindex: '0', // 0 must be a string, or else it's interpreted as false\r\n    \r\n        options: null,\r\n        initialValue: null,\r\n    \r\n        resolvedOptions: null,\r\n        resolvedInitialValue: null,\r\n    \r\n        // Convert promises to their values\r\n        init: function () {\r\n            var self = this;\r\n    \r\n            this._super.apply(this, arguments);\r\n    \r\n            Ember.RSVP.hash({\r\n                resolvedOptions: this.get('options'),\r\n                resolvedInitialValue: this.get('initialValue')\r\n            }).then(function (resolvedHash) {\r\n                self.setProperties(resolvedHash);\r\n    \r\n                // Run after render to ensure the <option>s have rendered\r\n                Ember.run.schedule('afterRender', function () {\r\n                    self.setInitialValue();\r\n                });\r\n            });\r\n        },\r\n    \r\n        setInitialValue: function () {\r\n            var initialValue = this.get('resolvedInitialValue'),\r\n                options = this.get('resolvedOptions'),\r\n                initialValueIndex = options.indexOf(initialValue);\r\n    \r\n            if (initialValueIndex > -1) {\r\n                this.$('option:eq(' + initialValueIndex + ')').prop('selected', true);\r\n            }\r\n        },\r\n    \r\n        // Called by DOM events\r\n        change: function () {\r\n            this._changeSelection();\r\n        },\r\n    \r\n        // Send value to specified action\r\n        _changeSelection: function () {\r\n            var value = this._selectedValue();\r\n    \r\n            Ember.set(this, 'value', value);\r\n            this.sendAction('onChange', value);\r\n        },\r\n    \r\n        _selectedValue: function () {\r\n            var selectedIndex = this.$('select')[0].selectedIndex;\r\n    \r\n            return this.get('options').objectAt(selectedIndex);\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = GhostSelect;\n  });",
    "define(\"ghost/components/gh-tab-pane\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    // See gh-tabs-manager.js for use\r\n    var TabPane = Ember.Component.extend({\r\n        classNameBindings: ['active'],\r\n    \r\n        tabsManager: Ember.computed(function () {\r\n            return this.nearestWithProperty('isTabsManager');\r\n        }),\r\n    \r\n        tab: Ember.computed('tabsManager.tabs.[]', 'tabsManager.tabPanes.[]', function () {\r\n            var index = this.get('tabsManager.tabPanes').indexOf(this),\r\n                tabs = this.get('tabsManager.tabs');\r\n    \r\n            return tabs && tabs.objectAt(index);\r\n        }),\r\n    \r\n        active: Ember.computed.alias('tab.active'),\r\n    \r\n        // Register with the tabs manager\r\n        registerWithTabs: function () {\r\n            this.get('tabsManager').registerTabPane(this);\r\n        }.on('didInsertElement'),\r\n    \r\n        unregisterWithTabs: function () {\r\n            this.get('tabsManager').unregisterTabPane(this);\r\n        }.on('willDestroyElement')\r\n    });\r\n    \r\n    __exports__[\"default\"] = TabPane;\n  });",
    "define(\"ghost/components/gh-tab\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    // See gh-tabs-manager.js for use\r\n    var Tab = Ember.Component.extend({\r\n        tabsManager: Ember.computed(function () {\r\n            return this.nearestWithProperty('isTabsManager');\r\n        }),\r\n    \r\n        active: Ember.computed('tabsManager.activeTab', function () {\r\n            return this.get('tabsManager.activeTab') === this;\r\n        }),\r\n    \r\n        index: Ember.computed('tabsManager.tabs.@each', function () {\r\n            return this.get('tabsManager.tabs').indexOf(this);\r\n        }),\r\n    \r\n        // Select on click\r\n        click: function () {\r\n            this.get('tabsManager').select(this);\r\n        },\r\n    \r\n        // Registration methods\r\n        registerWithTabs: function () {\r\n            this.get('tabsManager').registerTab(this);\r\n        }.on('didInsertElement'),\r\n    \r\n        unregisterWithTabs: function () {\r\n            this.get('tabsManager').unregisterTab(this);\r\n        }.on('willDestroyElement')\r\n    });\r\n    \r\n    __exports__[\"default\"] = Tab;\n  });",
    "define(\"ghost/components/gh-tabs-manager\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\r\n    Heavily inspired by ic-tabs (https://github.com/instructure/ic-tabs)\r\n    \r\n    Three components work together for smooth tabbing.\r\n    1. tabs-manager (gh-tabs)\r\n    2. tab (gh-tab)\r\n    3. tab-pane (gh-tab-pane)\r\n    \r\n    ## Usage:\r\n    The tabs-manager must wrap all tab and tab-pane components,\r\n    but they can be nested at any level.\r\n    \r\n    A tab and its pane are tied together via their order.\r\n    So, the second tab within a tab manager will activate\r\n    the second pane within that manager.\r\n    \r\n    ```hbs\r\n    {{#gh-tabs-manager}}\r\n      {{#gh-tab}}\r\n        First tab\r\n      {{/gh-tab}}\r\n      {{#gh-tab}}\r\n        Second tab\r\n      {{/gh-tab}}\r\n    \r\n      ....\r\n      {{#gh-tab-pane}}\r\n        First pane\r\n      {{/gh-tab-pane}}\r\n      {{#gh-tab-pane}}\r\n        Second pane\r\n      {{/gh-tab-pane}}\r\n    {{/gh-tabs-manager}}\r\n    ```\r\n    ## Options:\r\n    \r\n    the tabs-manager will send a \"selected\" action whenever one of its\r\n    tabs is clicked.\r\n    ```hbs\r\n    {{#gh-tabs-manager selected=\"myAction\"}}\r\n        ....\r\n    {{/gh-tabs-manager}}\r\n    ```\r\n    \r\n    ## Styling:\r\n    Both tab and tab-pane elements have an \"active\"\r\n    class applied when they are active.\r\n    \r\n    */\r\n    var TabsManager = Ember.Component.extend({\r\n        activeTab: null,\r\n        tabs: [],\r\n        tabPanes: [],\r\n    \r\n        // Called when a gh-tab is clicked.\r\n        select: function (tab) {\r\n            this.set('activeTab', tab);\r\n            this.sendAction('selected');\r\n        },\r\n    \r\n        // Used by children to find this tabsManager\r\n        isTabsManager: true,\r\n    \r\n        // Register tabs and their panes to allow for\r\n        // interaction between components.\r\n        registerTab: function (tab) {\r\n            this.get('tabs').addObject(tab);\r\n        },\r\n    \r\n        unregisterTab: function (tab) {\r\n            this.get('tabs').removeObject(tab);\r\n        },\r\n    \r\n        registerTabPane: function (tabPane) {\r\n            this.get('tabPanes').addObject(tabPane);\r\n        },\r\n    \r\n        unregisterTabPane: function (tabPane) {\r\n            this.get('tabPanes').removeObject(tabPane);\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = TabsManager;\n  });",
    "define(\"ghost/components/gh-textarea\", \n  [\"ghost/mixins/text-input\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var TextInputMixin = __dependency1__[\"default\"];\n\n    \r\n    var TextArea = Ember.TextArea.extend(TextInputMixin);\r\n    \r\n    __exports__[\"default\"] = TextArea;\n  });",
    "define(\"ghost/components/gh-trim-focus-input\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var TrimFocusInput = Ember.TextField.extend({\r\n        focus: true,\r\n    \r\n        setFocus: function () {\r\n            if (this.focus) {\r\n                this.$().val(this.$().val()).focus();\r\n            }\r\n        }.on('didInsertElement'),\r\n    \r\n        focusOut: function () {\r\n            var text = this.$().val();\r\n    \r\n            this.$().val(text.trim());\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = TrimFocusInput;\n  });",
    "define(\"ghost/components/gh-upload-modal\", \n  [\"ghost/components/gh-modal-dialog\",\"ghost/assets/lib/uploader\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var ModalDialog = __dependency1__[\"default\"];\n\n    var upload = __dependency2__[\"default\"];\n\n    \r\n    var UploadModal = ModalDialog.extend({\r\n        layoutName: 'components/gh-modal-dialog',\r\n    \r\n        didInsertElement: function () {\r\n            this._super();\r\n            upload.call(this.$('.js-drop-zone'), {fileStorage: this.get('config.fileStorage')});\r\n        },\r\n        confirm: {\r\n            reject: {\r\n                func: function () { // The function called on rejection\r\n                    return true;\r\n                },\r\n                buttonClass: 'btn btn-default',\r\n                text: 'Cancel' // The reject button text\r\n            },\r\n            accept: {\r\n                buttonClass: 'btn btn-blue right',\r\n                text: 'Save', // The accept button texttext: 'Save'\r\n                func: function () {\r\n                    var imageType = 'model.' + this.get('imageType');\r\n    \r\n                    if (this.$('.js-upload-url').val()) {\r\n                        this.set(imageType, this.$('.js-upload-url').val());\r\n                    } else {\r\n                        this.set(imageType, this.$('.js-upload-target').attr('src'));\r\n                    }\r\n                    return true;\r\n                }\r\n            }\r\n        },\r\n    \r\n        actions: {\r\n            closeModal: function () {\r\n                this.sendAction();\r\n            },\r\n            confirm: function (type) {\r\n                var func = this.get('confirm.' + type + '.func');\r\n                if (typeof func === 'function') {\r\n                    func.apply(this);\r\n                }\r\n                this.sendAction();\r\n                this.sendAction('confirm' + type);\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = UploadModal;\n  });",
    "define(\"ghost/components/gh-uploader\", \n  [\"ghost/assets/lib/uploader\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var uploader = __dependency1__[\"default\"];\n\n    \r\n    var PostImageUploader = Ember.Component.extend({\r\n        classNames: ['image-uploader', 'js-post-image-upload'],\r\n    \r\n        setup: function () {\r\n            var $this = this.$(),\r\n                self = this;\r\n    \r\n            uploader.call($this, {\r\n                editor: true,\r\n                fileStorage: this.get('config.fileStorage')\r\n            });\r\n    \r\n            $this.on('uploadsuccess', function (event, result) {\r\n                if (result && result !== '' && result !== 'http://') {\r\n                    self.sendAction('uploaded', result);\r\n                }\r\n            });\r\n    \r\n            $this.find('.js-cancel').on('click', function () {\r\n                self.sendAction('canceled');\r\n            });\r\n        }.on('didInsertElement'),\r\n    \r\n        removeListeners: function () {\r\n            var $this = this.$();\r\n    \r\n            $this.off();\r\n            $this.find('.js-cancel').off();\r\n        }.on('willDestroyElement')\r\n    });\r\n    \r\n    __exports__[\"default\"] = PostImageUploader;\n  });",
    "define(\"ghost/config\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    function configureApp(App) {\r\n        if (!App instanceof Ember.Application) {\r\n            return;\r\n        }\r\n    \r\n        App.reopen({\r\n            LOG_ACTIVE_GENERATION: true,\r\n            LOG_MODULE_RESOLVER: true,\r\n            LOG_TRANSITIONS: true,\r\n            LOG_TRANSITIONS_INTERNAL: true,\r\n            LOG_VIEW_LOOKUPS: true\r\n        });\r\n    }\r\n    \r\n    __exports__[\"default\"] = configureApp;\n  });",
    "define(\"ghost/controllers/application\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var ApplicationController = Ember.Controller.extend({\r\n        // jscs: disable\r\n        hideNav: Ember.computed.match('currentPath', /(error|signin|signup|setup|forgotten|reset)/),\r\n        // jscs: enable\r\n    \r\n        topNotificationCount: 0,\r\n        showGlobalMobileNav: false,\r\n        showSettingsMenu: false,\r\n    \r\n         userImageAlt: Ember.computed('session.user.name', function () {\r\n            var name = this.get('session.user.name');\r\n    \r\n            return name + '\\'s profile picture';\r\n        }),\r\n    \r\n        actions: {\r\n            topNotificationChange: function (count) {\r\n                this.set('topNotificationCount', count);\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = ApplicationController;\n  });",
    "define(\"ghost/controllers/debug\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var DebugController = Ember.Controller.extend(Ember.Evented, {\r\n        uploadButtonText: 'Import',\r\n        importErrors: '',\r\n    \r\n        actions: {\r\n            onUpload: function (file) {\r\n                var self = this,\r\n                    formData = new FormData();\r\n    \r\n                this.set('uploadButtonText', 'Importing');\r\n                this.notifications.closePassive();\r\n    \r\n                formData.append('importfile', file);\r\n    \r\n                ic.ajax.request(this.get('ghostPaths.url').api('db'), {\r\n                    type: 'POST',\r\n                    data: formData,\r\n                    dataType: 'json',\r\n                    cache: false,\r\n                    contentType: false,\r\n                    processData: false\r\n                }).then(function () {\r\n                    self.notifications.showSuccess('Import successful.');\r\n                }).catch(function (response) {\r\n                    if (response && response.jqXHR && response.jqXHR.responseJSON && response.jqXHR.responseJSON.errors) {\r\n                        self.set('importErrors', response.jqXHR.responseJSON.errors);\r\n                    }\r\n    \r\n                    self.notifications.showError('Import Failed');\r\n                }).finally(function () {\r\n                    self.set('uploadButtonText', 'Import');\r\n                    self.trigger('reset');\r\n                });\r\n            },\r\n    \r\n            exportData: function () {\r\n                var iframe = $('#iframeDownload'),\r\n                    downloadURL = this.get('ghostPaths.url').api('db') +\r\n                        '?access_token=' + this.get('session.access_token');\r\n    \r\n                if (iframe.length === 0) {\r\n                    iframe = $('<iframe>', {id: 'iframeDownload'}).hide().appendTo('body');\r\n                }\r\n    \r\n                iframe.attr('src', downloadURL);\r\n            },\r\n    \r\n            sendTestEmail: function () {\r\n                var self = this;\r\n    \r\n                ic.ajax.request(this.get('ghostPaths.url').api('mail', 'test'), {\r\n                    type: 'POST'\r\n                }).then(function () {\r\n                    self.notifications.showSuccess('Check your email for the test message.');\r\n                }).catch(function (error) {\r\n                    if (typeof error.jqXHR !== 'undefined') {\r\n                        self.notifications.showAPIError(error);\r\n                    } else {\r\n                        self.notifications.showErrors(error);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = DebugController;\n  });",
    "define(\"ghost/controllers/editor/edit\", \n  [\"ghost/mixins/editor-base-controller\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var EditorControllerMixin = __dependency1__[\"default\"];\n\n    \r\n    var EditorEditController = Ember.ObjectController.extend(EditorControllerMixin);\r\n    \r\n    __exports__[\"default\"] = EditorEditController;\n  });",
    "define(\"ghost/controllers/editor/new\", \n  [\"ghost/mixins/editor-base-controller\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var EditorControllerMixin = __dependency1__[\"default\"];\n\n    \r\n    var EditorNewController = Ember.ObjectController.extend(EditorControllerMixin, {\r\n        actions: {\r\n            /**\r\n              * Redirect to editor after the first save\r\n              */\r\n            save: function (options) {\r\n                var self = this;\r\n                return this._super(options).then(function (model) {\r\n                    if (model.get('id')) {\r\n                        self.replaceRoute('editor.edit', model);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = EditorNewController;\n  });",
    "define(\"ghost/controllers/error\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var ErrorController = Ember.Controller.extend({\r\n        code: Ember.computed('content.status', function () {\r\n            return this.get('content.status') > 200 ? this.get('content.status') : 500;\r\n        }),\r\n        message: Ember.computed('content.statusText', function () {\r\n            if (this.get('code') === 404) {\r\n                return 'No Ghost Found';\r\n            }\r\n    \r\n            return this.get('content.statusText') !== 'error' ? this.get('content.statusText') : 'Internal Server Error';\r\n        }),\r\n        stack: false\r\n    });\r\n    \r\n    __exports__[\"default\"] = ErrorController;\n  });",
    "define(\"ghost/controllers/forgotten\", \n  [\"ghost/utils/ajax\",\"ghost/mixins/validation-engine\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    /* jshint unused: false */\r\n    var ajax = __dependency1__[\"default\"];\n\n    var ValidationEngine = __dependency2__[\"default\"];\n\n    \r\n    var ForgottenController = Ember.Controller.extend(ValidationEngine, {\r\n        email: '',\r\n        submitting: false,\r\n    \r\n        // ValidationEngine settings\r\n        validationType: 'forgotten',\r\n    \r\n        actions: {\r\n            submit: function () {\r\n                var self = this,\r\n                    data = self.getProperties('email');\r\n    \r\n                this.toggleProperty('submitting');\r\n                this.validate({format: false}).then(function () {\r\n                    ajax({\r\n                        url: self.get('ghostPaths.url').api('authentication', 'passwordreset'),\r\n                        type: 'POST',\r\n                        data: {\r\n                            passwordreset: [{\r\n                                email: data.email\r\n                            }]\r\n                        }\r\n                    }).then(function (resp) {\r\n                        self.toggleProperty('submitting');\r\n                        self.notifications.showSuccess('Please check your email for instructions.', {delayed: true});\r\n                        self.set('email', '');\r\n                        self.transitionToRoute('signin');\r\n                    }).catch(function (resp) {\r\n                        self.toggleProperty('submitting');\r\n                        self.notifications.showAPIError(resp, {defaultErrorText: 'There was a problem logging in, please try again.'});\r\n                    });\r\n                }).catch(function (errors) {\r\n                    self.toggleProperty('submitting');\r\n                    self.notifications.showErrors(errors);\r\n                });\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = ForgottenController;\n  });",
    "define(\"ghost/controllers/modals/auth-failed-unsaved\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var AuthFailedUnsavedController = Ember.Controller.extend({\r\n        editorController: Ember.computed.alias('model'),\r\n    \r\n        actions: {\r\n            confirmAccept: function () {\r\n                var editorController = this.get('editorController');\r\n    \r\n                if (editorController) {\r\n                    editorController.get('model').rollback();\r\n                }\r\n    \r\n                window.onbeforeunload = null;\r\n    \r\n                window.location = this.get('ghostPaths').adminRoot + '/signin/';\r\n            },\r\n    \r\n            confirmReject: function () {\r\n            }\r\n        },\r\n    \r\n        confirm: {\r\n            accept: {\r\n                text: 'Leave',\r\n                buttonClass: 'btn btn-red'\r\n            },\r\n            reject: {\r\n                text: 'Stay',\r\n                buttonClass: 'btn btn-default btn-minor'\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = AuthFailedUnsavedController;\n  });",
    "define(\"ghost/controllers/modals/copy-html\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var CopyHTMLController = Ember.Controller.extend({\r\n    \r\n        generatedHTML: Ember.computed.alias('model.generatedHTML')\r\n    \r\n    });\r\n    \r\n    __exports__[\"default\"] = CopyHTMLController;\n  });",
    "define(\"ghost/controllers/modals/delete-all\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var DeleteAllController = Ember.Controller.extend({\r\n        actions: {\r\n            confirmAccept: function () {\r\n                var self = this;\r\n    \r\n                ic.ajax.request(this.get('ghostPaths.url').api('db'), {\r\n                    type: 'DELETE'\r\n                }).then(function () {\r\n                    self.notifications.showSuccess('All content deleted from database.');\r\n                }).catch(function (response) {\r\n                    self.notifications.showErrors(response);\r\n                });\r\n            },\r\n    \r\n            confirmReject: function () {\r\n                return false;\r\n            }\r\n        },\r\n    \r\n        confirm: {\r\n            accept: {\r\n                text: 'Delete',\r\n                buttonClass: 'btn btn-red'\r\n            },\r\n            reject: {\r\n                text: 'Cancel',\r\n                buttonClass: 'btn btn-default btn-minor'\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = DeleteAllController;\n  });",
    "define(\"ghost/controllers/modals/delete-post\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var DeletePostController = Ember.Controller.extend({\r\n        actions: {\r\n            confirmAccept: function () {\r\n                var self = this,\r\n                    model = this.get('model');\r\n    \r\n                // definitely want to clear the data store and post of any unsaved, client-generated tags\r\n                model.updateTags();\r\n    \r\n                model.destroyRecord().then(function () {\r\n                    self.get('dropdown').closeDropdowns();\r\n                    self.transitionToRoute('posts.index');\r\n                    self.notifications.showSuccess('Your post has been deleted.', {delayed: true});\r\n                }, function () {\r\n                    self.notifications.showError('Your post could not be deleted. Please try again.');\r\n                });\r\n            },\r\n    \r\n            confirmReject: function () {\r\n                return false;\r\n            }\r\n        },\r\n    \r\n        confirm: {\r\n            accept: {\r\n                text: 'Delete',\r\n                buttonClass: 'btn btn-red'\r\n            },\r\n            reject: {\r\n                text: 'Cancel',\r\n                buttonClass: 'btn btn-default btn-minor'\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = DeletePostController;\n  });",
    "define(\"ghost/controllers/modals/delete-user\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var DeleteUserController = Ember.Controller.extend({\r\n        actions: {\r\n            confirmAccept: function () {\r\n                var self = this,\r\n                    user = this.get('model');\r\n    \r\n                user.destroyRecord().then(function () {\r\n                    self.store.unloadAll('post');\r\n                    self.transitionToRoute('settings.users');\r\n                    self.notifications.showSuccess('The user has been deleted.', {delayed: true});\r\n                }, function () {\r\n                    self.notifications.showError('The user could not be deleted. Please try again.');\r\n                });\r\n            },\r\n    \r\n            confirmReject: function () {\r\n                return false;\r\n            }\r\n        },\r\n    \r\n        confirm: {\r\n            accept: {\r\n                text: 'Delete User',\r\n                buttonClass: 'btn btn-red'\r\n            },\r\n            reject: {\r\n                text: 'Cancel',\r\n                buttonClass: 'btn btn-default btn-minor'\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = DeleteUserController;\n  });",
    "define(\"ghost/controllers/modals/invite-new-user\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var InviteNewUserController = Ember.Controller.extend({\r\n        // Used to set the initial value for the dropdown\r\n        authorRole: Ember.computed(function () {\r\n            var self = this;\r\n    \r\n            return this.store.find('role').then(function (roles) {\r\n                var authorRole = roles.findBy('name', 'Author');\r\n    \r\n                // Initialize role as well.\r\n                self.set('role', authorRole);\r\n                self.set('authorRole', authorRole);\r\n    \r\n                return authorRole;\r\n            });\r\n        }),\r\n    \r\n        confirm: {\r\n            accept: {\r\n                text: 'send invitation now'\r\n            },\r\n            reject: {\r\n                buttonClass: 'hidden'\r\n            }\r\n        },\r\n    \r\n        actions: {\r\n            setRole: function (role) {\r\n                this.set('role', role);\r\n            },\r\n    \r\n            confirmAccept: function () {\r\n                var email = this.get('email'),\r\n                    role = this.get('role'),\r\n                    self = this,\r\n                    newUser;\r\n    \r\n                // reset the form and close the modal\r\n                self.set('email', '');\r\n                self.set('role', self.get('authorRole'));\r\n                self.send('closeModal');\r\n    \r\n                this.store.find('user').then(function (result) {\r\n                    var invitedUser = result.findBy('email', email);\r\n    \r\n                    if (invitedUser) {\r\n                        if (invitedUser.get('status') === 'invited' || invitedUser.get('status') === 'invited-pending') {\r\n                            self.notifications.showWarn('A user with that email address was already invited.');\r\n                        } else {\r\n                            self.notifications.showWarn('A user with that email address already exists.');\r\n                        }\r\n                    } else {\r\n                        newUser = self.store.createRecord('user', {\r\n                            email: email,\r\n                            status: 'invited',\r\n                            role: role\r\n                        });\r\n    \r\n                        newUser.save().then(function () {\r\n                            var notificationText = 'Invitation sent! (' + email + ')';\r\n    \r\n                            // If sending the invitation email fails, the API will still return a status of 201\r\n                            // but the user's status in the response object will be 'invited-pending'.\r\n                            if (newUser.get('status') === 'invited-pending') {\r\n                                self.notifications.showWarn('Invitation email was not sent.  Please try resending.');\r\n                            } else {\r\n                                self.notifications.showSuccess(notificationText);\r\n                            }\r\n                        }).catch(function (errors) {\r\n                            newUser.deleteRecord();\r\n                            self.notifications.showErrors(errors);\r\n                        });\r\n                    }\r\n                });\r\n            },\r\n    \r\n            confirmReject: function () {\r\n                return false;\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = InviteNewUserController;\n  });",
    "define(\"ghost/controllers/modals/leave-editor\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var LeaveEditorController = Ember.Controller.extend({\r\n        args: Ember.computed.alias('model'),\r\n    \r\n        actions: {\r\n            confirmAccept: function () {\r\n                var args = this.get('args'),\r\n                    editorController,\r\n                    model,\r\n                    transition;\r\n    \r\n                if (Ember.isArray(args)) {\r\n                    editorController = args[0];\r\n                    transition = args[1];\r\n                    model = editorController.get('model');\r\n                }\r\n    \r\n                if (!transition || !editorController) {\r\n                    this.notifications.showError('Sorry, there was an error in the application. Please let the Ghost team know what happened.');\r\n    \r\n                    return true;\r\n                }\r\n    \r\n                // definitely want to clear the data store and post of any unsaved, client-generated tags\r\n                model.updateTags();\r\n    \r\n                if (model.get('isNew')) {\r\n                    // the user doesn't want to save the new, unsaved post, so delete it.\r\n                    model.deleteRecord();\r\n                } else {\r\n                    // roll back changes on model props\r\n                    model.rollback();\r\n                }\r\n    \r\n                // setting isDirty to false here allows willTransition on the editor route to succeed\r\n                editorController.set('isDirty', false);\r\n    \r\n                // since the transition is now certain to complete, we can unset window.onbeforeunload here\r\n                window.onbeforeunload = null;\r\n    \r\n                transition.retry();\r\n            },\r\n    \r\n            confirmReject: function () {\r\n            }\r\n        },\r\n    \r\n        confirm: {\r\n            accept: {\r\n                text: 'Leave',\r\n                buttonClass: 'btn btn-red'\r\n            },\r\n            reject: {\r\n                text: 'Stay',\r\n                buttonClass: 'btn btn-default btn-minor'\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = LeaveEditorController;\n  });",
    "define(\"ghost/controllers/modals/transfer-owner\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var TransferOwnerController = Ember.Controller.extend({\r\n        actions: {\r\n            confirmAccept: function () {\r\n                var user = this.get('model'),\r\n                    url = this.get('ghostPaths.url').api('users', 'owner'),\r\n                    self = this;\r\n    \r\n                self.get('dropdown').closeDropdowns();\r\n    \r\n                ic.ajax.request(url, {\r\n                    type: 'PUT',\r\n                    data: {\r\n                        owner: [{\r\n                            id: user.get('id')\r\n                        }]\r\n                    }\r\n                }).then(function (response) {\r\n                    // manually update the roles for the users that just changed roles\r\n                    // because store.pushPayload is not working with embedded relations\r\n                    if (response && Ember.isArray(response.users)) {\r\n                        response.users.forEach(function (userJSON) {\r\n                            var user = self.store.getById('user', userJSON.id),\r\n                                role = self.store.getById('role', userJSON.roles[0].id);\r\n    \r\n                            user.set('role', role);\r\n                        });\r\n                    }\r\n    \r\n                    self.notifications.showSuccess('Ownership successfully transferred to ' + user.get('name'));\r\n                }).catch(function (error) {\r\n                    self.notifications.showAPIError(error);\r\n                });\r\n            },\r\n    \r\n            confirmReject: function () {\r\n                return false;\r\n            }\r\n        },\r\n    \r\n        confirm: {\r\n            accept: {\r\n                text: 'Yep - I\\'m sure',\r\n                buttonClass: 'btn btn-red'\r\n            },\r\n            reject: {\r\n                text: 'Cancel',\r\n                buttonClass: 'btn btn-default btn-minor'\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = TransferOwnerController;\n  });",
    "define(\"ghost/controllers/modals/upload\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    \r\n    var UploadController = Ember.Controller.extend({\r\n        acceptEncoding: 'image/*',\r\n        actions: {\r\n            confirmAccept: function () {\r\n                var self = this;\r\n    \r\n                this.get('model').save().then(function (model) {\r\n                    self.notifications.showSuccess('Saved');\r\n                    return model;\r\n                }).catch(function (err) {\r\n                    self.notifications.showErrors(err);\r\n                });\r\n            },\r\n    \r\n            confirmReject: function () {\r\n                return false;\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = UploadController;\n  });",
    "define(\"ghost/controllers/post-settings-menu\", \n  [\"ghost/utils/date-formatting\",\"ghost/models/slug-generator\",\"ghost/utils/bound-one-way\",\"ghost/utils/isNumber\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    /* global moment */\r\n    var parseDateString = __dependency1__.parseDateString;\n    var formatDate = __dependency1__.formatDate;\n\n    var SlugGenerator = __dependency2__[\"default\"];\n\n    var boundOneWay = __dependency3__[\"default\"];\n\n    var isNumber = __dependency4__[\"default\"];\n\n    \r\n    var PostSettingsMenuController = Ember.ObjectController.extend({\r\n        // State for if the user is viewing a tab's pane.\r\n        needs: 'application',\r\n    \r\n        lastPromise: null,\r\n    \r\n        isViewingSubview: Ember.computed('controllers.application.showSettingsMenu', function (key, value) {\r\n            // Not viewing a subview if we can't even see the PSM\r\n            if (!this.get('controllers.application.showSettingsMenu')) {\r\n                return false;\r\n            }\r\n            if (arguments.length > 1) {\r\n                return value;\r\n            }\r\n    \r\n            return false;\r\n        }),\r\n    \r\n        selectedAuthor: null,\r\n        initializeSelectedAuthor: function () {\r\n            var self = this;\r\n    \r\n            return this.get('author').then(function (author) {\r\n                self.set('selectedAuthor', author);\r\n                return author;\r\n            });\r\n        }.observes('model'),\r\n    \r\n        changeAuthor: function () {\r\n            var author = this.get('author'),\r\n                selectedAuthor = this.get('selectedAuthor'),\r\n                model = this.get('model'),\r\n                self = this;\r\n    \r\n            // return if nothing changed\r\n            if (selectedAuthor.get('id') === author.get('id')) {\r\n                return;\r\n            }\r\n    \r\n            model.set('author', selectedAuthor);\r\n    \r\n            // if this is a new post (never been saved before), don't try to save it\r\n            if (this.get('isNew')) {\r\n                return;\r\n            }\r\n    \r\n            model.save().catch(function (errors) {\r\n                self.showErrors(errors);\r\n                self.set('selectedAuthor', author);\r\n                model.rollback();\r\n            });\r\n        }.observes('selectedAuthor'),\r\n    \r\n        authors: Ember.computed(function () {\r\n            // Loaded asynchronously, so must use promise proxies.\r\n            var deferred = {};\r\n    \r\n            deferred.promise = this.store.find('user', {limit: 'all'}).then(function (users) {\r\n                return users.rejectBy('id', 'me').sortBy('name');\r\n            }).then(function (users) {\r\n                return users.filter(function (user) {\r\n                    return user.get('active');\r\n                });\r\n            });\r\n    \r\n            return Ember.ArrayProxy\r\n                .extend(Ember.PromiseProxyMixin)\r\n                .create(deferred);\r\n        }),\r\n    \r\n        publishedAtValue: Ember.computed('published_at', function () {\r\n            var pubDate = this.get('published_at');\r\n    \r\n            if (pubDate) {\r\n                return formatDate(pubDate);\r\n            }\r\n    \r\n            return formatDate(moment());\r\n        }),\r\n    \r\n        slugValue: boundOneWay('slug'),\r\n    \r\n        // Lazy load the slug generator\r\n        slugGenerator: Ember.computed(function () {\r\n            return SlugGenerator.create({\r\n                ghostPaths: this.get('ghostPaths'),\r\n                slugType: 'post'\r\n            });\r\n        }),\r\n    \r\n        // Requests slug from title\r\n        generateAndSetSlug: function (destination) {\r\n            var self = this,\r\n                title = this.get('titleScratch'),\r\n                afterSave = this.get('lastPromise'),\r\n                promise;\r\n    \r\n            // Only set an \"untitled\" slug once per post\r\n            if (title === '(Untitled)' && this.get('slug')) {\r\n                return;\r\n            }\r\n    \r\n            promise = Ember.RSVP.resolve(afterSave).then(function () {\r\n                return self.get('slugGenerator').generateSlug(title).then(function (slug) {\r\n                    self.set(destination, slug);\r\n                });\r\n            });\r\n    \r\n            this.set('lastPromise', promise);\r\n        },\r\n    \r\n        metaTitleScratch: boundOneWay('meta_title'),\r\n        metaDescriptionScratch: boundOneWay('meta_description'),\r\n    \r\n        seoTitle: Ember.computed('titleScratch', 'metaTitleScratch', function () {\r\n            var metaTitle = this.get('metaTitleScratch') || '';\r\n    \r\n            metaTitle = metaTitle.length > 0 ? metaTitle : this.get('titleScratch');\r\n    \r\n            if (metaTitle.length > 70) {\r\n                metaTitle = metaTitle.substring(0, 70).trim();\r\n                metaTitle = Ember.Handlebars.Utils.escapeExpression(metaTitle);\r\n                metaTitle = new Ember.Handlebars.SafeString(metaTitle + '&hellip;');\r\n            }\r\n    \r\n            return metaTitle;\r\n        }),\r\n    \r\n        seoDescription: Ember.computed('scratch', 'metaDescriptionScratch', function () {\r\n            var metaDescription = this.get('metaDescriptionScratch') || '',\r\n                el,\r\n                html = '',\r\n                placeholder;\r\n    \r\n            if (metaDescription.length > 0) {\r\n                placeholder = metaDescription;\r\n            } else {\r\n                el = $('.rendered-markdown');\r\n    \r\n                // Get rendered markdown\r\n                if (el !== undefined && el.length > 0) {\r\n                    html = el.clone();\r\n                    html.find('.js-drop-zone').remove();\r\n                    html = html[0].innerHTML;\r\n                }\r\n    \r\n                // Strip HTML\r\n                placeholder = $('<div />', {html: html}).text();\r\n                // Replace new lines and trim\r\n                // jscs: disable\r\n                placeholder = placeholder.replace(/\\n+/g, ' ').trim();\r\n                // jscs: enable\r\n            }\r\n    \r\n            if (placeholder.length > 156) {\r\n                // Limit to 156 characters\r\n                placeholder = placeholder.substring(0, 156).trim();\r\n                placeholder = Ember.Handlebars.Utils.escapeExpression(placeholder);\r\n                placeholder = new Ember.Handlebars.SafeString(placeholder + '&hellip;');\r\n            }\r\n    \r\n            return placeholder;\r\n        }),\r\n    \r\n        seoURL: Ember.computed('slug', function () {\r\n            var blogUrl = this.get('config').blogUrl,\r\n                seoSlug = this.get('slug') ? this.get('slug') : '',\r\n                seoURL = blogUrl + '/' + seoSlug;\r\n    \r\n            // only append a slash to the URL if the slug exists\r\n            if (seoSlug) {\r\n                seoURL += '/';\r\n            }\r\n    \r\n            if (seoURL.length > 70) {\r\n                seoURL = seoURL.substring(0, 70).trim();\r\n                seoURL = new Ember.Handlebars.SafeString(seoURL + '&hellip;');\r\n            }\r\n    \r\n            return seoURL;\r\n        }),\r\n    \r\n        // observe titleScratch, keeping the post's slug in sync\r\n        // with it until saved for the first time.\r\n        addTitleObserver: function () {\r\n            if (this.get('isNew') || this.get('title') === '(Untitled)') {\r\n                this.addObserver('titleScratch', this, 'titleObserver');\r\n            }\r\n        }.observes('model'),\r\n    \r\n        titleObserver: function () {\r\n            var debounceId,\r\n                title = this.get('title');\r\n    \r\n            // generate a slug if a post is new and doesn't have a title yet or\r\n            // if the title is still '(Untitled)' and the slug is unaltered.\r\n            if ((this.get('isNew') && !title) || title === '(Untitled)') {\r\n                debounceId = Ember.run.debounce(this, 'generateAndSetSlug', ['slug'], 700);\r\n            }\r\n    \r\n            this.set('debounceId', debounceId);\r\n        },\r\n    \r\n        showErrors: function (errors) {\r\n            errors = Ember.isArray(errors) ? errors : [errors];\r\n            this.notifications.showErrors(errors);\r\n        },\r\n    \r\n        showSuccess: function (message) {\r\n            this.notifications.showSuccess(message);\r\n        },\r\n    \r\n        actions: {\r\n            togglePage: function () {\r\n                var self = this;\r\n    \r\n                this.toggleProperty('page');\r\n                // If this is a new post.  Don't save the model.  Defer the save\r\n                // to the user pressing the save button\r\n                if (this.get('isNew')) {\r\n                    return;\r\n                }\r\n    \r\n                this.get('model').save().catch(function (errors) {\r\n                    self.showErrors(errors);\r\n                    self.get('model').rollback();\r\n                });\r\n            },\r\n    \r\n            toggleFeatured: function () {\r\n                var self = this;\r\n    \r\n                this.toggleProperty('featured');\r\n    \r\n                // If this is a new post.  Don't save the model.  Defer the save\r\n                // to the user pressing the save button\r\n                if (this.get('isNew')) {\r\n                    return;\r\n                }\r\n    \r\n                this.get('model').save(this.get('saveOptions')).catch(function (errors) {\r\n                    self.showErrors(errors);\r\n                    self.get('model').rollback();\r\n                });\r\n            },\r\n    \r\n            /**\r\n             * triggered by user manually changing slug\r\n             */\r\n            updateSlug: function (newSlug) {\r\n                var slug = this.get('slug'),\r\n                    self = this;\r\n    \r\n                newSlug = newSlug || slug;\r\n    \r\n                newSlug = newSlug && newSlug.trim();\r\n    \r\n                // Ignore unchanged slugs or candidate slugs that are empty\r\n                if (!newSlug || slug === newSlug) {\r\n                    // reset the input to its previous state\r\n                    this.set('slugValue', slug);\r\n    \r\n                    return;\r\n                }\r\n    \r\n                this.get('slugGenerator').generateSlug(newSlug).then(function (serverSlug) {\r\n                    // If after getting the sanitized and unique slug back from the API\r\n                    // we end up with a slug that matches the existing slug, abort the change\r\n                    if (serverSlug === slug) {\r\n                        return;\r\n                    }\r\n    \r\n                    // Because the server transforms the candidate slug by stripping\r\n                    // certain characters and appending a number onto the end of slugs\r\n                    // to enforce uniqueness, there are cases where we can get back a\r\n                    // candidate slug that is a duplicate of the original except for\r\n                    // the trailing incrementor (e.g., this-is-a-slug and this-is-a-slug-2)\r\n    \r\n                    // get the last token out of the slug candidate and see if it's a number\r\n                    var slugTokens = serverSlug.split('-'),\r\n                        check = Number(slugTokens.pop());\r\n    \r\n                    // if the candidate slug is the same as the existing slug except\r\n                    // for the incrementor then the existing slug should be used\r\n                    if (isNumber(check) && check > 0) {\r\n                        if (slug === slugTokens.join('-') && serverSlug !== newSlug) {\r\n                            self.set('slugValue', slug);\r\n    \r\n                            return;\r\n                        }\r\n                    }\r\n    \r\n                    self.set('slug', serverSlug);\r\n    \r\n                    if (self.hasObserverFor('titleScratch')) {\r\n                        self.removeObserver('titleScratch', self, 'titleObserver');\r\n                    }\r\n    \r\n                    // If this is a new post.  Don't save the model.  Defer the save\r\n                    // to the user pressing the save button\r\n                    if (self.get('isNew')) {\r\n                        return;\r\n                    }\r\n    \r\n                    return self.get('model').save();\r\n                }).catch(function (errors) {\r\n                    self.showErrors(errors);\r\n                    self.get('model').rollback();\r\n                });\r\n            },\r\n    \r\n            /**\r\n             * Parse user's set published date.\r\n             * Action sent by post settings menu view.\r\n             * (#1351)\r\n             */\r\n            setPublishedAt: function (userInput) {\r\n                var errMessage = '',\r\n                    newPublishedAt = parseDateString(userInput),\r\n                    publishedAt = this.get('published_at'),\r\n                    self = this;\r\n    \r\n                if (!userInput) {\r\n                    // Clear out the published_at field for a draft\r\n                    if (this.get('isDraft')) {\r\n                        this.set('published_at', null);\r\n                    }\r\n    \r\n                    return;\r\n                }\r\n    \r\n                // Validate new Published date\r\n                if (!newPublishedAt.isValid()) {\r\n                    errMessage = 'Published Date must be a valid date with format: ' +\r\n                        'DD MMM YY @ HH:mm (e.g. 6 Dec 14 @ 15:00)';\r\n                }\r\n                if (newPublishedAt.diff(new Date(), 'h') > 0) {\r\n                    errMessage = 'Published Date cannot currently be in the future.';\r\n                }\r\n    \r\n                // If errors, notify and exit.\r\n                if (errMessage) {\r\n                    this.showErrors(errMessage);\r\n    \r\n                    return;\r\n                }\r\n    \r\n                // Do nothing if the user didn't actually change the date\r\n                if (publishedAt && publishedAt.isSame(newPublishedAt)) {\r\n                    return;\r\n                }\r\n    \r\n                // Validation complete\r\n                this.set('published_at', newPublishedAt);\r\n    \r\n                // If this is a new post.  Don't save the model.  Defer the save\r\n                // to the user pressing the save button\r\n                if (this.get('isNew')) {\r\n                    return;\r\n                }\r\n    \r\n                this.get('model').save().catch(function (errors) {\r\n                    self.showErrors(errors);\r\n                    self.get('model').rollback();\r\n                });\r\n            },\r\n    \r\n            setMetaTitle: function (metaTitle) {\r\n                var self = this,\r\n                    currentTitle = this.get('meta_title') || '';\r\n    \r\n                // Only update if the title has changed\r\n                if (currentTitle === metaTitle) {\r\n                    return;\r\n                }\r\n    \r\n                this.set('meta_title', metaTitle);\r\n    \r\n                // If this is a new post.  Don't save the model.  Defer the save\r\n                // to the user pressing the save button\r\n                if (this.get('isNew')) {\r\n                    return;\r\n                }\r\n    \r\n                this.get('model').save().catch(function (errors) {\r\n                    self.showErrors(errors);\r\n                });\r\n            },\r\n    \r\n            setMetaDescription: function (metaDescription) {\r\n                var self = this,\r\n                    currentDescription = this.get('meta_description') || '';\r\n    \r\n                // Only update if the description has changed\r\n                if (currentDescription === metaDescription) {\r\n                    return;\r\n                }\r\n    \r\n                this.set('meta_description', metaDescription);\r\n    \r\n                // If this is a new post.  Don't save the model.  Defer the save\r\n                // to the user pressing the save button\r\n                if (this.get('isNew')) {\r\n                    return;\r\n                }\r\n    \r\n                this.get('model').save().catch(function (errors) {\r\n                    self.showErrors(errors);\r\n                });\r\n            },\r\n    \r\n            setCoverImage: function (image) {\r\n                var self = this;\r\n    \r\n                this.set('image', image);\r\n    \r\n                if (this.get('isNew')) {\r\n                    return;\r\n                }\r\n    \r\n                this.get('model').save().catch(function (errors) {\r\n                    self.showErrors(errors);\r\n                    self.get('model').rollback();\r\n                });\r\n            },\r\n    \r\n            clearCoverImage: function () {\r\n                var self = this;\r\n    \r\n                this.set('image', '');\r\n    \r\n                if (this.get('isNew')) {\r\n                    return;\r\n                }\r\n    \r\n                this.get('model').save().catch(function (errors) {\r\n                    self.showErrors(errors);\r\n                    self.get('model').rollback();\r\n                });\r\n            },\r\n    \r\n            showSubview: function () {\r\n                this.set('isViewingSubview', true);\r\n            },\r\n    \r\n            closeSubview: function () {\r\n                this.set('isViewingSubview', false);\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = PostSettingsMenuController;\n  });",
    "define(\"ghost/controllers/post-tags-input\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var PostTagsInputController = Ember.Controller.extend({\r\n        tagEnteredOrder: Ember.A(),\r\n    \r\n        tags: Ember.computed('parentController.tags', function () {\r\n            var proxyTags = Ember.ArrayProxy.create({\r\n                content: this.get('parentController.tags')\r\n            }),\r\n            temp = proxyTags.get('arrangedContent').slice();\r\n    \r\n            proxyTags.get('arrangedContent').clear();\r\n    \r\n            this.get('tagEnteredOrder').forEach(function (tagName) {\r\n                var tag = temp.find(function (tag) {\r\n                    return tag.get('name') === tagName;\r\n                });\r\n    \r\n                if (tag) {\r\n                    proxyTags.get('arrangedContent').addObject(tag);\r\n                    temp.removeObject(tag);\r\n                }\r\n            });\r\n    \r\n            proxyTags.get('arrangedContent').unshiftObjects(temp);\r\n    \r\n            return proxyTags;\r\n        }),\r\n    \r\n        suggestions: null,\r\n        newTagText: null,\r\n    \r\n        actions: {\r\n            // triggered when the view is inserted so that later store.all('tag')\r\n            // queries hit a full store cache and we don't see empty or out-of-date\r\n            // suggestion lists\r\n            loadAllTags: function () {\r\n                this.store.find('tag');\r\n            },\r\n    \r\n            addNewTag: function () {\r\n                var newTagText = this.get('newTagText'),\r\n                    searchTerm,\r\n                    existingTags,\r\n                    newTag;\r\n    \r\n                if (Ember.isEmpty(newTagText) || this.hasTag(newTagText)) {\r\n                    this.send('reset');\r\n                    return;\r\n                }\r\n    \r\n                newTagText = newTagText.trim();\r\n                searchTerm = newTagText.toLowerCase();\r\n    \r\n                // add existing tag if we have a match\r\n                existingTags = this.store.all('tag').filter(function (tag) {\r\n                    return tag.get('name').toLowerCase() === searchTerm;\r\n                });\r\n                if (existingTags.get('length')) {\r\n                    this.send('addTag', existingTags.get('firstObject'));\r\n                } else {\r\n                    // otherwise create a new one\r\n                    newTag = this.store.createRecord('tag');\r\n                    newTag.set('name', newTagText);\r\n    \r\n                    this.send('addTag', newTag);\r\n                }\r\n    \r\n                this.send('reset');\r\n            },\r\n    \r\n            addTag: function (tag) {\r\n                if (!Ember.isEmpty(tag)) {\r\n                    this.get('tags').addObject(tag);\r\n                    this.get('tagEnteredOrder').addObject(tag.get('name'));\r\n                }\r\n    \r\n                this.send('reset');\r\n            },\r\n    \r\n            deleteTag: function (tag) {\r\n                if (tag) {\r\n                    this.get('tags').removeObject(tag);\r\n                    this.get('tagEnteredOrder').removeObject(tag.get('name'));\r\n                }\r\n            },\r\n    \r\n            deleteLastTag: function () {\r\n                this.send('deleteTag', this.get('tags.lastObject'));\r\n            },\r\n    \r\n            selectSuggestion: function (suggestion) {\r\n                if (!Ember.isEmpty(suggestion)) {\r\n                    this.get('suggestions').setEach('selected', false);\r\n                    suggestion.set('selected', true);\r\n                }\r\n            },\r\n    \r\n            selectNextSuggestion: function () {\r\n                var suggestions = this.get('suggestions'),\r\n                    selectedSuggestion = this.get('selectedSuggestion'),\r\n                    currentIndex,\r\n                    newSelection;\r\n    \r\n                if (!Ember.isEmpty(suggestions)) {\r\n                    currentIndex = suggestions.indexOf(selectedSuggestion);\r\n                    if (currentIndex + 1 < suggestions.get('length')) {\r\n                        newSelection = suggestions[currentIndex + 1];\r\n                        this.send('selectSuggestion', newSelection);\r\n                    } else {\r\n                        suggestions.setEach('selected', false);\r\n                    }\r\n                }\r\n            },\r\n    \r\n            selectPreviousSuggestion: function () {\r\n                var suggestions = this.get('suggestions'),\r\n                    selectedSuggestion = this.get('selectedSuggestion'),\r\n                    currentIndex,\r\n                    lastIndex,\r\n                    newSelection;\r\n    \r\n                if (!Ember.isEmpty(suggestions)) {\r\n                    currentIndex = suggestions.indexOf(selectedSuggestion);\r\n                    if (currentIndex === -1) {\r\n                        lastIndex = suggestions.get('length') - 1;\r\n                        this.send('selectSuggestion', suggestions[lastIndex]);\r\n                    } else if (currentIndex - 1 >= 0) {\r\n                        newSelection = suggestions[currentIndex - 1];\r\n                        this.send('selectSuggestion', newSelection);\r\n                    } else {\r\n                        suggestions.setEach('selected', false);\r\n                    }\r\n                }\r\n            },\r\n    \r\n            addSelectedSuggestion: function () {\r\n                var suggestion = this.get('selectedSuggestion');\r\n    \r\n                if (Ember.isEmpty(suggestion)) {\r\n                    return;\r\n                }\r\n    \r\n                this.send('addTag', suggestion.get('tag'));\r\n            },\r\n    \r\n            reset: function () {\r\n                this.set('suggestions', null);\r\n                this.set('newTagText', null);\r\n            }\r\n        },\r\n    \r\n        selectedSuggestion: Ember.computed('suggestions.@each.selected', function () {\r\n            var suggestions = this.get('suggestions');\r\n    \r\n            if (suggestions && suggestions.get('length')) {\r\n                return suggestions.filterBy('selected').get('firstObject');\r\n            } else {\r\n                return null;\r\n            }\r\n        }),\r\n    \r\n        updateSuggestionsList: function () {\r\n            var searchTerm = this.get('newTagText'),\r\n                matchingTags,\r\n                // Limit the suggestions number\r\n                maxSuggestions = 5,\r\n                suggestions = Ember.A();\r\n    \r\n            if (!searchTerm || Ember.isEmpty(searchTerm.trim())) {\r\n                this.set('suggestions', null);\r\n                return;\r\n            }\r\n    \r\n            searchTerm = searchTerm.trim();\r\n    \r\n            matchingTags = this.findMatchingTags(searchTerm);\r\n            matchingTags = matchingTags.slice(0, maxSuggestions);\r\n            matchingTags.forEach(function (matchingTag) {\r\n                var suggestion = this.makeSuggestionObject(matchingTag, searchTerm);\r\n                suggestions.pushObject(suggestion);\r\n            }, this);\r\n    \r\n            this.set('suggestions', suggestions);\r\n        }.observes('newTagText'),\r\n    \r\n        findMatchingTags: function (searchTerm) {\r\n            var matchingTags,\r\n                self = this,\r\n                allTags = this.store.all('tag'),\r\n                deDupe = {};\r\n    \r\n            if (allTags.get('length') === 0) {\r\n                return [];\r\n            }\r\n    \r\n            searchTerm = searchTerm.toLowerCase();\r\n    \r\n            matchingTags = allTags.filter(function (tag) {\r\n                var tagNameMatches,\r\n                    hasAlreadyBeenAdded,\r\n                    tagName = tag.get('name');\r\n    \r\n                tagNameMatches = tagName.toLowerCase().indexOf(searchTerm) !== -1;\r\n                hasAlreadyBeenAdded = self.hasTag(tagName);\r\n    \r\n                if (tagNameMatches && !hasAlreadyBeenAdded) {\r\n                    if (typeof deDupe[tagName] === 'undefined') {\r\n                        deDupe[tagName] = 1;\r\n                    } else {\r\n                        deDupe[tagName] += 1;\r\n                    }\r\n                }\r\n    \r\n                return deDupe[tagName] === 1;\r\n            });\r\n    \r\n            return matchingTags;\r\n        },\r\n    \r\n        hasTag: function (tagName) {\r\n            return this.get('tags').mapBy('name').contains(tagName);\r\n        },\r\n    \r\n        makeSuggestionObject: function (matchingTag, _searchTerm) {\r\n            var searchTerm = Ember.Handlebars.Utils.escapeExpression(_searchTerm),\r\n                // jscs:disable\r\n                regexEscapedSearchTerm = searchTerm.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&'),\r\n                // jscs:enable\r\n                tagName = Ember.Handlebars.Utils.escapeExpression(matchingTag.get('name')),\r\n                regex = new RegExp('(' + regexEscapedSearchTerm + ')', 'gi'),\r\n                highlightedName,\r\n                suggestion = Ember.Object.create();\r\n    \r\n            highlightedName = tagName.replace(regex, '<mark>$1</mark>');\r\n            highlightedName = new Ember.Handlebars.SafeString(highlightedName);\r\n    \r\n            suggestion.set('tag', matchingTag);\r\n            suggestion.set('highlightedName', highlightedName);\r\n    \r\n            return suggestion;\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = PostTagsInputController;\n  });",
    "define(\"ghost/controllers/posts\", \n  [\"ghost/mixins/pagination-controller\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var PaginationControllerMixin = __dependency1__[\"default\"];\n\n    \r\n    function publishedAtCompare(item1, item2) {\r\n        var published1 = item1.get('published_at'),\r\n            published2 = item2.get('published_at');\r\n    \r\n        if (!published1 && !published2) {\r\n            return 0;\r\n        }\r\n    \r\n        if (!published1 && published2) {\r\n            return -1;\r\n        }\r\n    \r\n        if (!published2 && published1) {\r\n            return 1;\r\n        }\r\n    \r\n        return Ember.compare(published1.valueOf(), published2.valueOf());\r\n    }\r\n    \r\n    var PostsController = Ember.ArrayController.extend(PaginationControllerMixin, {\r\n        // See PostsRoute's shortcuts\r\n        postListFocused: Ember.computed.equal('keyboardFocus', 'postList'),\r\n        postContentFocused: Ember.computed.equal('keyboardFocus', 'postContent'),\r\n        // this will cause the list to re-sort when any of these properties change on any of the models\r\n        sortProperties: ['status', 'published_at', 'updated_at'],\r\n    \r\n        // override Ember.SortableMixin\r\n        //\r\n        // this function will keep the posts list sorted when loading individual/bulk\r\n        // models from the server, even if records in between haven't been loaded.\r\n        // this can happen when reloading the page on the Editor or PostsPost routes.\r\n        //\r\n        // a custom sort function is needed in order to sort the posts list the same way the server would:\r\n        //     status: ASC\r\n        //     published_at: DESC\r\n        //     updated_at: DESC\r\n        orderBy: function (item1, item2) {\r\n            var updated1 = item1.get('updated_at'),\r\n                updated2 = item2.get('updated_at'),\r\n                statusResult,\r\n                updatedAtResult,\r\n                publishedAtResult;\r\n    \r\n            // when `updated_at` is undefined, the model is still\r\n            // being written to with the results from the server\r\n            if (item1.get('isNew') || !updated1) {\r\n                return -1;\r\n            }\r\n    \r\n            if (item2.get('isNew') || !updated2) {\r\n                return 1;\r\n            }\r\n    \r\n            statusResult = Ember.compare(item1.get('status'), item2.get('status'));\r\n            updatedAtResult = Ember.compare(updated1.valueOf(), updated2.valueOf());\r\n            publishedAtResult = publishedAtCompare(item1, item2);\r\n    \r\n            if (statusResult === 0) {\r\n                if (publishedAtResult === 0) {\r\n                    // This should be DESC\r\n                    return updatedAtResult * -1;\r\n                }\r\n                // This should be DESC\r\n                return publishedAtResult * -1;\r\n            }\r\n    \r\n            return statusResult;\r\n        },\r\n    \r\n        init: function () {\r\n            // let the PaginationControllerMixin know what type of model we will be paginating\r\n            // this is necesariy because we do not have access to the model inside the Controller::init method\r\n            this._super({modelType: 'post'});\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = PostsController;\n  });",
    "define(\"ghost/controllers/posts/post\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var PostController = Ember.ObjectController.extend({\r\n        isPublished: Ember.computed.equal('status', 'published'),\r\n        classNameBindings: ['featured'],\r\n    \r\n        actions: {\r\n            toggleFeatured: function () {\r\n                var options = {disableNProgress: true},\r\n                    self = this;\r\n    \r\n                this.toggleProperty('featured');\r\n                this.get('model').save(options).catch(function (errors) {\r\n                    self.notifications.showErrors(errors);\r\n                });\r\n            },\r\n            showPostContent: function () {\r\n                this.transitionToRoute('posts.post', this.get('model'));\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = PostController;\n  });",
    "define(\"ghost/controllers/reset\", \n  [\"ghost/utils/ajax\",\"ghost/mixins/validation-engine\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    /*global console*/\r\n    /* jshint unused: false */\r\n    var ajax = __dependency1__[\"default\"];\n\n    var ValidationEngine = __dependency2__[\"default\"];\n\n    \r\n    var ResetController = Ember.Controller.extend(ValidationEngine, {\r\n        newPassword: '',\r\n        ne2Password: '',\r\n        token: '',\r\n        submitButtonDisabled: false,\r\n    \r\n        validationType: 'reset',\r\n    \r\n        email: Ember.computed('token', function () {\r\n            // The token base64 encodes the email (and some other stuff),\r\n            // each section is divided by a '|'. Email comes second.\r\n            return atob(this.get('token')).split('|')[1];\r\n        }),\r\n    \r\n        // Used to clear sensitive information\r\n        clearData: function () {\r\n            this.setProperties({\r\n                newPassword: '',\r\n                ne2Password: '',\r\n                token: ''\r\n            });\r\n        },\r\n    \r\n        actions: {\r\n            submit: function () {\r\n                var credentials = this.getProperties('newPassword', 'ne2Password', 'token'),\r\n                    self = this;\r\n    \r\n                this.toggleProperty('submitting');\r\n                this.validate({format: false}).then(function () {\r\n                    ajax({\r\n                        url: self.get('ghostPaths.url').api('authentication', 'passwordreset'),\r\n                        type: 'PUT',\r\n                        data: {\r\n                            passwordreset: [credentials]\r\n                        }\r\n                    }).then(function (resp) {\r\n                        self.toggleProperty('submitting');\r\n                        self.notifications.showSuccess(resp.passwordreset[0].message, true);\r\n                        self.get('session').authenticate('simple-auth-authenticator:oauth2-password-grant', {\r\n                            identification: self.get('email'),\r\n                            password: credentials.newPassword\r\n                        });\r\n                    }).catch(function (response) {\r\n                        self.notifications.showAPIError(response);\r\n                        self.toggleProperty('submitting');\r\n                    });\r\n                }).catch(function (error) {\r\n                    self.toggleProperty('submitting');\r\n                    self.notifications.showErrors(error);\r\n                });\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = ResetController;\n  });",
    "define(\"ghost/controllers/settings\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var SettingsController = Ember.Controller.extend({\r\n        showApps: Ember.computed.bool('config.apps'),\r\n        showTags: Ember.computed.bool('config.tagsUI')\r\n    });\r\n    \r\n    __exports__[\"default\"] = SettingsController;\n  });",
    "define(\"ghost/controllers/settings/app\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /*global alert */\r\n    \r\n    var appStates,\r\n        SettingsAppController;\r\n    \r\n    appStates = {\r\n        active: 'active',\r\n        working: 'working',\r\n        inactive: 'inactive'\r\n    };\r\n    \r\n    SettingsAppController = Ember.ObjectController.extend({\r\n        appState: appStates.active,\r\n        buttonText: '',\r\n    \r\n        setAppState: function () {\r\n            this.set('appState', this.get('active') ? appStates.active : appStates.inactive);\r\n        }.on('init'),\r\n    \r\n        buttonTextSetter: function () {\r\n            switch (this.get('appState')) {\r\n                case appStates.active:\r\n                    this.set('buttonText', 'Deactivate');\r\n                    break;\r\n                case appStates.inactive:\r\n                    this.set('buttonText', 'Activate');\r\n                    break;\r\n                case appStates.working:\r\n                    this.set('buttonText', 'Working');\r\n                    break;\r\n            }\r\n        }.observes('appState').on('init'),\r\n    \r\n        activeClass: Ember.computed('appState', function () {\r\n            return this.appState === appStates.active ? true : false;\r\n        }),\r\n    \r\n        inactiveClass: Ember.computed('appState', function () {\r\n            return this.appState === appStates.inactive ? true : false;\r\n        }),\r\n    \r\n        actions: {\r\n            toggleApp: function (app) {\r\n                var self = this;\r\n    \r\n                this.set('appState', appStates.working);\r\n    \r\n                app.set('active', !app.get('active'));\r\n    \r\n                app.save().then(function () {\r\n                    self.setAppState();\r\n                })\r\n                .then(function () {\r\n                    alert('@TODO: Success');\r\n                })\r\n                .catch(function () {\r\n                    alert('@TODO: Failure');\r\n                });\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = SettingsAppController;\n  });",
    "define(\"ghost/controllers/settings/general\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var SettingsGeneralController = Ember.ObjectController.extend({\r\n        isDatedPermalinks: Ember.computed('permalinks', function (key, value) {\r\n            // setter\r\n            if (arguments.length > 1) {\r\n                this.set('permalinks', value ? '/:year/:month/:day/:slug/' : '/:slug/');\r\n            }\r\n    \r\n            // getter\r\n            var slugForm = this.get('permalinks');\r\n    \r\n            return slugForm !== '/:slug/';\r\n        }),\r\n    \r\n        themes: Ember.computed(function () {\r\n            return this.get('availableThemes').reduce(function (themes, t) {\r\n                var theme = {};\r\n    \r\n                theme.name = t.name;\r\n                theme.label = t.package ? t.package.name + ' - ' + t.package.version : t.name;\r\n                theme.package = t.package;\r\n                theme.active = !!t.active;\r\n    \r\n                themes.push(theme);\r\n    \r\n                return themes;\r\n            }, []);\r\n        }).readOnly(),\r\n    \r\n        actions: {\r\n            save: function () {\r\n                var self = this;\r\n    \r\n                return this.get('model').save().then(function (model) {\r\n                    self.notifications.showSuccess('Settings successfully saved.');\r\n    \r\n                    return model;\r\n                }).catch(function (errors) {\r\n                    self.notifications.showErrors(errors);\r\n                });\r\n            },\r\n    \r\n            checkPostsPerPage: function () {\r\n                if (this.get('postsPerPage') < 1 || this.get('postsPerPage') > 1000 || isNaN(this.get('postsPerPage'))) {\r\n                    this.set('postsPerPage', 5);\r\n                }\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = SettingsGeneralController;\n  });",
    "define(\"ghost/controllers/settings/users/index\", \n  [\"ghost/mixins/pagination-controller\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var PaginationControllerMixin = __dependency1__[\"default\"];\n\n    \r\n    var UsersIndexController = Ember.ArrayController.extend(PaginationControllerMixin, {\r\n        init: function () {\r\n            // let the PaginationControllerMixin know what type of model we will be paginating\r\n            // this is necessary because we do not have access to the model inside the Controller::init method\r\n            this._super({modelType: 'user'});\r\n        },\r\n    \r\n        users: Ember.computed.alias('model'),\r\n    \r\n        activeUsers: Ember.computed.filter('users', function (user) {\r\n            return /^active|warn-[1-4]|locked$/.test(user.get('status'));\r\n        }),\r\n    \r\n        invitedUsers: Ember.computed.filter('users', function (user) {\r\n            var status = user.get('status');\r\n    \r\n            return status === 'invited' || status === 'invited-pending';\r\n        })\r\n    });\r\n    \r\n    __exports__[\"default\"] = UsersIndexController;\n  });",
    "define(\"ghost/controllers/settings/users/user\", \n  [\"ghost/models/slug-generator\",\"ghost/utils/isNumber\",\"ghost/utils/bound-one-way\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var SlugGenerator = __dependency1__[\"default\"];\n\n    var isNumber = __dependency2__[\"default\"];\n\n    var boundOneWay = __dependency3__[\"default\"];\n\n    \r\n    var SettingsUserController = Ember.ObjectController.extend({\r\n    \r\n        user: Ember.computed.alias('model'),\r\n    \r\n        email: Ember.computed.readOnly('user.email'),\r\n    \r\n        slugValue: boundOneWay('user.slug'),\r\n    \r\n        lastPromise: null,\r\n    \r\n        coverDefault: Ember.computed('ghostPaths', function () {\r\n            return this.get('ghostPaths.url').asset('/shared/img/user-cover.png');\r\n        }),\r\n    \r\n        userDefault: Ember.computed('ghostPaths', function () {\r\n            return this.get('ghostPaths.url').asset('/shared/img/user-image.png');\r\n        }),\r\n    \r\n        cover: Ember.computed('user.cover', 'coverDefault', function () {\r\n            var cover = this.get('user.cover');\r\n    \r\n            if (Ember.isBlank(cover)) {\r\n                cover = this.get('coverDefault');\r\n            }\r\n    \r\n            return 'background-image: url(' + cover + ')';\r\n        }),\r\n    \r\n        coverTitle: Ember.computed('user.name', function () {\r\n            return this.get('user.name') + '\\'s Cover Image';\r\n        }),\r\n    \r\n        image: Ember.computed('imageUrl', function () {\r\n            return 'background-image: url(' + this.get('imageUrl') + ')';\r\n        }),\r\n    \r\n        imageUrl: Ember.computed('user.image', function () {\r\n            return this.get('user.image') || this.get('userDefault');\r\n        }),\r\n    \r\n        last_login: Ember.computed('user.last_login', function () {\r\n            var lastLogin = this.get('user.last_login');\r\n    \r\n            return lastLogin ? lastLogin.fromNow() : '(Never)';\r\n        }),\r\n    \r\n        created_at: Ember.computed('user.created_at', function () {\r\n            var createdAt = this.get('user.created_at');\r\n    \r\n            return createdAt ? createdAt.fromNow() : '';\r\n        }),\r\n    \r\n        // Lazy load the slug generator for slugPlaceholder\r\n        slugGenerator: Ember.computed(function () {\r\n            return SlugGenerator.create({\r\n                ghostPaths: this.get('ghostPaths'),\r\n                slugType: 'user'\r\n            });\r\n        }),\r\n    \r\n        actions: {\r\n            changeRole: function (newRole) {\r\n                this.set('model.role', newRole);\r\n            },\r\n    \r\n            revoke: function () {\r\n                var self = this,\r\n                    model = this.get('model'),\r\n                    email = this.get('email');\r\n    \r\n                // reload the model to get the most up-to-date user information\r\n                model.reload().then(function () {\r\n                    if (self.get('invited')) {\r\n                        model.destroyRecord().then(function () {\r\n                            var notificationText = 'Invitation revoked. (' + email + ')';\r\n                            self.notifications.showSuccess(notificationText, false);\r\n                        }).catch(function (error) {\r\n                            self.notifications.showAPIError(error);\r\n                        });\r\n                    } else {\r\n                        // if the user is no longer marked as \"invited\", then show a warning and reload the route\r\n                        self.get('target').send('reload');\r\n                        self.notifications.showError('This user has already accepted the invitation.', {delayed: 500});\r\n                    }\r\n                });\r\n            },\r\n    \r\n            resend: function () {\r\n                var self = this;\r\n    \r\n                this.get('model').resendInvite().then(function (result) {\r\n                    var notificationText = 'Invitation resent! (' + self.get('email') + ')';\r\n                    // If sending the invitation email fails, the API will still return a status of 201\r\n                    // but the user's status in the response object will be 'invited-pending'.\r\n                    if (result.users[0].status === 'invited-pending') {\r\n                        self.notifications.showWarn('Invitation email was not sent.  Please try resending.');\r\n                    } else {\r\n                        self.get('model').set('status', result.users[0].status);\r\n                        self.notifications.showSuccess(notificationText);\r\n                    }\r\n                }).catch(function (error) {\r\n                    self.notifications.showAPIError(error);\r\n                });\r\n            },\r\n    \r\n            save: function () {\r\n                var user = this.get('user'),\r\n                    slugValue = this.get('slugValue'),\r\n                    afterUpdateSlug = this.get('lastPromise'),\r\n                    promise,\r\n                    slugChanged,\r\n                    self = this;\r\n    \r\n                if (user.get('slug') !== slugValue) {\r\n                    slugChanged = true;\r\n                    user.set('slug', slugValue);\r\n                }\r\n    \r\n                promise = Ember.RSVP.resolve(afterUpdateSlug).then(function () {\r\n                    return user.save({format: false});\r\n                }).then(function (model) {\r\n                    var currentPath,\r\n                        newPath;\r\n    \r\n                    self.notifications.showSuccess('Settings successfully saved.');\r\n    \r\n                    // If the user's slug has changed, change the URL and replace\r\n                    // the history so refresh and back button still work\r\n                    if (slugChanged) {\r\n                        currentPath = window.history.state.path;\r\n    \r\n                        newPath = currentPath.split('/');\r\n                        newPath[newPath.length - 2] = model.get('slug');\r\n                        newPath = newPath.join('/');\r\n    \r\n                        window.history.replaceState({path: newPath}, '', newPath);\r\n                    }\r\n    \r\n                    return model;\r\n                }).catch(function (errors) {\r\n                    self.notifications.showErrors(errors);\r\n                });\r\n    \r\n                this.set('lastPromise', promise);\r\n            },\r\n    \r\n            password: function () {\r\n                var user = this.get('user'),\r\n                    self = this;\r\n    \r\n                if (user.get('isPasswordValid')) {\r\n                    user.saveNewPassword().then(function (model) {\r\n                        // Clear properties from view\r\n                        user.setProperties({\r\n                            password: '',\r\n                            newPassword: '',\r\n                            ne2Password: ''\r\n                        });\r\n    \r\n                        self.notifications.showSuccess('Password updated.');\r\n    \r\n                        return model;\r\n                    }).catch(function (errors) {\r\n                        self.notifications.showAPIError(errors);\r\n                    });\r\n                } else {\r\n                    self.notifications.showErrors(user.get('passwordValidationErrors'));\r\n                }\r\n            },\r\n    \r\n            updateSlug: function (newSlug) {\r\n                var self = this,\r\n                    afterSave = this.get('lastPromise'),\r\n                    promise;\r\n    \r\n                promise = Ember.RSVP.resolve(afterSave).then(function () {\r\n                    var slug = self.get('slug');\r\n    \r\n                    newSlug = newSlug || slug;\r\n    \r\n                    newSlug = newSlug.trim();\r\n    \r\n                    // Ignore unchanged slugs or candidate slugs that are empty\r\n                    if (!newSlug || slug === newSlug) {\r\n                        self.set('slugValue', slug);\r\n    \r\n                        return;\r\n                    }\r\n    \r\n                    return self.get('slugGenerator').generateSlug(newSlug).then(function (serverSlug) {\r\n                        // If after getting the sanitized and unique slug back from the API\r\n                        // we end up with a slug that matches the existing slug, abort the change\r\n                        if (serverSlug === slug) {\r\n                            return;\r\n                        }\r\n    \r\n                        // Because the server transforms the candidate slug by stripping\r\n                        // certain characters and appending a number onto the end of slugs\r\n                        // to enforce uniqueness, there are cases where we can get back a\r\n                        // candidate slug that is a duplicate of the original except for\r\n                        // the trailing incrementor (e.g., this-is-a-slug and this-is-a-slug-2)\r\n    \r\n                        // get the last token out of the slug candidate and see if it's a number\r\n                        var slugTokens = serverSlug.split('-'),\r\n                            check = Number(slugTokens.pop());\r\n    \r\n                        // if the candidate slug is the same as the existing slug except\r\n                        // for the incrementor then the existing slug should be used\r\n                        if (isNumber(check) && check > 0) {\r\n                            if (slug === slugTokens.join('-') && serverSlug !== newSlug) {\r\n                                self.set('slugValue', slug);\r\n    \r\n                                return;\r\n                            }\r\n                        }\r\n    \r\n                        self.set('slugValue', serverSlug);\r\n                    });\r\n                });\r\n    \r\n                this.set('lastPromise', promise);\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = SettingsUserController;\n  });",
    "define(\"ghost/controllers/setup\", \n  [\"ghost/utils/ajax\",\"ghost/mixins/validation-engine\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var ajax = __dependency1__[\"default\"];\n\n    var ValidationEngine = __dependency2__[\"default\"];\n\n    \r\n    var SetupController = Ember.ObjectController.extend(ValidationEngine, {\r\n        blogTitle: null,\r\n        name: null,\r\n        email: null,\r\n        password: null,\r\n        submitting: false,\r\n    \r\n        // ValidationEngine settings\r\n        validationType: 'setup',\r\n    \r\n        actions: {\r\n            setup: function () {\r\n                var self = this,\r\n                    data = self.getProperties('blogTitle', 'name', 'email', 'password');\r\n    \r\n                self.notifications.closePassive();\r\n    \r\n                this.toggleProperty('submitting');\r\n                this.validate({format: false}).then(function () {\r\n                    ajax({\r\n                        url: self.get('ghostPaths.url').api('authentication', 'setup'),\r\n                        type: 'POST',\r\n                        data: {\r\n                            setup: [{\r\n                                name: data.name,\r\n                                email: data.email,\r\n                                password: data.password,\r\n                                blogTitle: data.blogTitle\r\n                            }]\r\n                        }\r\n                    }).then(function () {\r\n                        self.get('session').authenticate('simple-auth-authenticator:oauth2-password-grant', {\r\n                            identification: self.get('email'),\r\n                            password: self.get('password')\r\n                        });\r\n                    }).catch(function (resp) {\r\n                        self.toggleProperty('submitting');\r\n                        self.notifications.showAPIError(resp);\r\n                    });\r\n                }).catch(function (errors) {\r\n                    self.toggleProperty('submitting');\r\n                    self.notifications.showErrors(errors);\r\n                });\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = SetupController;\n  });",
    "define(\"ghost/controllers/signin\", \n  [\"ghost/mixins/validation-engine\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ValidationEngine = __dependency1__[\"default\"];\n\n    \r\n    var SigninController = Ember.Controller.extend(SimpleAuth.AuthenticationControllerMixin, ValidationEngine, {\r\n        authenticator: 'simple-auth-authenticator:oauth2-password-grant',\r\n    \r\n        validationType: 'signin',\r\n    \r\n        actions: {\r\n            authenticate: function () {\r\n                var data = this.getProperties('identification', 'password');\r\n    \r\n                return this._super(data);\r\n            },\r\n    \r\n            validateAndAuthenticate: function () {\r\n                var self = this;\r\n    \r\n                this.validate({format: false}).then(function () {\r\n                    self.notifications.closePassive();\r\n                    self.send('authenticate');\r\n                }).catch(function (errors) {\r\n                    self.notifications.showErrors(errors);\r\n                });\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = SigninController;\n  });",
    "define(\"ghost/controllers/signup\", \n  [\"ghost/utils/ajax\",\"ghost/mixins/validation-engine\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var ajax = __dependency1__[\"default\"];\n\n    var ValidationEngine = __dependency2__[\"default\"];\n\n    \r\n    var SignupController = Ember.ObjectController.extend(ValidationEngine, {\r\n        submitting: false,\r\n    \r\n        // ValidationEngine settings\r\n        validationType: 'signup',\r\n    \r\n        actions: {\r\n            signup: function () {\r\n                var self = this,\r\n                    data = self.getProperties('name', 'email', 'password', 'token');\r\n    \r\n                self.notifications.closePassive();\r\n    \r\n                this.toggleProperty('submitting');\r\n                this.validate({format: false}).then(function () {\r\n                    ajax({\r\n                        url: self.get('ghostPaths.url').api('authentication', 'invitation'),\r\n                        type: 'POST',\r\n                        dataType: 'json',\r\n                        data: {\r\n                            invitation: [{\r\n                                name: data.name,\r\n                                email: data.email,\r\n                                password: data.password,\r\n                                token: data.token\r\n                            }]\r\n                        }\r\n                    }).then(function () {\r\n                        self.get('session').authenticate('simple-auth-authenticator:oauth2-password-grant', {\r\n                            identification: self.get('email'),\r\n                            password: self.get('password')\r\n                        });\r\n                    }, function (resp) {\r\n                        self.toggleProperty('submitting');\r\n                        self.notifications.showAPIError(resp);\r\n                    });\r\n                }, function (errors) {\r\n                    self.toggleProperty('submitting');\r\n                    self.notifications.showErrors(errors);\r\n                });\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = SignupController;\n  });",
    "define(\"ghost/docs/js/nav\", \n  [],\n  function() {\n    \"use strict\";\n    (function(){\r\n    \r\n        // TODO: unbind click events when nav is desktop sized\r\n    \r\n        // Element vars\r\n        var menu_button = document.querySelector(\".menu-button\"),\r\n            viewport = document.querySelector(\".viewport\"),\r\n            global_nav = document.querySelector(\".global-nav\"),\r\n            page_content = document.querySelector(\".viewport .page-content\");\r\n    \r\n        // mediaQuery listener\r\n        var mq_max_1025 = window.matchMedia(\"(max-width: 1025px)\");\r\n        mq_max_1025.addListener(show_hide_nav);\r\n        show_hide_nav(mq_max_1025);\r\n    \r\n        menu_button.addEventListener(\"click\", function(e) {\r\n            e.preventDefault();\r\n            if (menu_button.getAttribute('data-nav-open')) {\r\n                close_nav();\r\n            } else {\r\n                open_nav();\r\n            }\r\n        });\r\n    \r\n        page_content.addEventListener(\"click\", function(e) {\r\n            e.preventDefault();\r\n            console.log(\"click viewport\");\r\n            if (viewport.classList.contains(\"global-nav-expanded\")) {\r\n                console.log(\"close nav from viewport\");\r\n                close_nav();\r\n            }\r\n        });\r\n    \r\n        var open_nav = function(){\r\n            menu_button.setAttribute(\"data-nav-open\", \"true\");\r\n            viewport.classList.add(\"global-nav-expanded\");\r\n            global_nav.classList.add(\"global-nav-expanded\");\r\n        };\r\n    \r\n        var close_nav = function(){\r\n            menu_button.removeAttribute('data-nav-open');\r\n            viewport.classList.remove(\"global-nav-expanded\");\r\n            global_nav.classList.remove(\"global-nav-expanded\");\r\n        };\r\n    \r\n        function show_hide_nav(mq) {\r\n            if (mq.matches) {\r\n                // Window is 1025px or less\r\n            } else {\r\n                // Window is 1026px or more\r\n                viewport.classList.remove(\"global-nav-expanded\");\r\n                global_nav.classList.remove(\"global-nav-expanded\");\r\n            }\r\n        }\r\n    \r\n    })();\n  });",
    "define(\"ghost/helpers/gh-blog-url\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var blogUrl = Ember.Handlebars.makeBoundHelper(function () {\r\n        return new Ember.Handlebars.SafeString(this.get('config.blogUrl'));\r\n    });\r\n    \r\n    __exports__[\"default\"] = blogUrl;\n  });",
    "define(\"ghost/helpers/gh-count-characters\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var countCharacters = Ember.Handlebars.makeBoundHelper(function (content) {\r\n        var el = document.createElement('span'),\r\n            length = content ? content.length : 0;\r\n    \r\n        el.className = 'word-count';\r\n    \r\n        if (length > 180) {\r\n            el.style.color = '#E25440';\r\n        } else {\r\n            el.style.color = '#9E9D95';\r\n        }\r\n    \r\n        el.innerHTML = 200 - length;\r\n    \r\n        return new Ember.Handlebars.SafeString(el.outerHTML);\r\n    });\r\n    \r\n    __exports__[\"default\"] = countCharacters;\n  });",
    "define(\"ghost/helpers/gh-count-down-characters\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var countDownCharacters = Ember.Handlebars.makeBoundHelper(function (content, maxCharacters) {\r\n        var el = document.createElement('span'),\r\n            length = content ? content.length : 0;\r\n    \r\n        el.className = 'word-count';\r\n    \r\n        if (length > maxCharacters) {\r\n            el.style.color = '#E25440';\r\n        } else {\r\n            el.style.color = '#9FBB58';\r\n        }\r\n    \r\n        el.innerHTML = length;\r\n    \r\n        return new Ember.Handlebars.SafeString(el.outerHTML);\r\n    });\r\n    \r\n    __exports__[\"default\"] = countDownCharacters;\n  });",
    "define(\"ghost/helpers/gh-count-words\", \n  [\"ghost/utils/word-count\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var counter = __dependency1__[\"default\"];\n\n    \r\n    var countWords = Ember.Handlebars.makeBoundHelper(function (markdown) {\r\n        if (/^\\s*$/.test(markdown)) {\r\n            return '0 words';\r\n        }\r\n    \r\n        var count = counter(markdown || '');\r\n    \r\n        return count + (count === 1 ? ' word' : ' words');\r\n    });\r\n    \r\n    __exports__[\"default\"] = countWords;\n  });",
    "define(\"ghost/helpers/gh-format-html\", \n  [\"ghost/utils/caja-sanitizers\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    /* global Handlebars, html_sanitize*/\r\n    var cajaSanitizers = __dependency1__[\"default\"];\n\n    \r\n    var formatHTML = Ember.Handlebars.makeBoundHelper(function (html) {\r\n        var escapedhtml = html || '';\r\n    \r\n        // replace script and iFrame\r\n        // jscs:disable\r\n        escapedhtml = escapedhtml.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\r\n            '<pre class=\"js-embed-placeholder\">Embedded JavaScript</pre>');\r\n        escapedhtml = escapedhtml.replace(/<iframe\\b[^<]*(?:(?!<\\/iframe>)<[^<]*)*<\\/iframe>/gi,\r\n            '<pre class=\"iframe-embed-placeholder\">Embedded iFrame</pre>');\r\n        // jscs:enable\r\n    \r\n        // sanitize HTML\r\n        // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\r\n        escapedhtml = html_sanitize(escapedhtml, cajaSanitizers.url, cajaSanitizers.id);\r\n        // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\r\n    \r\n        return new Handlebars.SafeString(escapedhtml);\r\n    });\r\n    \r\n    __exports__[\"default\"] = formatHTML;\n  });",
    "define(\"ghost/helpers/gh-format-markdown\", \n  [\"ghost/utils/caja-sanitizers\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    /* global Showdown, Handlebars, html_sanitize*/\r\n    var cajaSanitizers = __dependency1__[\"default\"];\n\n    \r\n    var showdown,\r\n        formatMarkdown;\r\n    \r\n    showdown = new Showdown.converter({extensions: ['ghostimagepreview', 'ghostgfm']});\r\n    \r\n    formatMarkdown = Ember.Handlebars.makeBoundHelper(function (markdown) {\r\n        var escapedhtml = '';\r\n    \r\n        // convert markdown to HTML\r\n        escapedhtml = showdown.makeHtml(markdown || '');\r\n    \r\n        // replace script and iFrame\r\n        // jscs:disable\r\n        escapedhtml = escapedhtml.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\r\n            '<pre class=\"js-embed-placeholder\">Embedded JavaScript</pre>');\r\n        escapedhtml = escapedhtml.replace(/<iframe\\b[^<]*(?:(?!<\\/iframe>)<[^<]*)*<\\/iframe>/gi,\r\n            '<pre class=\"iframe-embed-placeholder\">Embedded iFrame</pre>');\r\n        // jscs:enable\r\n    \r\n        // sanitize html\r\n        // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\r\n        escapedhtml = html_sanitize(escapedhtml, cajaSanitizers.url, cajaSanitizers.id);\r\n        // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\r\n    \r\n        return new Handlebars.SafeString(escapedhtml);\r\n    });\r\n    \r\n    __exports__[\"default\"] = formatMarkdown;\n  });",
    "define(\"ghost/helpers/gh-format-timeago\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /* global moment */\r\n    var formatTimeago = Ember.Handlebars.makeBoundHelper(function (timeago) {\r\n        return moment(timeago).fromNow();\r\n        // stefanpenner says cool for small number of timeagos.\r\n        // For large numbers moment sucks => single Ember.Object based clock better\r\n        // https://github.com/manuelmitasch/ghost-admin-ember-demo/commit/fba3ab0a59238290c85d4fa0d7c6ed1be2a8a82e#commitcomment-5396524\r\n    });\r\n    \r\n    __exports__[\"default\"] = formatTimeago;\n  });",
    "define(\"ghost/helpers/ghost-paths\", \n  [\"ghost/utils/ghost-paths\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    // Handlebars Helper {{gh-path}}\r\n    // Usage: Assume 'http://www.myghostblog.org/myblog/'\r\n    // {{gh-path}} or {{gh-path ‘blog’}} for Ghost’s root (/myblog/)\r\n    // {{gh-path ‘admin’}} for Ghost’s admin root (/myblog/ghost/)\r\n    // {{gh-path ‘api’}} for Ghost’s api root (/myblog/ghost/api/v0.1/)\r\n    // {{gh-path 'admin' '/assets/hi.png'}} for resolved url (/myblog/ghost/assets/hi.png)\r\n    var ghostPaths = __dependency1__[\"default\"];\n\n    \r\n    function ghostPathsHelper(path, url) {\r\n        var base,\r\n            argsLength = arguments.length,\r\n            paths = ghostPaths();\r\n    \r\n        // function is always invoked with at least one parameter, so if\r\n        // arguments.length is 1 there were 0 arguments passed in explicitly\r\n        if (argsLength === 1) {\r\n            path = 'blog';\r\n        } else if (argsLength === 2 && !/^(blog|admin|api)$/.test(path)) {\r\n            url = path;\r\n            path = 'blog';\r\n        }\r\n    \r\n        switch (path.toString()) {\r\n            case 'blog':\r\n                base = paths.blogRoot;\r\n                break;\r\n            case 'admin':\r\n                base = paths.adminRoot;\r\n                break;\r\n            case 'api':\r\n                base = paths.apiRoot;\r\n                break;\r\n            default:\r\n                base = paths.blogRoot;\r\n                break;\r\n        }\r\n    \r\n        // handle leading and trailing slashes\r\n    \r\n        base = base[base.length - 1] !== '/' ? base + '/' : base;\r\n    \r\n        if (url && url.length > 0) {\r\n            if (url[0] === '/') {\r\n                url = url.substr(1);\r\n            }\r\n    \r\n            base = base + url;\r\n        }\r\n    \r\n        return new Ember.Handlebars.SafeString(base);\r\n    }\r\n    \r\n    __exports__[\"default\"] = ghostPathsHelper;\n  });",
    "define(\"ghost/initializers/authentication\", \n  [\"ghost/utils/ghost-paths\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ghostPaths = __dependency1__[\"default\"];\n\n    \r\n    var Ghost,\r\n        AuthenticationInitializer;\r\n    \r\n    Ghost = ghostPaths();\r\n    \r\n    AuthenticationInitializer = {\r\n        name: 'authentication',\r\n        before: 'simple-auth',\r\n        after: 'registerTrailingLocationHistory',\r\n    \r\n        initialize: function (container) {\r\n            window.ENV = window.ENV || {};\r\n    \r\n            window.ENV['simple-auth'] = {\r\n                authenticationRoute: 'signin',\r\n                routeAfterAuthentication: 'content',\r\n                authorizer: 'simple-auth-authorizer:oauth2-bearer'\r\n            };\r\n    \r\n            SimpleAuth.Session.reopen({\r\n                user: Ember.computed(function () {\r\n                    return container.lookup('store:main').find('user', 'me');\r\n                })\r\n            });\r\n    \r\n            SimpleAuth.Authenticators.OAuth2.reopen({\r\n                serverTokenEndpoint: Ghost.apiRoot + '/authentication/token',\r\n                serverTokenRevocationEndpoint: Ghost.apiRoot + '/authentication/revoke',\r\n                refreshAccessTokens: true,\r\n                makeRequest: function (url, data) {\r\n                    data.client_id = 'ghost-admin';\r\n                    return this._super(url, data);\r\n                }\r\n            });\r\n    \r\n            SimpleAuth.Stores.LocalStorage.reopen({\r\n                key: 'ghost' + (Ghost.subdir.indexOf('/') === 0 ? '-' + Ghost.subdir.substr(1) : '') + ':session'\r\n            });\r\n        }\r\n    };\r\n    \r\n    __exports__[\"default\"] = AuthenticationInitializer;\n  });",
    "define(\"ghost/initializers/dropdown\", \n  [\"ghost/utils/dropdown-service\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DropdownService = __dependency1__[\"default\"];\n\n    \r\n    var dropdownInitializer = {\r\n        name: 'dropdown',\r\n    \r\n        initialize: function (container, application) {\r\n            application.register('dropdown:service', DropdownService);\r\n    \r\n            // Inject dropdowns\r\n            application.inject('component:gh-dropdown', 'dropdown', 'dropdown:service');\r\n            application.inject('component:gh-dropdown-button', 'dropdown', 'dropdown:service');\r\n            application.inject('controller:modals.delete-post', 'dropdown', 'dropdown:service');\r\n            application.inject('controller:modals.transfer-owner', 'dropdown', 'dropdown:service');\r\n            application.inject('route:application', 'dropdown', 'dropdown:service');\r\n    \r\n            // Inject popovers\r\n            application.inject('component:gh-popover', 'dropdown', 'dropdown:service');\r\n            application.inject('component:gh-popover-button', 'dropdown', 'dropdown:service');\r\n            application.inject('route:application', 'dropdown', 'dropdown:service');\r\n        }\r\n    };\r\n    \r\n    __exports__[\"default\"] = dropdownInitializer;\n  });",
    "define(\"ghost/initializers/ghost-config\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var ConfigInitializer = {\r\n        name: 'config',\r\n    \r\n        initialize: function (container, application) {\r\n            var apps = $('body').data('apps'),\r\n                tagsUI = $('body').data('tagsui'),\r\n                fileStorage = $('body').data('filestorage'),\r\n                blogUrl = $('body').data('blogurl');\r\n    \r\n            application.register(\r\n                'ghost:config', {apps: apps, fileStorage: fileStorage, blogUrl: blogUrl, tagsUI: tagsUI}, {instantiate: false}\r\n            );\r\n    \r\n            application.inject('route', 'config', 'ghost:config');\r\n            application.inject('controller', 'config', 'ghost:config');\r\n            application.inject('component', 'config', 'ghost:config');\r\n        }\r\n    };\r\n    \r\n    __exports__[\"default\"] = ConfigInitializer;\n  });",
    "define(\"ghost/initializers/ghost-paths\", \n  [\"ghost/utils/ghost-paths\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ghostPaths = __dependency1__[\"default\"];\n\n    \r\n    var ghostPathsInitializer = {\r\n        name: 'ghost-paths',\r\n        after: 'store',\r\n    \r\n        initialize: function (container, application) {\r\n            application.register('ghost:paths', ghostPaths(), {instantiate: false});\r\n    \r\n            application.inject('route', 'ghostPaths', 'ghost:paths');\r\n            application.inject('model', 'ghostPaths', 'ghost:paths');\r\n            application.inject('controller', 'ghostPaths', 'ghost:paths');\r\n        }\r\n    };\r\n    \r\n    __exports__[\"default\"] = ghostPathsInitializer;\n  });",
    "define(\"ghost/initializers/notifications\", \n  [\"ghost/utils/notifications\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Notifications = __dependency1__[\"default\"];\n\n    \r\n    var injectNotificationsInitializer = {\r\n        name: 'injectNotifications',\r\n        before: 'authentication',\r\n    \r\n        initialize: function (container, application) {\r\n            application.register('notifications:main', Notifications);\r\n    \r\n            application.inject('controller', 'notifications', 'notifications:main');\r\n            application.inject('component', 'notifications', 'notifications:main');\r\n            application.inject('router', 'notifications', 'notifications:main');\r\n            application.inject('route', 'notifications', 'notifications:main');\r\n        }\r\n    };\r\n    \r\n    __exports__[\"default\"] = injectNotificationsInitializer;\n  });",
    "define(\"ghost/initializers/store-injector\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var StoreInjector = {\r\n        name: 'store-injector',\r\n        after: 'store',\r\n    \r\n        initialize: function (container, application) {\r\n            application.inject('component:gh-role-selector', 'store', 'store:main');\r\n        }\r\n    };\r\n    \r\n    __exports__[\"default\"] = StoreInjector;\n  });",
    "define(\"ghost/initializers/trailing-history\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /*global Ember */\r\n    \r\n    var trailingHistory,\r\n        registerTrailingLocationHistory;\r\n    \r\n    trailingHistory = Ember.HistoryLocation.extend({\r\n        formatURL: function () {\r\n            // jscs: disable\r\n            return this._super.apply(this, arguments).replace(/\\/?$/, '/');\r\n            // jscs: enable\r\n        }\r\n    });\r\n    \r\n    registerTrailingLocationHistory = {\r\n        name: 'registerTrailingLocationHistory',\r\n    \r\n        initialize: function (container, application) {\r\n            application.register('location:trailing-history', trailingHistory);\r\n        }\r\n    };\r\n    \r\n    __exports__[\"default\"] = registerTrailingLocationHistory;\n  });",
    "define(\"ghost/mixins/body-event-listener\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    \r\n    // Code modified from Addepar/ember-widgets\r\n    // https://github.com/Addepar/ember-widgets/blob/master/src/mixins.coffee#L39\r\n    \r\n    var BodyEventListener = Ember.Mixin.create({\r\n        bodyElementSelector: 'html',\r\n        bodyClick: Ember.K,\r\n    \r\n        init: function () {\r\n            this._super();\r\n    \r\n            return Ember.run.next(this, this._setupDocumentHandlers);\r\n        },\r\n    \r\n        willDestroy: function () {\r\n            this._super();\r\n    \r\n            return this._removeDocumentHandlers();\r\n        },\r\n    \r\n        _setupDocumentHandlers: function () {\r\n            if (this._clickHandler) {\r\n                return;\r\n            }\r\n    \r\n            var self = this;\r\n    \r\n            this._clickHandler = function () {\r\n                return self.bodyClick();\r\n            };\r\n    \r\n            return $(this.get('bodyElementSelector')).on('click', this._clickHandler);\r\n        },\r\n    \r\n        _removeDocumentHandlers: function () {\r\n            $(this.get('bodyElementSelector')).off('click', this._clickHandler);\r\n            this._clickHandler = null;\r\n        },\r\n    \r\n        // http://stackoverflow.com/questions/152975/how-to-detect-a-click-outside-an-element\r\n        click: function (event) {\r\n            return event.stopPropagation();\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = BodyEventListener;\n  });",
    "define(\"ghost/mixins/current-user-settings\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var CurrentUserSettings = Ember.Mixin.create({\r\n        currentUser: function () {\r\n            return this.store.find('user', 'me');\r\n        },\r\n    \r\n        transitionAuthor: function () {\r\n            var self = this;\r\n    \r\n            return function (user) {\r\n                if (user.get('isAuthor')) {\r\n                    return self.transitionTo('settings.users.user', user);\r\n                }\r\n    \r\n                return user;\r\n            };\r\n        },\r\n    \r\n        transitionEditor: function () {\r\n            var self = this;\r\n    \r\n            return function (user) {\r\n                if (user.get('isEditor')) {\r\n                    return self.transitionTo('settings.users');\r\n                }\r\n    \r\n                return user;\r\n            };\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = CurrentUserSettings;\n  });",
    "define(\"ghost/mixins/dropdown-mixin\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /*\r\n      Dropdowns and their buttons are evented and do not propagate clicks.\r\n    */\r\n    var DropdownMixin = Ember.Mixin.create(Ember.Evented, {\r\n        classNameBindings: ['isOpen:open:closed'],\r\n        isOpen: false,\r\n    \r\n        click: function (event) {\r\n            this._super(event);\r\n    \r\n            return event.stopPropagation();\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = DropdownMixin;\n  });",
    "define(\"ghost/mixins/editor-base-controller\", \n  [\"ghost/mixins/marker-manager\",\"ghost/models/post\",\"ghost/utils/bound-one-way\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    /* global console */\r\n    var MarkerManager = __dependency1__[\"default\"];\n\n    var PostModel = __dependency2__[\"default\"];\n\n    var boundOneWay = __dependency3__[\"default\"];\n\n    \r\n    var watchedProps,\r\n        EditorControllerMixin;\r\n    \r\n    // this array will hold properties we need to watch\r\n    // to know if the model has been changed (`controller.isDirty`)\r\n    watchedProps = ['scratch', 'titleScratch', 'model.isDirty', 'tags.[]'];\r\n    \r\n    PostModel.eachAttribute(function (name) {\r\n        watchedProps.push('model.' + name);\r\n    });\r\n    \r\n    EditorControllerMixin = Ember.Mixin.create(MarkerManager, {\r\n        needs: ['post-tags-input', 'post-settings-menu'],\r\n    \r\n        init: function () {\r\n            var self = this;\r\n    \r\n            this._super();\r\n    \r\n            window.onbeforeunload = function () {\r\n                return self.get('isDirty') ? self.unloadDirtyMessage() : null;\r\n            };\r\n        },\r\n    \r\n        /**\r\n         * By default, a post will not change its publish state.\r\n         * Only with a user-set value (via setSaveType action)\r\n         * can the post's status change.\r\n         */\r\n        willPublish: boundOneWay('isPublished'),\r\n    \r\n        // Make sure editor starts with markdown shown\r\n        isPreview: false,\r\n    \r\n        // set by the editor route and `isDirty`. useful when checking\r\n        // whether the number of tags has changed for `isDirty`.\r\n        previousTagNames: null,\r\n    \r\n        tagNames: Ember.computed('tags.@each.name', function () {\r\n            return this.get('tags').mapBy('name');\r\n        }),\r\n    \r\n        // compares previousTagNames to tagNames\r\n        tagNamesEqual: function () {\r\n            var tagNames = this.get('tagNames'),\r\n                previousTagNames = this.get('previousTagNames'),\r\n                hashCurrent,\r\n                hashPrevious;\r\n    \r\n            // beware! even if they have the same length,\r\n            // that doesn't mean they're the same.\r\n            if (tagNames.length !== previousTagNames.length) {\r\n                return false;\r\n            }\r\n    \r\n            // instead of comparing with slow, nested for loops,\r\n            // perform join on each array and compare the strings\r\n            hashCurrent = tagNames.join('');\r\n            hashPrevious = previousTagNames.join('');\r\n    \r\n            return hashCurrent === hashPrevious;\r\n        },\r\n    \r\n        // a hook created in editor-base-route's setupController\r\n        modelSaved: function () {\r\n            var model = this.get('model');\r\n    \r\n            // safer to updateTags on save in one place\r\n            // rather than in all other places save is called\r\n            model.updateTags();\r\n    \r\n            // set previousTagNames to current tagNames for isDirty check\r\n            this.set('previousTagNames', this.get('tagNames'));\r\n    \r\n            // `updateTags` triggers `isDirty => true`.\r\n            // for a saved model it would otherwise be false.\r\n    \r\n            // if the two \"scratch\" properties (title and content) match the model, then\r\n            // it's ok to set isDirty to false\r\n            if (this.get('titleScratch') === model.get('title') &&\r\n                this.get('scratch') === model.get('markdown')) {\r\n                this.set('isDirty', false);\r\n            }\r\n        },\r\n    \r\n        // an ugly hack, but necessary to watch all the model's properties\r\n        // and more, without having to be explicit and do it manually\r\n        isDirty: Ember.computed.apply(Ember, watchedProps.concat(function (key, value) {\r\n            if (arguments.length > 1) {\r\n                return value;\r\n            }\r\n    \r\n            var model = this.get('model'),\r\n                markdown = this.get('markdown'),\r\n                title = this.get('title'),\r\n                titleScratch = this.get('titleScratch'),\r\n                scratch = this.getMarkdown().withoutMarkers,\r\n                changedAttributes;\r\n    \r\n            if (!this.tagNamesEqual()) {\r\n                return true;\r\n            }\r\n    \r\n            if (titleScratch !== title) {\r\n                return true;\r\n            }\r\n    \r\n            // since `scratch` is not model property, we need to check\r\n            // it explicitly against the model's markdown attribute\r\n            if (markdown !== scratch) {\r\n                return true;\r\n            }\r\n    \r\n            // models created on the client always return `isDirty: true`,\r\n            // so we need to see which properties have actually changed.\r\n            if (model.get('isNew')) {\r\n                changedAttributes = Ember.keys(model.changedAttributes());\r\n    \r\n                if (changedAttributes.length) {\r\n                    return true;\r\n                }\r\n    \r\n                return false;\r\n            }\r\n    \r\n            // even though we use the `scratch` prop to show edits,\r\n            // which does *not* change the model's `isDirty` property,\r\n            // `isDirty` will tell us if the other props have changed,\r\n            // as long as the model is not new (model.isNew === false).\r\n            return model.get('isDirty');\r\n        })),\r\n    \r\n        // used on window.onbeforeunload\r\n        unloadDirtyMessage: function () {\r\n            return '==============================\\n\\n' +\r\n                'Hey there! It looks like you\\'re in the middle of writing' +\r\n                ' something and you haven\\'t saved all of your content.' +\r\n                '\\n\\nSave before you go!\\n\\n' +\r\n                '==============================';\r\n        },\r\n    \r\n        // TODO: This has to be moved to the I18n localization file.\r\n        // This structure is supposed to be close to the i18n-localization which will be used soon.\r\n        messageMap: {\r\n            errors: {\r\n                post: {\r\n                    published: {\r\n                        published: 'Update failed.',\r\n                        draft: 'Saving failed.'\r\n                    },\r\n                    draft: {\r\n                        published: 'Publish failed.',\r\n                        draft: 'Saving failed.'\r\n                    }\r\n    \r\n                }\r\n            },\r\n    \r\n            success: {\r\n                post: {\r\n                    published: {\r\n                        published: 'Updated.',\r\n                        draft: 'Saved.'\r\n                    },\r\n                    draft: {\r\n                        published: 'Published!',\r\n                        draft: 'Saved.'\r\n                    }\r\n                }\r\n            }\r\n        },\r\n    \r\n        showSaveNotification: function (prevStatus, status, delay) {\r\n            var message = this.messageMap.success.post[prevStatus][status];\r\n    \r\n            this.notifications.showSuccess(message, {delayed: delay});\r\n        },\r\n    \r\n        showErrorNotification: function (prevStatus, status, errors, delay) {\r\n            var message = this.messageMap.errors.post[prevStatus][status];\r\n    \r\n            message += '<br />' + errors[0].message;\r\n    \r\n            this.notifications.showError(message, {delayed: delay});\r\n        },\r\n    \r\n        shouldFocusTitle: Ember.computed.alias('model.isNew'),\r\n        shouldFocusEditor: Ember.computed.not('model.isNew'),\r\n    \r\n        actions: {\r\n            save: function (options) {\r\n                var status = this.get('willPublish') ? 'published' : 'draft',\r\n                    prevStatus = this.get('status'),\r\n                    isNew = this.get('isNew'),\r\n                    autoSaveId = this.get('autoSaveId'),\r\n                    timedSaveId = this.get('timedSaveId'),\r\n                    self = this,\r\n                    psmController = this.get('controllers.post-settings-menu'),\r\n                    promise;\r\n    \r\n                options = options || {};\r\n    \r\n                if (autoSaveId) {\r\n                    Ember.run.cancel(autoSaveId);\r\n                    this.set('autoSaveId', null);\r\n                }\r\n    \r\n                if (timedSaveId) {\r\n                    Ember.run.cancel(timedSaveId);\r\n                    this.set('timedSaveId', null);\r\n                }\r\n    \r\n                self.notifications.closePassive();\r\n    \r\n                // ensure an incomplete tag is finalised before save\r\n                this.get('controllers.post-tags-input').send('addNewTag');\r\n    \r\n                // Set the properties that are indirected\r\n                // set markdown equal to what's in the editor, minus the image markers.\r\n                this.set('markdown', this.getMarkdown().withoutMarkers);\r\n                this.set('status', status);\r\n    \r\n                // Set a default title\r\n                if (!this.get('titleScratch')) {\r\n                    this.set('titleScratch', '(Untitled)');\r\n                }\r\n    \r\n                this.set('title', this.get('titleScratch'));\r\n                this.set('meta_title', psmController.get('metaTitleScratch'));\r\n                this.set('meta_description', psmController.get('metaDescriptionScratch'));\r\n    \r\n                if (!this.get('slug')) {\r\n                    // Cancel any pending slug generation that may still be queued in the\r\n                    // run loop because we need to run it before the post is saved.\r\n                    Ember.run.cancel(psmController.get('debounceId'));\r\n    \r\n                    psmController.generateAndSetSlug('slug');\r\n                }\r\n    \r\n                promise = Ember.RSVP.resolve(psmController.get('lastPromise')).then(function () {\r\n                    return self.get('model').save(options).then(function (model) {\r\n                        if (!options.silent) {\r\n                            self.showSaveNotification(prevStatus, model.get('status'), isNew ? true : false);\r\n                        }\r\n    \r\n                        return model;\r\n                    });\r\n                }).catch(function (errors) {\r\n                    if (!options.silent) {\r\n                        self.showErrorNotification(prevStatus, self.get('status'), errors);\r\n                    }\r\n    \r\n                    self.set('status', prevStatus);\r\n    \r\n                    return Ember.RSVP.reject(errors);\r\n                });\r\n    \r\n                psmController.set('lastPromise', promise);\r\n    \r\n                return promise;\r\n            },\r\n    \r\n            setSaveType: function (newType) {\r\n                if (newType === 'publish') {\r\n                    this.set('willPublish', true);\r\n                } else if (newType === 'draft') {\r\n                    this.set('willPublish', false);\r\n                } else {\r\n                    console.warn('Received invalid save type; ignoring.');\r\n                }\r\n            },\r\n    \r\n            // set from a `sendAction` on the codemirror component,\r\n            // so that we get a reference for handling uploads.\r\n            setCodeMirror: function (codemirrorComponent) {\r\n                var codemirror = codemirrorComponent.get('codemirror');\r\n    \r\n                this.set('codemirrorComponent', codemirrorComponent);\r\n                this.set('codemirror', codemirror);\r\n            },\r\n    \r\n            // fired from the gh-markdown component when an image upload starts\r\n            disableCodeMirror: function () {\r\n                this.get('codemirrorComponent').disableCodeMirror();\r\n            },\r\n    \r\n            // fired from the gh-markdown component when an image upload finishes\r\n            enableCodeMirror: function () {\r\n                this.get('codemirrorComponent').enableCodeMirror();\r\n            },\r\n    \r\n            // Match the uploaded file to a line in the editor, and update that line with a path reference\r\n            // ensuring that everything ends up in the correct place and format.\r\n            handleImgUpload: function (e, resultSrc) {\r\n                var editor = this.get('codemirror'),\r\n                    line = this.findLine(Ember.$(e.currentTarget).attr('id')),\r\n                    lineNumber = editor.getLineNumber(line),\r\n                    // jscs:disable\r\n                    match = line.text.match(/\\([^\\n]*\\)?/),\r\n                    // jscs:enable\r\n                    replacement = '(http://)';\r\n    \r\n                if (match) {\r\n                    // simple case, we have the parenthesis\r\n                    editor.setSelection(\r\n                        {line: lineNumber, ch: match.index + 1},\r\n                        {line: lineNumber, ch: match.index + match[0].length - 1}\r\n                    );\r\n                } else {\r\n                    // jscs:disable\r\n                    match = line.text.match(/\\]/);\r\n                    // jscs:enable\r\n                    if (match) {\r\n                        editor.replaceRange(\r\n                            replacement,\r\n                            {line: lineNumber, ch: match.index + 1},\r\n                            {line: lineNumber, ch: match.index + 1}\r\n                        );\r\n                        editor.setSelection(\r\n                            {line: lineNumber, ch: match.index + 2},\r\n                            {line: lineNumber, ch: match.index + replacement.length}\r\n                        );\r\n                    }\r\n                }\r\n    \r\n                editor.replaceSelection(resultSrc);\r\n            },\r\n    \r\n            togglePreview: function (preview) {\r\n                this.set('isPreview', preview);\r\n            },\r\n    \r\n            autoSave: function () {\r\n                if (this.get('model.isDraft')) {\r\n                    var autoSaveId,\r\n                        timedSaveId;\r\n    \r\n                    timedSaveId = Ember.run.throttle(this, 'send', 'save', {silent: true, disableNProgress: true}, 60000, false);\r\n                    this.set('timedSaveId', timedSaveId);\r\n    \r\n                    autoSaveId = Ember.run.debounce(this, 'send', 'save', {silent: true, disableNProgress: true}, 3000);\r\n                    this.set('autoSaveId', autoSaveId);\r\n                }\r\n            },\r\n    \r\n            autoSaveNew: function () {\r\n                if (this.get('isNew')) {\r\n                    this.send('save', {silent: true, disableNProgress: true});\r\n                }\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = EditorControllerMixin;\n  });",
    "define(\"ghost/mixins/editor-base-route\", \n  [\"ghost/mixins/shortcuts-route\",\"ghost/mixins/style-body\",\"ghost/mixins/loading-indicator\",\"ghost/utils/editor-shortcuts\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var ShortcutsRoute = __dependency1__[\"default\"];\n\n    var styleBody = __dependency2__[\"default\"];\n\n    var loadingIndicator = __dependency3__[\"default\"];\n\n    var editorShortcuts = __dependency4__[\"default\"];\n\n    \r\n    var EditorBaseRoute = Ember.Mixin.create(styleBody, ShortcutsRoute, loadingIndicator, {\r\n        classNames: ['editor'],\r\n    \r\n        actions: {\r\n            save: function () {\r\n                this.get('controller').send('save');\r\n            },\r\n    \r\n            publish: function () {\r\n                var controller = this.get('controller');\r\n    \r\n                controller.send('setSaveType', 'publish');\r\n                controller.send('save');\r\n            },\r\n    \r\n            toggleZenMode: function () {\r\n                Ember.$('body').toggleClass('zen');\r\n            },\r\n    \r\n            // The actual functionality is implemented in utils/codemirror-shortcuts\r\n            codeMirrorShortcut: function (options) {\r\n                // Only fire editor shortcuts when the editor has focus.\r\n                if (Ember.$('.CodeMirror.CodeMirror-focused').length > 0) {\r\n                    this.get('controller.codemirror').shortcut(options.type);\r\n                }\r\n            },\r\n    \r\n            willTransition: function (transition) {\r\n                var controller = this.get('controller'),\r\n                    scratch = controller.get('scratch'),\r\n                    controllerIsDirty = controller.get('isDirty'),\r\n                    model = controller.get('model'),\r\n                    state = model.getProperties('isDeleted', 'isSaving', 'isDirty', 'isNew'),\r\n                    fromNewToEdit,\r\n                    deletedWithoutChanges;\r\n    \r\n                fromNewToEdit = this.get('routeName') === 'editor.new' &&\r\n                    transition.targetName === 'editor.edit' &&\r\n                    transition.intent.contexts &&\r\n                    transition.intent.contexts[0] &&\r\n                    transition.intent.contexts[0].id === model.get('id');\r\n    \r\n                deletedWithoutChanges = state.isDeleted &&\r\n                    (state.isSaving || !state.isDirty);\r\n    \r\n                this.send('closeSettingsMenu');\r\n    \r\n                if (!fromNewToEdit && !deletedWithoutChanges && controllerIsDirty) {\r\n                    transition.abort();\r\n                    this.send('openModal', 'leave-editor', [controller, transition]);\r\n                    return;\r\n                }\r\n    \r\n                // The controller may hold model state that will be lost in the transition,\r\n                // so we need to apply it now.\r\n                if (fromNewToEdit && controllerIsDirty) {\r\n                    if (scratch !== model.get('markdown')) {\r\n                        model.set('markdown', scratch);\r\n                    }\r\n                }\r\n    \r\n                if (state.isNew) {\r\n                    model.deleteRecord();\r\n                }\r\n    \r\n                // since the transition is now certain to complete..\r\n                window.onbeforeunload = null;\r\n    \r\n                // remove model-related listeners created in editor-base-route\r\n                this.detachModelHooks(controller, model);\r\n            }\r\n        },\r\n    \r\n        renderTemplate: function (controller, model) {\r\n            this._super(controller, model);\r\n    \r\n            this.render('post-settings-menu', {\r\n                into: 'application',\r\n                outlet: 'settings-menu',\r\n                model: model\r\n            });\r\n        },\r\n    \r\n        shortcuts: editorShortcuts,\r\n    \r\n        attachModelHooks: function (controller, model) {\r\n            // this will allow us to track when the model is saved and update the controller\r\n            // so that we can be sure controller.isDirty is correct, without having to update the\r\n            // controller on each instance of `model.save()`.\r\n            //\r\n            // another reason we can't do this on `model.save().then()` is because the post-settings-menu\r\n            // also saves the model, and passing messages is difficult because we have two\r\n            // types of editor controllers, and the PSM also exists on the posts.post route.\r\n            //\r\n            // The reason we can't just keep this functionality in the editor controller is\r\n            // because we need to remove these handlers on `willTransition` in the editor route.\r\n            model.on('didCreate', controller, controller.get('modelSaved'));\r\n            model.on('didUpdate', controller, controller.get('modelSaved'));\r\n        },\r\n    \r\n        detachModelHooks: function (controller, model) {\r\n            model.off('didCreate', controller, controller.get('modelSaved'));\r\n            model.off('didUpdate', controller, controller.get('modelSaved'));\r\n        },\r\n    \r\n        setupController: function (controller, model) {\r\n            this._super(controller, model);\r\n            var tags = model.get('tags');\r\n    \r\n            controller.set('scratch', model.get('markdown'));\r\n    \r\n            controller.set('titleScratch', model.get('title'));\r\n    \r\n            if (tags) {\r\n                // used to check if anything has changed in the editor\r\n                controller.set('previousTagNames', tags.mapBy('name'));\r\n            } else {\r\n                controller.set('previousTagNames', []);\r\n            }\r\n    \r\n            // attach model-related listeners created in editor-base-route\r\n            this.attachModelHooks(controller, model);\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = EditorBaseRoute;\n  });",
    "define(\"ghost/mixins/editor-base-view\", \n  [\"ghost/utils/set-scroll-classname\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var setScrollClassName = __dependency1__[\"default\"];\n\n    \r\n    var EditorViewMixin = Ember.Mixin.create({\r\n        // create a hook for jQuery logic that will run after\r\n        // a view and all child views have been rendered,\r\n        // since didInsertElement runs only when the view's el\r\n        // has rendered, and not necessarily all child views.\r\n        //\r\n        // http://mavilein.github.io/javascript/2013/08/01/Ember-JS-After-Render-Event/\r\n        // http://emberjs.com/api/classes/Ember.run.html#method_next\r\n        scheduleAfterRender: function () {\r\n            Ember.run.scheduleOnce('afterRender', this, this.afterRenderEvent);\r\n        }.on('didInsertElement'),\r\n    \r\n        // all child views will have rendered when this fires\r\n        afterRenderEvent: function () {\r\n            var $previewViewPort = this.$('.js-entry-preview-content');\r\n    \r\n            // cache these elements for use in other methods\r\n            this.set('$previewViewPort', $previewViewPort);\r\n            this.set('$previewContent', this.$('.js-rendered-markdown'));\r\n    \r\n            $previewViewPort.scroll(Ember.run.bind($previewViewPort, setScrollClassName, {\r\n                target: this.$('.js-entry-preview'),\r\n                offset: 10\r\n            }));\r\n        },\r\n    \r\n        removeScrollHandlers: function () {\r\n            this.get('$previewViewPort').off('scroll');\r\n        }.on('willDestroyElement'),\r\n    \r\n        // updated when gh-codemirror component scrolls\r\n        markdownScrollInfo: null,\r\n    \r\n        // percentage of scroll position to set htmlPreview\r\n        scrollPosition: Ember.computed('markdownScrollInfo', function () {\r\n            if (!this.get('markdownScrollInfo')) {\r\n                return 0;\r\n            }\r\n    \r\n            var scrollInfo = this.get('markdownScrollInfo'),\r\n                markdownHeight,\r\n                previewHeight,\r\n                ratio;\r\n    \r\n            markdownHeight = scrollInfo.height - scrollInfo.clientHeight;\r\n            previewHeight = this.get('$previewContent').height() - this.get('$previewViewPort').height();\r\n    \r\n            ratio = previewHeight / markdownHeight;\r\n    \r\n            return scrollInfo.top * ratio;\r\n        })\r\n    });\r\n    \r\n    __exports__[\"default\"] = EditorViewMixin;\n  });",
    "define(\"ghost/mixins/loading-indicator\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    // mixin used for routes to display a loading indicator when there is network activity\r\n    var loaderOptions,\r\n        loadingIndicator;\r\n    \r\n    loaderOptions = {\r\n        showSpinner: false\r\n    };\r\n    \r\n    NProgress.configure(loaderOptions);\r\n    \r\n    loadingIndicator = Ember.Mixin.create({\r\n        actions:  {\r\n    \r\n            loading: function () {\r\n                NProgress.start();\r\n                this.router.one('didTransition', function () {\r\n                    NProgress.done();\r\n                });\r\n    \r\n                return true;\r\n            },\r\n    \r\n            error: function () {\r\n                NProgress.done();\r\n    \r\n                return true;\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = loadingIndicator;\n  });",
    "define(\"ghost/mixins/marker-manager\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var MarkerManager = Ember.Mixin.create({\r\n        // jscs:disable\r\n        imageMarkdownRegex: /^(?:\\{<(.*?)>\\})?!(?:\\[([^\\n\\]]*)\\])(?:\\(([^\\n\\]]*)\\))?$/gim,\r\n        markerRegex: /\\{<([\\w\\W]*?)>\\}/,\r\n        // jscs:enable\r\n    \r\n        uploadId: 1,\r\n    \r\n        // create an object that will be shared amongst instances.\r\n        // makes it easier to use helper functions in different modules\r\n        markers: {},\r\n    \r\n        // Add markers to the line if it needs one\r\n        initMarkers: function (line) {\r\n            var imageMarkdownRegex = this.get('imageMarkdownRegex'),\r\n                markerRegex = this.get('markerRegex'),\r\n                editor = this.get('codemirror'),\r\n                isImage = line.text.match(imageMarkdownRegex),\r\n                hasMarker = line.text.match(markerRegex);\r\n    \r\n            if (isImage && !hasMarker) {\r\n                this.addMarker(line, editor.getLineNumber(line));\r\n            }\r\n        },\r\n    \r\n        // Get the markdown with all the markers stripped\r\n        getMarkdown: function (value) {\r\n            var marker, id,\r\n                editor = this.get('codemirror'),\r\n                markers = this.get('markers'),\r\n                markerRegexForId = this.get('markerRegexForId'),\r\n                oldValue = value || editor.getValue(),\r\n                newValue = oldValue;\r\n    \r\n            for (id in markers) {\r\n                if (markers.hasOwnProperty(id)) {\r\n                    marker = markers[id];\r\n                    newValue = newValue.replace(markerRegexForId(id), '');\r\n                }\r\n            }\r\n    \r\n            return {\r\n                withMarkers: oldValue,\r\n                withoutMarkers: newValue\r\n            };\r\n        },\r\n    \r\n        // check the given line to see if it has an image, and if it correctly has a marker\r\n        // in the special case of lines which were just pasted in, any markers are removed to prevent duplication\r\n        checkLine: function (ln, mode) {\r\n            var editor = this.get('codemirror'),\r\n                line = editor.getLineHandle(ln),\r\n                imageMarkdownRegex = this.get('imageMarkdownRegex'),\r\n                markerRegex = this.get('markerRegex'),\r\n                isImage = line.text.match(imageMarkdownRegex),\r\n                hasMarker;\r\n    \r\n            // We care if it is an image\r\n            if (isImage) {\r\n                hasMarker = line.text.match(markerRegex);\r\n    \r\n                if (hasMarker && (mode === 'paste' || mode === 'undo')) {\r\n                    // this could be a duplicate, and won't be a real marker\r\n                    this.stripMarkerFromLine(line);\r\n                }\r\n    \r\n                if (!hasMarker) {\r\n                    this.addMarker(line, ln);\r\n                }\r\n            }\r\n            // TODO: hasMarker but no image?\r\n        },\r\n    \r\n        // Add a marker to the given line\r\n        // Params:\r\n        // line - CodeMirror LineHandle\r\n        // ln - line number\r\n        addMarker: function (line, ln) {\r\n            var marker,\r\n                markers = this.get('markers'),\r\n                editor = this.get('codemirror'),\r\n                uploadPrefix = 'image_upload',\r\n                uploadId = this.get('uploadId'),\r\n                magicId = '{<' + uploadId + '>}',\r\n                newText = magicId + line.text;\r\n    \r\n            editor.replaceRange(\r\n                newText,\r\n                {line: ln, ch: 0},\r\n                {line: ln, ch: newText.length}\r\n            );\r\n    \r\n            marker = editor.markText(\r\n                {line: ln, ch: 0},\r\n                {line: ln, ch: (magicId.length)},\r\n                {collapsed: true}\r\n            );\r\n    \r\n            markers[uploadPrefix + '_' + uploadId] = marker;\r\n            this.set('uploadId', uploadId += 1);\r\n        },\r\n    \r\n        // Check each marker to see if it is still present in the editor and if it still corresponds to image markdown\r\n        // If it is no longer a valid image, remove it\r\n        checkMarkers: function () {\r\n            var id, marker, line,\r\n                editor = this.get('codemirror'),\r\n                markers = this.get('markers'),\r\n                imageMarkdownRegex = this.get('imageMarkdownRegex');\r\n    \r\n            for (id in markers) {\r\n                if (markers.hasOwnProperty(id)) {\r\n                    marker = markers[id];\r\n    \r\n                    if (marker.find()) {\r\n                        line = editor.getLineHandle(marker.find().from.line);\r\n                        if (!line.text.match(imageMarkdownRegex)) {\r\n                            this.removeMarker(id, marker, line);\r\n                        }\r\n                    } else {\r\n                        this.removeMarker(id, marker);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n    \r\n        // this is needed for when we transition out of the editor.\r\n        // since the markers object is persistent and shared between classes that\r\n        // mix in this mixin, we need to make sure markers don't carry over between edits.\r\n        clearMarkers: function () {\r\n            var markers = this.get('markers'),\r\n                id,\r\n                marker;\r\n    \r\n            // can't just `this.set('markers', {})`,\r\n            // since it wouldn't apply to this mixin,\r\n            // but only to the class that mixed this mixin in\r\n            for (id in markers) {\r\n                if (markers.hasOwnProperty(id)) {\r\n                    marker = markers[id];\r\n                    delete markers[id];\r\n                    marker.clear();\r\n                }\r\n            }\r\n        },\r\n    \r\n        // Remove a marker\r\n        // Will be passed a LineHandle if we already know which line the marker is on\r\n        removeMarker: function (id, marker, line) {\r\n            var markers = this.get('markers');\r\n    \r\n            delete markers[id];\r\n            marker.clear();\r\n    \r\n            if (line) {\r\n                this.stripMarkerFromLine(line);\r\n            } else {\r\n                this.findAndStripMarker(id);\r\n            }\r\n        },\r\n    \r\n        // Removes the marker on the given line if there is one\r\n        stripMarkerFromLine: function (line) {\r\n            var editor = this.get('codemirror'),\r\n                ln = editor.getLineNumber(line),\r\n    \r\n                // jscs:disable\r\n                markerRegex = /\\{<([\\w\\W]*?)>\\}/,\r\n                // jscs:enable\r\n    \r\n                markerText = line.text.match(markerRegex);\r\n    \r\n            if (markerText) {\r\n                editor.replaceRange(\r\n                    '',\r\n                    {line: ln, ch: markerText.index},\r\n                    {line: ln, ch: markerText.index + markerText[0].length}\r\n                );\r\n            }\r\n        },\r\n    \r\n        // the regex\r\n        markerRegexForId: function (id) {\r\n            id = id.replace('image_upload_', '');\r\n            return new RegExp('\\\\{<' + id + '>\\\\}', 'gmi');\r\n        },\r\n    \r\n        // Find a marker in the editor by id & remove it\r\n        // Goes line by line to find the marker by it's text if we've lost track of the TextMarker\r\n        findAndStripMarker: function (id) {\r\n            var self = this,\r\n                editor = this.get('codemirror');\r\n    \r\n            editor.eachLine(function (line) {\r\n                var markerText = self.markerRegexForId(id).exec(line.text),\r\n                    ln;\r\n    \r\n                if (markerText) {\r\n                    ln = editor.getLineNumber(line);\r\n                    editor.replaceRange(\r\n                        '',\r\n                        {line: ln, ch: markerText.index},\r\n                        {line: ln, ch: markerText.index + markerText[0].length}\r\n                    );\r\n                }\r\n            });\r\n        },\r\n    \r\n        // Find the line with the marker which matches\r\n        findLine: function (resultId) {\r\n            var editor = this.get('codemirror'),\r\n                markers = this.get('markers');\r\n    \r\n            // try to find the right line to replace\r\n            if (markers.hasOwnProperty(resultId) && markers[resultId].find()) {\r\n                return editor.getLineHandle(markers[resultId].find().from.line);\r\n            }\r\n    \r\n            return false;\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = MarkerManager;\n  });",
    "define(\"ghost/mixins/nprogress-save\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var NProgressSaveMixin = Ember.Mixin.create({\r\n        save: function (options) {\r\n            if (options && options.disableNProgress) {\r\n                return this._super(options);\r\n            }\r\n    \r\n            NProgress.start();\r\n    \r\n            return this._super(options).then(function (value) {\r\n                NProgress.done();\r\n    \r\n                return value;\r\n            }).catch(function (error) {\r\n                NProgress.done();\r\n    \r\n                return Ember.RSVP.reject(error);\r\n            });\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = NProgressSaveMixin;\n  });",
    "define(\"ghost/mixins/pagination-controller\", \n  [\"ghost/utils/ajax\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var getRequestErrorMessage = __dependency1__.getRequestErrorMessage;\n\n    \r\n    var PaginationControllerMixin = Ember.Mixin.create({\r\n        // set from PaginationRouteMixin\r\n        paginationSettings: null,\r\n    \r\n        // holds the next page to load during infinite scroll\r\n        nextPage: null,\r\n    \r\n        // indicates whether we're currently loading the next page\r\n        isLoading: null,\r\n    \r\n        /**\r\n         *\r\n         * @param {object} options: {\r\n         *                      modelType: <String> name of the model that will be paginated\r\n         *                  }\r\n         */\r\n        init: function (options) {\r\n            this._super();\r\n    \r\n            var metadata = this.store.metadataFor(options.modelType);\r\n    \r\n            this.set('nextPage', metadata.pagination.next);\r\n        },\r\n    \r\n        /**\r\n         * Takes an ajax response, concatenates any error messages, then generates an error notification.\r\n         * @param {jqXHR} response The jQuery ajax reponse object.\r\n         * @return\r\n         */\r\n        reportLoadError: function (response) {\r\n            var message = 'A problem was encountered while loading more records';\r\n    \r\n            if (response) {\r\n                // Get message from response\r\n                message += ': ' + getRequestErrorMessage(response, true);\r\n            } else {\r\n                message += '.';\r\n            }\r\n    \r\n            this.notifications.showError(message);\r\n        },\r\n    \r\n        actions: {\r\n            /**\r\n             * Loads the next paginated page of posts into the ember-data store. Will cause the posts list UI to update.\r\n             * @return\r\n             */\r\n            loadNextPage: function () {\r\n                var self = this,\r\n                    store = this.get('store'),\r\n                    recordType = this.get('model').get('type'),\r\n                    nextPage = this.get('nextPage'),\r\n                    paginationSettings = this.get('paginationSettings');\r\n    \r\n                if (nextPage) {\r\n                    this.set('isLoading', true);\r\n                    this.set('paginationSettings.page', nextPage);\r\n    \r\n                    store.find(recordType, paginationSettings).then(function () {\r\n                        var metadata = store.metadataFor(recordType);\r\n    \r\n                        self.set('nextPage', metadata.pagination.next);\r\n                        self.set('isLoading', false);\r\n                    }, function (response) {\r\n                        self.reportLoadError(response);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = PaginationControllerMixin;\n  });",
    "define(\"ghost/mixins/pagination-route\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var defaultPaginationSettings,\r\n        PaginationRoute;\r\n    \r\n    defaultPaginationSettings = {\r\n        page: 1,\r\n        limit: 15\r\n    };\r\n    \r\n    PaginationRoute = Ember.Mixin.create({\r\n        /**\r\n         * Sets up pagination details\r\n         * @param {object} settings specifies additional pagination details\r\n         */\r\n        setupPagination: function (settings) {\r\n            settings = settings || {};\r\n            for (var key in defaultPaginationSettings) {\r\n                if (defaultPaginationSettings.hasOwnProperty(key)) {\r\n                    if (!settings.hasOwnProperty(key)) {\r\n                        settings[key] = defaultPaginationSettings[key];\r\n                    }\r\n                }\r\n            }\r\n    \r\n            this.set('paginationSettings', settings);\r\n            this.controller.set('paginationSettings', settings);\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = PaginationRoute;\n  });",
    "define(\"ghost/mixins/pagination-view-infinite-scroll\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var PaginationViewInfiniteScrollMixin = Ember.Mixin.create({\r\n    \r\n        /**\r\n         * Determines if we are past a scroll point where we need to fetch the next page\r\n         * @param {object} event The scroll event\r\n         */\r\n        checkScroll: function (event) {\r\n            var element = event.target,\r\n                triggerPoint = 100,\r\n                controller = this.get('controller'),\r\n                isLoading = controller.get('isLoading');\r\n    \r\n            // If we haven't passed our threshold or we are already fetching content, exit\r\n            if (isLoading || (element.scrollTop + element.clientHeight + triggerPoint <= element.scrollHeight)) {\r\n                return;\r\n            }\r\n    \r\n            controller.send('loadNextPage');\r\n        },\r\n    \r\n        /**\r\n         * Bind to the scroll event once the element is in the DOM\r\n         */\r\n        attachCheckScroll: function () {\r\n            var el = this.$();\r\n    \r\n            el.on('scroll', Ember.run.bind(this, this.checkScroll));\r\n        }.on('didInsertElement'),\r\n    \r\n        /**\r\n         * Unbind from the scroll event when the element is no longer in the DOM\r\n         */\r\n        detachCheckScroll: function () {\r\n            var el = this.$();\r\n            el.off('scroll');\r\n        }.on('willDestroyElement')\r\n    });\r\n    \r\n    __exports__[\"default\"] = PaginationViewInfiniteScrollMixin;\n  });",
    "define(\"ghost/mixins/selective-save\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    // SelectiveSaveMixin adds a saveOnly method to a DS.Model.\r\n    //\r\n    // saveOnly provides a way to save one or more properties of a model while\r\n    // preserving outstanding changes to other properties.\r\n    var SelectiveSaveMixin = Ember.Mixin.create({\r\n        saveOnly: function () {\r\n            if (arguments.length === 0) {\r\n                return Ember.RSVP.resolve();\r\n            }\r\n    \r\n            if (arguments.length === 1 && Ember.isArray(arguments[0])) {\r\n                return this.saveOnly.apply(this, Array.prototype.slice.call(arguments[0]));\r\n            }\r\n    \r\n            var propertiesToSave = Array.prototype.slice.call(arguments),\r\n                changed,\r\n                hasMany = {},\r\n                belongsTo = {},\r\n                self = this;\r\n    \r\n            changed = this.changedAttributes();\r\n    \r\n            // disable observers so we can make changes to the model but not have\r\n            // them reflected by the UI\r\n            this.beginPropertyChanges();\r\n    \r\n            // make a copy of any relations the model may have so they can\r\n            // be reapplied later\r\n            this.eachRelationship(function (name, meta) {\r\n                if (meta.kind === 'hasMany') {\r\n                    hasMany[name] = self.get(name).slice();\r\n                    return;\r\n                }\r\n    \r\n                if (meta.kind === 'belongsTo') {\r\n                    belongsTo[name] = self.get(name);\r\n                    return;\r\n                }\r\n            });\r\n    \r\n            try {\r\n                // roll back all changes to the model and then reapply only those that\r\n                // are part of the saveOnly\r\n    \r\n                self.rollback();\r\n    \r\n                propertiesToSave.forEach(function (name) {\r\n                    if (hasMany.hasOwnProperty(name)) {\r\n                        self.get(name).clear();\r\n    \r\n                        hasMany[name].forEach(function (relatedType) {\r\n                            self.get(name).pushObject(relatedType);\r\n                        });\r\n    \r\n                        return;\r\n                    }\r\n    \r\n                    if (belongsTo.hasOwnProperty(name)) {\r\n                        return self.updateBelongsTo(name, belongsTo[name]);\r\n                    }\r\n    \r\n                    if (changed.hasOwnProperty(name)) {\r\n                        return self.set(name, changed[name][1]);\r\n                    }\r\n                });\r\n            }\r\n            catch (err) {\r\n                // if we were not able to get the model into the correct state\r\n                // put it back the way we found it and return a rejected promise\r\n    \r\n                Ember.keys(changed).forEach(function (name) {\r\n                    self.set(name, changed[name][1]);\r\n                });\r\n    \r\n                Ember.keys(hasMany).forEach(function (name) {\r\n                    self.updateHasMany(name, hasMany[name]);\r\n                });\r\n    \r\n                Ember.keys(belongsTo).forEach(function (name) {\r\n                    self.updateBelongsTo(name, belongsTo[name]);\r\n                });\r\n    \r\n                self.endPropertyChanges();\r\n    \r\n                return Ember.RSVP.reject(new Error(err.message || 'Error during saveOnly. Changes NOT saved.'));\r\n            }\r\n    \r\n            return this.save().finally(function () {\r\n                // reapply any changes that were not part of the save\r\n    \r\n                Ember.keys(changed).forEach(function (name) {\r\n                    if (propertiesToSave.hasOwnProperty(name)) {\r\n                        return;\r\n                    }\r\n    \r\n                    self.set(name, changed[name][1]);\r\n                });\r\n    \r\n                Ember.keys(hasMany).forEach(function (name) {\r\n                    if (propertiesToSave.hasOwnProperty(name)) {\r\n                        return;\r\n                    }\r\n    \r\n                    self.updateHasMany(name, hasMany[name]);\r\n                });\r\n    \r\n                Ember.keys(belongsTo).forEach(function (name) {\r\n                    if (propertiesToSave.hasOwnProperty(name)) {\r\n                        return;\r\n                    }\r\n    \r\n                    self.updateBelongsTo(name, belongsTo[name]);\r\n                });\r\n    \r\n                // signal that we're finished and normal model observation may continue\r\n                self.endPropertyChanges();\r\n            });\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = SelectiveSaveMixin;\n  });",
    "define(\"ghost/mixins/shortcuts-route\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /* global key */\r\n    \r\n    // Configure KeyMaster to respond to all shortcuts,\r\n    // even inside of\r\n    // input, textarea, and select.\r\n    key.filter = function () {\r\n        return true;\r\n    };\r\n    \r\n    key.setScope('default');\r\n    /**\r\n     * Only routes can implement shortcuts.\r\n     * If you need to trigger actions on the controller,\r\n     * simply call them with `this.get('controller').send('action')`.\r\n     *\r\n     * To implement shortcuts, add this mixin to your `extend()`,\r\n     * and implement a `shortcuts` hash.\r\n     * In this hash, keys are shortcut combinations and values are route action names.\r\n     *  (see [keymaster docs](https://github.com/madrobby/keymaster/blob/master/README.markdown)),\r\n     *\r\n     * ```javascript\r\n     * shortcuts: {\r\n     *     'ctrl+s, command+s': 'save',\r\n     *     'ctrl+alt+z': 'toggleZenMode'\r\n     * }\r\n     * ```\r\n     * For more complex actions, shortcuts can instead have their value\r\n     * be an object like {action, options}\r\n     * ```javascript\r\n     * shortcuts: {\r\n     *      'ctrl+k': {action: 'markdownShortcut', options: 'createLink'}\r\n     * }\r\n     * ```\r\n     * You can set the scope of your shortcut by passing a scope property.\r\n     * ```javascript\r\n     * shortcuts : {\r\n     *   'enter': {action : 'confirmModal', scope: 'modal'}\r\n     * }\r\n     * ```\r\n     * If you don't specify a scope, we use a default scope called \"default\".\r\n     * To have all your shortcut work in all scopes, give it the scope \"all\".\r\n     * Find out more at the keymaster docs\r\n     */\r\n    var ShortcutsRoute = Ember.Mixin.create({\r\n        registerShortcuts: function () {\r\n            var self = this,\r\n                shortcuts = this.get('shortcuts');\r\n    \r\n            Ember.keys(shortcuts).forEach(function (shortcut) {\r\n                var scope = shortcuts[shortcut].scope || 'default',\r\n                    action = shortcuts[shortcut],\r\n                    options;\r\n    \r\n                if (Ember.typeOf(action) !== 'string') {\r\n                    options = action.options;\r\n                    action = action.action;\r\n                }\r\n    \r\n                key(shortcut, scope, function (event) {\r\n                    // stop things like ctrl+s from actually opening a save dialogue\r\n                    event.preventDefault();\r\n                    self.send(action, options);\r\n                });\r\n            });\r\n        },\r\n    \r\n        removeShortcuts: function () {\r\n            var shortcuts = this.get('shortcuts');\r\n    \r\n            Ember.keys(shortcuts).forEach(function (shortcut) {\r\n                key.unbind(shortcut);\r\n            });\r\n        },\r\n    \r\n        activate: function () {\r\n            this._super();\r\n    \r\n            if (!this.shortcuts) {\r\n                return;\r\n            }\r\n    \r\n            this.registerShortcuts();\r\n        },\r\n    \r\n        deactivate: function () {\r\n            this._super();\r\n            this.removeShortcuts();\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = ShortcutsRoute;\n  });",
    "define(\"ghost/mixins/style-body\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    // mixin used for routes that need to set a css className on the body tag\r\n    \r\n    var styleBody = Ember.Mixin.create({\r\n        activate: function () {\r\n            this._super();\r\n    \r\n            var cssClasses = this.get('classNames');\r\n    \r\n            if (cssClasses) {\r\n                Ember.run.schedule('afterRender', null, function () {\r\n                    cssClasses.forEach(function (curClass) {\r\n                        Ember.$('body').addClass(curClass);\r\n                    });\r\n                });\r\n            }\r\n        },\r\n    \r\n        deactivate: function () {\r\n            this._super();\r\n    \r\n            var cssClasses = this.get('classNames');\r\n    \r\n            Ember.run.schedule('afterRender', null, function () {\r\n                cssClasses.forEach(function (curClass) {\r\n                    Ember.$('body').removeClass(curClass);\r\n                });\r\n            });\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = styleBody;\n  });",
    "define(\"ghost/mixins/text-input\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var BlurField = Ember.Mixin.create({\r\n        selectOnClick: false,\r\n        stopEnterKeyDownPropagation: false,\r\n    \r\n        click: function (event) {\r\n            if (this.get('selectOnClick')) {\r\n                event.currentTarget.select();\r\n            }\r\n        },\r\n    \r\n        keyDown: function (event) {\r\n            // stop event propagation when pressing \"enter\"\r\n            // most useful in the case when undesired (global) keyboard shortcuts are getting triggered while interacting\r\n            // with this particular input element.\r\n            if (this.get('stopEnterKeyDownPropagation') && event.keyCode === 13) {\r\n                event.stopPropagation();\r\n    \r\n                return true;\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = BlurField;\n  });",
    "define(\"ghost/mixins/validation-engine\", \n  [\"ghost/utils/ajax\",\"ghost/utils/validator-extensions\",\"ghost/validators/post\",\"ghost/validators/setup\",\"ghost/validators/signup\",\"ghost/validators/signin\",\"ghost/validators/forgotten\",\"ghost/validators/setting\",\"ghost/validators/reset\",\"ghost/validators/user\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __dependency10__, __exports__) {\n    \"use strict\";\n    var getRequestErrorMessage = __dependency1__.getRequestErrorMessage;\n\n    \r\n    var ValidatorExtensions = __dependency2__[\"default\"];\n\n    var PostValidator = __dependency3__[\"default\"];\n\n    var SetupValidator = __dependency4__[\"default\"];\n\n    var SignupValidator = __dependency5__[\"default\"];\n\n    var SigninValidator = __dependency6__[\"default\"];\n\n    var ForgotValidator = __dependency7__[\"default\"];\n\n    var SettingValidator = __dependency8__[\"default\"];\n\n    var ResetValidator = __dependency9__[\"default\"];\n\n    var UserValidator = __dependency10__[\"default\"];\n\n    \r\n    // our extensions to the validator library\r\n    ValidatorExtensions.init();\r\n    \r\n    // format errors to be used in `notifications.showErrors`.\r\n    // result is [{message: 'concatenated error messages'}]\r\n    function formatErrors(errors, opts) {\r\n        var message = 'There was an error';\r\n    \r\n        opts = opts || {};\r\n    \r\n        if (opts.wasSave && opts.validationType) {\r\n            message += ' saving this ' + opts.validationType;\r\n        }\r\n    \r\n        if (Ember.isArray(errors)) {\r\n            // get the validator's error messages from the array.\r\n            // normalize array members to map to strings.\r\n            message = errors.map(function (error) {\r\n                if (typeof error === 'string') {\r\n                    return error;\r\n                }\r\n    \r\n                return error.message;\r\n            }).join('<br />');\r\n        } else if (errors instanceof Error) {\r\n            message += errors.message || '.';\r\n        } else if (typeof errors === 'object') {\r\n            // Get messages from server response\r\n            message += ': ' + getRequestErrorMessage(errors, true);\r\n        } else if (typeof errors === 'string') {\r\n            message += ': ' + errors;\r\n        } else {\r\n            message += '.';\r\n        }\r\n    \r\n        // set format for notifications.showErrors\r\n        message = [{message: message}];\r\n    \r\n        return message;\r\n    }\r\n    \r\n    /**\r\n    * The class that gets this mixin will receive these properties and functions.\r\n    * It will be able to validate any properties on itself (or the model it passes to validate())\r\n    * with the use of a declared validator.\r\n    */\r\n    var ValidationEngine = Ember.Mixin.create({\r\n        // these validators can be passed a model to validate when the class that\r\n        // mixes in the ValidationEngine declares a validationType equal to a key on this object.\r\n        // the model is either passed in via `this.validate({ model: object })`\r\n        // or by calling `this.validate()` without the model property.\r\n        // in that case the model will be the class that the ValidationEngine\r\n        // was mixed into, i.e. the controller or Ember Data model.\r\n        validators: {\r\n            post: PostValidator,\r\n            setup: SetupValidator,\r\n            signup: SignupValidator,\r\n            signin: SigninValidator,\r\n            forgotten: ForgotValidator,\r\n            setting: SettingValidator,\r\n            reset: ResetValidator,\r\n            user: UserValidator\r\n        },\r\n    \r\n        /**\r\n        * Passses the model to the validator specified by validationType.\r\n        * Returns a promise that will resolve if validation succeeds, and reject if not.\r\n        * Some options can be specified:\r\n        *\r\n        * `format: false` - doesn't use formatErrors to concatenate errors for notifications.showErrors.\r\n        *                   will return whatever the specified validator returns.\r\n        *                   since notifications are a common usecase, `format` is true by default.\r\n        *\r\n        * `model: Object` - you can specify the model to be validated, rather than pass the default value of `this`,\r\n        *                   the class that mixes in this mixin.\r\n        */\r\n        validate: function (opts) {\r\n            var model = opts.model || this,\r\n                type = this.get('validationType'),\r\n                validator = this.get('validators.' + type);\r\n    \r\n            opts = opts || {};\r\n            opts.validationType = type;\r\n    \r\n            return new Ember.RSVP.Promise(function (resolve, reject) {\r\n                var validationErrors;\r\n    \r\n                if (!type || !validator) {\r\n                    validationErrors = ['The validator specified, \"' + type + '\", did not exist!'];\r\n                } else {\r\n                    validationErrors = validator.check(model);\r\n                }\r\n    \r\n                if (Ember.isEmpty(validationErrors)) {\r\n                    return resolve();\r\n                }\r\n    \r\n                if (opts.format !== false) {\r\n                    validationErrors = formatErrors(validationErrors, opts);\r\n                }\r\n    \r\n                return reject(validationErrors);\r\n            });\r\n        },\r\n    \r\n        /**\r\n        * The primary goal of this method is to override the `save` method on Ember Data models.\r\n        * This allows us to run validation before actually trying to save the model to the server.\r\n        * You can supply options to be passed into the `validate` method, since the ED `save` method takes no options.\r\n        */\r\n        save: function (options) {\r\n            var self = this,\r\n                // this is a hack, but needed for async _super calls.\r\n                // ref: https://github.com/emberjs/ember.js/pull/4301\r\n                _super = this.__nextSuper;\r\n    \r\n            options = options || {};\r\n            options.wasSave = true;\r\n    \r\n            // model.destroyRecord() calls model.save() behind the scenes.\r\n            // in that case, we don't need validation checks or error propagation,\r\n            // because the model itself is being destroyed.\r\n            if (this.get('isDeleted')) {\r\n                return this._super();\r\n            }\r\n    \r\n            // If validation fails, reject with validation errors.\r\n            // If save to the server fails, reject with server response.\r\n            return this.validate(options).then(function () {\r\n                return _super.call(self, options);\r\n            }).catch(function (result) {\r\n                // server save failed - validate() would have given back an array\r\n                if (!Ember.isArray(result)) {\r\n                    if (options.format !== false) {\r\n                        // concatenate all errors into an array with a single object: [{message: 'concatted message'}]\r\n                        result = formatErrors(result, options);\r\n                    } else {\r\n                        // return the array of errors from the server\r\n                        result = getRequestErrorMessage(result);\r\n                    }\r\n                }\r\n    \r\n                return Ember.RSVP.reject(result);\r\n            });\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = ValidationEngine;\n  });",
    "define(\"ghost/models/notification\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var Notification = DS.Model.extend({\r\n        dismissible: DS.attr('boolean'),\r\n        location: DS.attr('string'),\r\n        status: DS.attr('string'),\r\n        type: DS.attr('string'),\r\n        message: DS.attr('string')\r\n    });\r\n    \r\n    __exports__[\"default\"] = Notification;\n  });",
    "define(\"ghost/models/post\", \n  [\"ghost/mixins/validation-engine\",\"ghost/mixins/nprogress-save\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var ValidationEngine = __dependency1__[\"default\"];\n\n    var NProgressSaveMixin = __dependency2__[\"default\"];\n\n    \r\n    var Post = DS.Model.extend(NProgressSaveMixin, ValidationEngine, {\r\n        validationType: 'post',\r\n    \r\n        uuid: DS.attr('string'),\r\n        title: DS.attr('string', {defaultValue: ''}),\r\n        slug: DS.attr('string'),\r\n        markdown: DS.attr('string', {defaultValue: ''}),\r\n        html: DS.attr('string'),\r\n        image: DS.attr('string'),\r\n        featured: DS.attr('boolean', {defaultValue: false}),\r\n        page: DS.attr('boolean', {defaultValue: false}),\r\n        status: DS.attr('string', {defaultValue: 'draft'}),\r\n        language: DS.attr('string', {defaultValue: 'en_US'}),\r\n        meta_title: DS.attr('string'),\r\n        meta_description: DS.attr('string'),\r\n        author: DS.belongsTo('user',  {async: true}),\r\n        author_id: DS.attr('number'),\r\n        updated_at: DS.attr('moment-date'),\r\n        published_at: DS.attr('moment-date'),\r\n        published_by: DS.belongsTo('user', {async: true}),\r\n        tags: DS.hasMany('tag', {embedded: 'always'}),\r\n    \r\n        // Computed post properties\r\n    \r\n        isPublished: Ember.computed.equal('status', 'published'),\r\n        isDraft: Ember.computed.equal('status', 'draft'),\r\n    \r\n        // remove client-generated tags, which have `id: null`.\r\n        // Ember Data won't recognize/update them automatically\r\n        // when returned from the server with ids.\r\n        updateTags: function () {\r\n            var tags = this.get('tags'),\r\n                oldTags = tags.filterBy('id', null);\r\n    \r\n            tags.removeObjects(oldTags);\r\n            oldTags.invoke('deleteRecord');\r\n        },\r\n    \r\n        isAuthoredByUser: function (user) {\r\n            return parseInt(user.get('id'), 10) === parseInt(this.get('author_id'), 10);\r\n        }\r\n    \r\n    });\r\n    \r\n    __exports__[\"default\"] = Post;\n  });",
    "define(\"ghost/models/role\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var Role = DS.Model.extend({\r\n        uuid: DS.attr('string'),\r\n        name: DS.attr('string'),\r\n        description: DS.attr('string'),\r\n        created_at: DS.attr('moment-date'),\r\n        updated_at: DS.attr('moment-date'),\r\n    \r\n        lowerCaseName: Ember.computed('name', function () {\r\n            return this.get('name').toLocaleLowerCase();\r\n        })\r\n    });\r\n    \r\n    __exports__[\"default\"] = Role;\n  });",
    "define(\"ghost/models/setting\", \n  [\"ghost/mixins/validation-engine\",\"ghost/mixins/nprogress-save\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var ValidationEngine = __dependency1__[\"default\"];\n\n    var NProgressSaveMixin = __dependency2__[\"default\"];\n\n    \r\n    var Setting = DS.Model.extend(NProgressSaveMixin, ValidationEngine, {\r\n        validationType: 'setting',\r\n    \r\n        title: DS.attr('string'),\r\n        description: DS.attr('string'),\r\n        email: DS.attr('string'),\r\n        logo: DS.attr('string'),\r\n        cover: DS.attr('string'),\r\n        defaultLang: DS.attr('string'),\r\n        postsPerPage: DS.attr('number'),\r\n        forceI18n: DS.attr('boolean'),\r\n        permalinks: DS.attr('string'),\r\n        activeTheme: DS.attr('string'),\r\n        availableThemes: DS.attr()\r\n    });\r\n    \r\n    __exports__[\"default\"] = Setting;\n  });",
    "define(\"ghost/models/slug-generator\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var SlugGenerator = Ember.Object.extend({\r\n        ghostPaths: null,\r\n        slugType: null,\r\n        value: null,\r\n        toString: function () {\r\n            return this.get('value');\r\n        },\r\n        generateSlug: function (textToSlugify) {\r\n            var self = this,\r\n                url;\r\n    \r\n            if (!textToSlugify) {\r\n                return Ember.RSVP.resolve('');\r\n            }\r\n    \r\n            url = this.get('ghostPaths.url').api('slugs', this.get('slugType'), encodeURIComponent(textToSlugify));\r\n    \r\n            return ic.ajax.request(url, {\r\n                type: 'GET'\r\n            }).then(function (response) {\r\n                var slug = response.slugs[0].slug;\r\n                self.set('value', slug);\r\n                return slug;\r\n            });\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = SlugGenerator;\n  });",
    "define(\"ghost/models/tag\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var Tag = DS.Model.extend({\r\n        uuid: DS.attr('string'),\r\n        name: DS.attr('string'),\r\n        slug: DS.attr('string'),\r\n        description: DS.attr('string'),\r\n        parent_id: DS.attr('number'),\r\n        meta_title: DS.attr('string'),\r\n        meta_description: DS.attr('string')\r\n    });\r\n    \r\n    __exports__[\"default\"] = Tag;\n  });",
    "define(\"ghost/models/user\", \n  [\"ghost/mixins/validation-engine\",\"ghost/mixins/nprogress-save\",\"ghost/mixins/selective-save\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var ValidationEngine = __dependency1__[\"default\"];\n\n    var NProgressSaveMixin = __dependency2__[\"default\"];\n\n    var SelectiveSaveMixin = __dependency3__[\"default\"];\n\n    \r\n    var User = DS.Model.extend(NProgressSaveMixin, SelectiveSaveMixin, ValidationEngine, {\r\n        validationType: 'user',\r\n    \r\n        uuid: DS.attr('string'),\r\n        name: DS.attr('string'),\r\n        slug: DS.attr('string'),\r\n        email: DS.attr('string'),\r\n        image: DS.attr('string'),\r\n        cover: DS.attr('string'),\r\n        bio: DS.attr('string'),\r\n        website: DS.attr('string'),\r\n        location: DS.attr('string'),\r\n        accessibility: DS.attr('string'),\r\n        status: DS.attr('string'),\r\n        language: DS.attr('string', {defaultValue: 'en_US'}),\r\n        meta_title: DS.attr('string'),\r\n        meta_description: DS.attr('string'),\r\n        last_login: DS.attr('moment-date'),\r\n        created_at: DS.attr('moment-date'),\r\n        created_by: DS.attr('number'),\r\n        updated_at: DS.attr('moment-date'),\r\n        updated_by: DS.attr('number'),\r\n        roles: DS.hasMany('role', {embedded: 'always'}),\r\n    \r\n        role: Ember.computed('roles', function (name, value) {\r\n            if (arguments.length > 1) {\r\n                // Only one role per user, so remove any old data.\r\n                this.get('roles').clear();\r\n                this.get('roles').pushObject(value);\r\n    \r\n                return value;\r\n            }\r\n    \r\n            return this.get('roles.firstObject');\r\n        }),\r\n    \r\n        // TODO: Once client-side permissions are in place,\r\n        // remove the hard role check.\r\n        isAuthor: Ember.computed.equal('role.name', 'Author'),\r\n        isEditor: Ember.computed.equal('role.name', 'Editor'),\r\n        isAdmin: Ember.computed.equal('role.name', 'Administrator'),\r\n        isOwner: Ember.computed.equal('role.name', 'Owner'),\r\n    \r\n        saveNewPassword: function () {\r\n            var url = this.get('ghostPaths.url').api('users', 'password');\r\n    \r\n            return ic.ajax.request(url, {\r\n                type: 'PUT',\r\n                data: {\r\n                    password: [{\r\n                        oldPassword: this.get('password'),\r\n                        newPassword: this.get('newPassword'),\r\n                        ne2Password: this.get('ne2Password')\r\n                    }]\r\n                }\r\n            });\r\n        },\r\n    \r\n        resendInvite: function () {\r\n            var fullUserData = this.toJSON(),\r\n                userData = {\r\n                    email: fullUserData.email,\r\n                    roles: fullUserData.roles\r\n                };\r\n    \r\n            return ic.ajax.request(this.get('ghostPaths.url').api('users'), {\r\n                type: 'POST',\r\n                data: JSON.stringify({users: [userData]}),\r\n                contentType: 'application/json'\r\n            });\r\n        },\r\n    \r\n        passwordValidationErrors: Ember.computed('password', 'newPassword', 'ne2Password', function () {\r\n            var validationErrors = [];\r\n    \r\n            if (!validator.equals(this.get('newPassword'), this.get('ne2Password'))) {\r\n                validationErrors.push({message: 'Your new passwords do not match'});\r\n            }\r\n    \r\n            if (!validator.isLength(this.get('newPassword'), 8)) {\r\n                validationErrors.push({message: 'Your password is not long enough. It must be at least 8 characters long.'});\r\n            }\r\n    \r\n            return validationErrors;\r\n        }),\r\n    \r\n        isPasswordValid: Ember.computed.empty('passwordValidationErrors.[]'),\r\n    \r\n        active: function () {\r\n            return ['active', 'warn-1', 'warn-2', 'warn-3', 'warn-4', 'locked'].indexOf(this.get('status')) > -1;\r\n        }.property('status'),\r\n    \r\n        invited: function () {\r\n            return ['invited', 'invited-pending'].indexOf(this.get('status')) > -1;\r\n        }.property('status'),\r\n    \r\n        pending: Ember.computed.equal('status', 'invited-pending').property('status')\r\n    });\r\n    \r\n    __exports__[\"default\"] = User;\n  });",
    "define(\"ghost/router\", \n  [\"ghost/utils/ghost-paths\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    /*global Ember */\r\n    var ghostPaths = __dependency1__[\"default\"];\n\n    \r\n    // ensure we don't share routes between all Router instances\r\n    var Router = Ember.Router.extend();\r\n    \r\n    Router.reopen({\r\n        location: 'trailing-history', // use HTML5 History API instead of hash-tag based URLs\r\n        rootURL: ghostPaths().adminRoot, // admin interface lives under sub-directory /ghost\r\n    \r\n        clearNotifications: function () {\r\n            this.notifications.closePassive();\r\n            this.notifications.displayDelayed();\r\n        }.on('didTransition')\r\n    });\r\n    \r\n    Router.map(function () {\r\n        this.route('setup');\r\n        this.route('signin');\r\n        this.route('signout');\r\n        this.route('signup', {path: '/signup/:token'});\r\n        this.route('forgotten');\r\n        this.route('reset', {path: '/reset/:token'});\r\n    \r\n        this.resource('posts', {path: '/'}, function () {\r\n            this.route('post', {path: ':post_id'});\r\n        });\r\n    \r\n        this.resource('editor', function () {\r\n            this.route('new', {path: ''});\r\n            this.route('edit', {path: ':post_id'});\r\n        });\r\n    \r\n        this.resource('settings', function () {\r\n            this.route('general');\r\n    \r\n            this.resource('settings.users', {path: '/users'}, function () {\r\n                this.route('user', {path: '/:slug'});\r\n            });\r\n    \r\n            this.route('about');\r\n            this.route('tags');\r\n        });\r\n    \r\n        this.route('debug');\r\n    \r\n        // Redirect legacy content to posts\r\n        this.route('content');\r\n    \r\n        this.route('error404', {path: '/*path'});\r\n    });\r\n    \r\n    __exports__[\"default\"] = Router;\n  });",
    "define(\"ghost/routes/application\", \n  [\"ghost/mixins/shortcuts-route\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    /* global key */\r\n    var ShortcutsRoute = __dependency1__[\"default\"];\n\n    \r\n    var ApplicationRoute = Ember.Route.extend(SimpleAuth.ApplicationRouteMixin, ShortcutsRoute, {\r\n    \r\n        afterModel: function (model, transition) {\r\n            if (this.get('session').isAuthenticated) {\r\n                transition.send('loadServerNotifications');\r\n            }\r\n        },\r\n    \r\n        shortcuts: {\r\n            esc: {action: 'closePopups', scope: 'all'},\r\n            enter: {action: 'confirmModal', scope: 'modal'}\r\n        },\r\n    \r\n        actions: {\r\n            authorizationFailed: function () {\r\n                var currentRoute = this.get('controller').get('currentRouteName');\r\n    \r\n                if (currentRoute.split('.')[0] === 'editor') {\r\n                    this.send('openModal', 'auth-failed-unsaved', this.controllerFor(currentRoute));\r\n    \r\n                    return;\r\n                }\r\n    \r\n                this._super();\r\n            },\r\n    \r\n            toggleGlobalMobileNav: function () {\r\n                this.toggleProperty('controller.showGlobalMobileNav');\r\n            },\r\n    \r\n            toggleSettingsMenu: function () {\r\n                this.toggleProperty('controller.showSettingsMenu');\r\n            },\r\n            closeSettingsMenu: function () {\r\n                this.set('controller.showSettingsMenu', false);\r\n            },\r\n    \r\n            closePopups: function () {\r\n                this.get('dropdown').closeDropdowns();\r\n                this.get('notifications').closeAll();\r\n    \r\n                // Close right outlet if open\r\n                this.send('closeSettingsMenu');\r\n    \r\n                this.send('closeModal');\r\n            },\r\n    \r\n            signedIn: function () {\r\n                this.send('loadServerNotifications', true);\r\n            },\r\n    \r\n            sessionAuthenticationFailed: function (error) {\r\n                if (error.errors) {\r\n                    this.notifications.showErrors(error.errors);\r\n                } else {\r\n                    // connection errors don't return proper status message, only req.body\r\n                    this.notifications.showError('There was a problem on the server.');\r\n                }\r\n            },\r\n    \r\n            sessionAuthenticationSucceeded: function () {\r\n                var self = this;\r\n                this.store.find('user', 'me').then(function (user) {\r\n                    self.send('signedIn', user);\r\n                    var attemptedTransition = self.get('session').get('attemptedTransition');\r\n                    if (attemptedTransition) {\r\n                        attemptedTransition.retry();\r\n                        self.get('session').set('attemptedTransition', null);\r\n                    } else {\r\n                        self.transitionTo(SimpleAuth.Configuration.routeAfterAuthentication);\r\n                    }\r\n                });\r\n            },\r\n    \r\n            sessionInvalidationFailed: function (error) {\r\n                this.notifications.showError(error.message);\r\n            },\r\n    \r\n            openModal: function (modalName, model, type) {\r\n                this.get('dropdown').closeDropdowns();\r\n                key.setScope('modal');\r\n                modalName = 'modals/' + modalName;\r\n                this.set('modalName', modalName);\r\n    \r\n                // We don't always require a modal to have a controller\r\n                // so we're skipping asserting if one exists\r\n                if (this.controllerFor(modalName, true)) {\r\n                    this.controllerFor(modalName).set('model', model);\r\n    \r\n                    if (type) {\r\n                        this.controllerFor(modalName).set('imageType', type);\r\n                        this.controllerFor(modalName).set('src', model.get(type));\r\n                    }\r\n                }\r\n    \r\n                return this.render(modalName, {\r\n                    into: 'application',\r\n                    outlet: 'modal'\r\n                });\r\n            },\r\n    \r\n            confirmModal: function () {\r\n                var modalName = this.get('modalName');\r\n    \r\n                this.send('closeModal');\r\n    \r\n                if (this.controllerFor(modalName, true)) {\r\n                    this.controllerFor(modalName).send('confirmAccept');\r\n                }\r\n            },\r\n    \r\n            closeModal: function () {\r\n                this.disconnectOutlet({\r\n                    outlet: 'modal',\r\n                    parentView: 'application'\r\n                });\r\n    \r\n                key.setScope('default');\r\n            },\r\n    \r\n            loadServerNotifications: function (isDelayed) {\r\n                var self = this;\r\n    \r\n                if (this.session.isAuthenticated) {\r\n                    this.store.findAll('notification').then(function (serverNotifications) {\r\n                        serverNotifications.forEach(function (notification) {\r\n                            self.notifications.handleNotification(notification, isDelayed);\r\n                        });\r\n                    });\r\n                }\r\n            },\r\n    \r\n            handleErrors: function (errors) {\r\n                var self = this;\r\n    \r\n                this.notifications.clear();\r\n                errors.forEach(function (errorObj) {\r\n                    self.notifications.showError(errorObj.message || errorObj);\r\n    \r\n                    if (errorObj.hasOwnProperty('el')) {\r\n                        errorObj.el.addClass('input-error');\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = ApplicationRoute;\n  });",
    "define(\"ghost/routes/authenticated\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var AuthenticatedRoute = Ember.Route.extend(SimpleAuth.AuthenticatedRouteMixin);\r\n    \r\n    __exports__[\"default\"] = AuthenticatedRoute;\n  });",
    "define(\"ghost/routes/content\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var ContentRoute = Ember.Route.extend({\r\n        beforeModel: function () {\r\n            this.transitionTo('posts');\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = ContentRoute;\n  });",
    "define(\"ghost/routes/debug\", \n  [\"ghost/routes/authenticated\",\"ghost/mixins/style-body\",\"ghost/mixins/loading-indicator\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var AuthenticatedRoute = __dependency1__[\"default\"];\n\n    var styleBody = __dependency2__[\"default\"];\n\n    var loadingIndicator = __dependency3__[\"default\"];\n\n    \r\n    var DebugRoute = AuthenticatedRoute.extend(styleBody, loadingIndicator, {\r\n        classNames: ['settings'],\r\n    \r\n        beforeModel: function (transition) {\r\n            this._super(transition);\r\n    \r\n            var self = this;\r\n            this.store.find('user', 'me').then(function (user) {\r\n                if (user.get('isAuthor') || user.get('isEditor')) {\r\n                    self.transitionTo('posts');\r\n                }\r\n            });\r\n        },\r\n    \r\n        model: function () {\r\n            return this.store.find('setting', {type: 'blog,theme'}).then(function (records) {\r\n                return records.get('firstObject');\r\n            });\r\n        }\r\n    \r\n    });\r\n    \r\n    __exports__[\"default\"] = DebugRoute;\n  });",
    "define(\"ghost/routes/editor/edit\", \n  [\"ghost/routes/authenticated\",\"ghost/mixins/editor-base-route\",\"ghost/utils/isNumber\",\"ghost/utils/isFinite\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var AuthenticatedRoute = __dependency1__[\"default\"];\n\n    var base = __dependency2__[\"default\"];\n\n    var isNumber = __dependency3__[\"default\"];\n\n    var isFinite = __dependency4__[\"default\"];\n\n    \r\n    var EditorEditRoute = AuthenticatedRoute.extend(base, {\r\n        model: function (params) {\r\n            var self = this,\r\n                post,\r\n                postId,\r\n                paginationSettings;\r\n    \r\n            postId = Number(params.post_id);\r\n    \r\n            if (!isNumber(postId) || !isFinite(postId) || postId % 1 !== 0 || postId <= 0) {\r\n                return this.transitionTo('error404', 'editor/' + params.post_id);\r\n            }\r\n    \r\n            post = this.store.getById('post', postId);\r\n    \r\n            if (post) {\r\n                return post;\r\n            }\r\n    \r\n            paginationSettings = {\r\n                id: postId,\r\n                status: 'all',\r\n                staticPages: 'all'\r\n            };\r\n    \r\n            return this.store.find('user', 'me').then(function (user) {\r\n                if (user.get('isAuthor')) {\r\n                    paginationSettings.author = user.get('slug');\r\n                }\r\n    \r\n                return self.store.find('post', paginationSettings).then(function (records) {\r\n                    var post = records.get('firstObject');\r\n    \r\n                    if (user.get('isAuthor') && post.isAuthoredByUser(user)) {\r\n                        // do not show the post if they are an author but not this posts author\r\n                        post = null;\r\n                    }\r\n    \r\n                    if (post) {\r\n                        return post;\r\n                    }\r\n    \r\n                    return self.transitionTo('posts.index');\r\n                });\r\n            });\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = EditorEditRoute;\n  });",
    "define(\"ghost/routes/editor/index\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var EditorRoute = Ember.Route.extend({\r\n        beforeModel: function () {\r\n            this.transitionTo('editor.new');\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = EditorRoute;\n  });",
    "define(\"ghost/routes/editor/new\", \n  [\"ghost/routes/authenticated\",\"ghost/mixins/editor-base-route\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var AuthenticatedRoute = __dependency1__[\"default\"];\n\n    var base = __dependency2__[\"default\"];\n\n    \r\n    var EditorNewRoute = AuthenticatedRoute.extend(base, {\r\n        model: function () {\r\n            var self = this;\r\n            return this.get('session.user').then(function (user) {\r\n                return self.store.createRecord('post', {\r\n                    author: user\r\n                });\r\n            });\r\n        },\r\n    \r\n        setupController: function (controller, model) {\r\n            var psm = this.controllerFor('post-settings-menu');\r\n    \r\n            // make sure there are no titleObserver functions hanging around\r\n            // from previous posts\r\n            psm.removeObserver('titleScratch', psm, 'titleObserver');\r\n    \r\n            this._super(controller, model);\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = EditorNewRoute;\n  });",
    "define(\"ghost/routes/error404\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var Error404Route = Ember.Route.extend({\r\n        controllerName: 'error',\r\n        templateName: 'error',\r\n    \r\n        model: function () {\r\n            return {\r\n                status: 404\r\n            };\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = Error404Route;\n  });",
    "define(\"ghost/routes/forgotten\", \n  [\"ghost/mixins/style-body\",\"ghost/mixins/loading-indicator\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var styleBody = __dependency1__[\"default\"];\n\n    var loadingIndicator = __dependency2__[\"default\"];\n\n    \r\n    var ForgottenRoute = Ember.Route.extend(styleBody, loadingIndicator, {\r\n        classNames: ['ghost-forgotten']\r\n    });\r\n    \r\n    __exports__[\"default\"] = ForgottenRoute;\n  });",
    "define(\"ghost/routes/mobile-index-route\", \n  [\"ghost/utils/mobile\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var mobileQuery = __dependency1__[\"default\"];\n\n    \r\n    // Routes that extend MobileIndexRoute need to implement\r\n    // desktopTransition, a function which is called when\r\n    // the user resizes to desktop levels.\r\n    var MobileIndexRoute = Ember.Route.extend({\r\n        desktopTransition: Ember.K,\r\n    \r\n        activate: function attachDesktopTransition() {\r\n            this._super();\r\n            mobileQuery.addListener(this.desktopTransitionMQ);\r\n        },\r\n    \r\n        deactivate: function removeDesktopTransition() {\r\n            this._super();\r\n            mobileQuery.removeListener(this.desktopTransitionMQ);\r\n        },\r\n    \r\n        setDesktopTransitionMQ: function () {\r\n            var self = this;\r\n            this.set('desktopTransitionMQ', function desktopTransitionMQ() {\r\n                if (!mobileQuery.matches) {\r\n                    self.desktopTransition();\r\n                }\r\n            });\r\n        }.on('init')\r\n    });\r\n    \r\n    __exports__[\"default\"] = MobileIndexRoute;\n  });",
    "define(\"ghost/routes/posts\", \n  [\"ghost/routes/authenticated\",\"ghost/mixins/style-body\",\"ghost/mixins/shortcuts-route\",\"ghost/mixins/loading-indicator\",\"ghost/mixins/pagination-route\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __exports__) {\n    \"use strict\";\n    var AuthenticatedRoute = __dependency1__[\"default\"];\n\n    var styleBody = __dependency2__[\"default\"];\n\n    var ShortcutsRoute = __dependency3__[\"default\"];\n\n    var loadingIndicator = __dependency4__[\"default\"];\n\n    var PaginationRouteMixin = __dependency5__[\"default\"];\n\n    \r\n    var paginationSettings,\r\n        PostsRoute;\r\n    \r\n    paginationSettings = {\r\n        status: 'all',\r\n        staticPages: 'all',\r\n        page: 1\r\n    };\r\n    \r\n    PostsRoute = AuthenticatedRoute.extend(ShortcutsRoute, styleBody, loadingIndicator, PaginationRouteMixin, {\r\n        classNames: ['manage'],\r\n    \r\n        model: function () {\r\n            var self = this;\r\n    \r\n            return this.store.find('user', 'me').then(function (user) {\r\n                if (user.get('isAuthor')) {\r\n                    paginationSettings.author = user.get('slug');\r\n                }\r\n    \r\n                // using `.filter` allows the template to auto-update when new models are pulled in from the server.\r\n                // we just need to 'return true' to allow all models by default.\r\n                return self.store.filter('post', paginationSettings, function (post) {\r\n                    if (user.get('isAuthor')) {\r\n                        return post.isAuthoredByUser(user);\r\n                    }\r\n    \r\n                    return true;\r\n                });\r\n            });\r\n        },\r\n    \r\n        setupController: function (controller, model) {\r\n            this._super(controller, model);\r\n            this.setupPagination(paginationSettings);\r\n        },\r\n    \r\n        stepThroughPosts: function (step) {\r\n            var currentPost = this.get('controller.currentPost'),\r\n                posts = this.get('controller.arrangedContent'),\r\n                length = posts.get('length'),\r\n                newPosition;\r\n    \r\n            newPosition = posts.indexOf(currentPost) + step;\r\n    \r\n            // if we are on the first or last item\r\n            // just do nothing (desired behavior is to not\r\n            // loop around)\r\n            if (newPosition >= length) {\r\n                return;\r\n            } else if (newPosition < 0) {\r\n                return;\r\n            }\r\n    \r\n            this.transitionTo('posts.post', posts.objectAt(newPosition));\r\n        },\r\n    \r\n        scrollContent: function (amount) {\r\n            var content = Ember.$('.js-content-preview'),\r\n                scrolled = content.scrollTop();\r\n    \r\n            content.scrollTop(scrolled + 50 * amount);\r\n        },\r\n    \r\n        shortcuts: {\r\n            'up, k': 'moveUp',\r\n            'down, j': 'moveDown',\r\n            left: 'focusList',\r\n            right: 'focusContent',\r\n            c: 'newPost'\r\n        },\r\n    \r\n        actions: {\r\n            focusList: function () {\r\n                this.controller.set('keyboardFocus', 'postList');\r\n            },\r\n            focusContent: function () {\r\n                this.controller.set('keyboardFocus', 'postContent');\r\n            },\r\n            newPost: function () {\r\n                this.transitionTo('editor.new');\r\n            },\r\n    \r\n            moveUp: function () {\r\n                if (this.controller.get('postContentFocused')) {\r\n                    this.scrollContent(-1);\r\n                } else {\r\n                    this.stepThroughPosts(-1);\r\n                }\r\n            },\r\n    \r\n            moveDown: function () {\r\n                if (this.controller.get('postContentFocused')) {\r\n                    this.scrollContent(1);\r\n                } else {\r\n                    this.stepThroughPosts(1);\r\n                }\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = PostsRoute;\n  });",
    "define(\"ghost/routes/posts/index\", \n  [\"ghost/routes/mobile-index-route\",\"ghost/mixins/loading-indicator\",\"ghost/utils/mobile\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var MobileIndexRoute = __dependency1__[\"default\"];\n\n    var loadingIndicator = __dependency2__[\"default\"];\n\n    var mobileQuery = __dependency3__[\"default\"];\n\n    \r\n    var PostsIndexRoute = MobileIndexRoute.extend(SimpleAuth.AuthenticatedRouteMixin, loadingIndicator, {\r\n        noPosts: false,\r\n    \r\n        // Transition to a specific post if we're not on mobile\r\n        beforeModel: function () {\r\n            if (!mobileQuery.matches) {\r\n                return this.goToPost();\r\n            }\r\n        },\r\n    \r\n        setupController: function (controller, model) {\r\n            /*jshint unused:false*/\r\n            controller.set('noPosts', this.get('noPosts'));\r\n        },\r\n    \r\n        goToPost: function () {\r\n            var self = this,\r\n                // the store has been populated by PostsRoute\r\n                posts = this.store.all('post'),\r\n                post;\r\n    \r\n            return this.store.find('user', 'me').then(function (user) {\r\n                post = posts.find(function (post) {\r\n                    // Authors can only see posts they've written\r\n                    if (user.get('isAuthor')) {\r\n                        return post.isAuthoredByUser(user);\r\n                    }\r\n    \r\n                    return true;\r\n                });\r\n    \r\n                if (post) {\r\n                    return self.transitionTo('posts.post', post);\r\n                }\r\n    \r\n                self.set('noPosts', true);\r\n            });\r\n        },\r\n    \r\n        // Mobile posts route callback\r\n        desktopTransition: function () {\r\n            this.goToPost();\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = PostsIndexRoute;\n  });",
    "define(\"ghost/routes/posts/post\", \n  [\"ghost/routes/authenticated\",\"ghost/mixins/loading-indicator\",\"ghost/mixins/shortcuts-route\",\"ghost/utils/isNumber\",\"ghost/utils/isFinite\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __exports__) {\n    \"use strict\";\n    var AuthenticatedRoute = __dependency1__[\"default\"];\n\n    var loadingIndicator = __dependency2__[\"default\"];\n\n    var ShortcutsRoute = __dependency3__[\"default\"];\n\n    var isNumber = __dependency4__[\"default\"];\n\n    var isFinite = __dependency5__[\"default\"];\n\n    \r\n    var PostsPostRoute = AuthenticatedRoute.extend(loadingIndicator, ShortcutsRoute, {\r\n        model: function (params) {\r\n            var self = this,\r\n                post,\r\n                postId,\r\n                paginationSettings;\r\n    \r\n            postId = Number(params.post_id);\r\n    \r\n            if (!isNumber(postId) || !isFinite(postId) || postId % 1 !== 0 || postId <= 0) {\r\n                return this.transitionTo('error404', params.post_id);\r\n            }\r\n    \r\n            post = this.store.getById('post', postId);\r\n    \r\n            if (post) {\r\n                return post;\r\n            }\r\n    \r\n            paginationSettings = {\r\n                id: postId,\r\n                status: 'all',\r\n                staticPages: 'all'\r\n            };\r\n    \r\n            return this.store.find('user', 'me').then(function (user) {\r\n                if (user.get('isAuthor')) {\r\n                    paginationSettings.author = user.get('slug');\r\n                }\r\n    \r\n                return self.store.find('post', paginationSettings).then(function (records) {\r\n                    var post = records.get('firstObject');\r\n    \r\n                    if (user.get('isAuthor') && !post.isAuthoredByUser(user)) {\r\n                        // do not show the post if they are an author but not this posts author\r\n                        post = null;\r\n                    }\r\n    \r\n                    if (post) {\r\n                        return post;\r\n                    }\r\n    \r\n                    return self.transitionTo('posts.index');\r\n                });\r\n            });\r\n        },\r\n    \r\n        setupController: function (controller, model) {\r\n            this._super(controller, model);\r\n    \r\n            this.controllerFor('posts').set('currentPost', model);\r\n        },\r\n    \r\n        shortcuts: {\r\n            'enter, o': 'openEditor',\r\n            'command+backspace, ctrl+backspace': 'deletePost'\r\n        },\r\n    \r\n        actions: {\r\n            openEditor: function () {\r\n                this.transitionTo('editor.edit', this.get('controller.model'));\r\n            },\r\n    \r\n            deletePost: function () {\r\n                this.send('openModal', 'delete-post', this.get('controller.model'));\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = PostsPostRoute;\n  });",
    "define(\"ghost/routes/reset\", \n  [\"ghost/mixins/style-body\",\"ghost/mixins/loading-indicator\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var styleBody = __dependency1__[\"default\"];\n\n    var loadingIndicator = __dependency2__[\"default\"];\n\n    \r\n    var ResetRoute = Ember.Route.extend(styleBody, loadingIndicator, {\r\n        classNames: ['ghost-reset'],\r\n    \r\n        beforeModel: function () {\r\n            if (this.get('session').isAuthenticated) {\r\n                this.notifications.showWarn('You can\\'t reset your password while you\\'re signed in.', {delayed: true});\r\n                this.transitionTo(SimpleAuth.Configuration.routeAfterAuthentication);\r\n            }\r\n        },\r\n    \r\n        setupController: function (controller, params) {\r\n            controller.token = params.token;\r\n        },\r\n    \r\n        // Clear out any sensitive information\r\n        deactivate: function () {\r\n            this._super();\r\n            this.controller.clearData();\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = ResetRoute;\n  });",
    "define(\"ghost/routes/settings\", \n  [\"ghost/routes/authenticated\",\"ghost/mixins/style-body\",\"ghost/mixins/loading-indicator\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var AuthenticatedRoute = __dependency1__[\"default\"];\n\n    var styleBody = __dependency2__[\"default\"];\n\n    var loadingIndicator = __dependency3__[\"default\"];\n\n    \r\n    var SettingsRoute = AuthenticatedRoute.extend(styleBody, loadingIndicator, {\r\n        classNames: ['settings']\r\n    });\r\n    \r\n    __exports__[\"default\"] = SettingsRoute;\n  });",
    "define(\"ghost/routes/settings/about\", \n  [\"ghost/routes/authenticated\",\"ghost/mixins/loading-indicator\",\"ghost/mixins/style-body\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var AuthenticatedRoute = __dependency1__[\"default\"];\n\n    var loadingIndicator = __dependency2__[\"default\"];\n\n    var styleBody = __dependency3__[\"default\"];\n\n    \r\n    var SettingsAboutRoute = AuthenticatedRoute.extend(styleBody, loadingIndicator, {\r\n        classNames: ['settings-view-about'],\r\n    \r\n        cachedConfig: false,\r\n        model: function () {\r\n            var cachedConfig = this.get('cachedConfig'),\r\n                self = this;\r\n            if (cachedConfig) {\r\n                return cachedConfig;\r\n            }\r\n    \r\n            return ic.ajax.request(this.get('ghostPaths.url').api('configuration'))\r\n                .then(function (configurationResponse) {\r\n                    var configKeyValues = configurationResponse.configuration;\r\n                    cachedConfig = {};\r\n                    configKeyValues.forEach(function (configKeyValue) {\r\n                        cachedConfig[configKeyValue.key] = configKeyValue.value;\r\n                    });\r\n                    self.set('cachedConfig', cachedConfig);\r\n                    return cachedConfig;\r\n                });\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = SettingsAboutRoute;\n  });",
    "define(\"ghost/routes/settings/apps\", \n  [\"ghost/routes/authenticated\",\"ghost/mixins/current-user-settings\",\"ghost/mixins/style-body\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var AuthenticatedRoute = __dependency1__[\"default\"];\n\n    var CurrentUserSettings = __dependency2__[\"default\"];\n\n    var styleBody = __dependency3__[\"default\"];\n\n    \r\n    var AppsRoute = AuthenticatedRoute.extend(styleBody, CurrentUserSettings, {\r\n        classNames: ['settings-view-apps'],\r\n    \r\n        beforeModel: function () {\r\n            if (!this.get('config.apps')) {\r\n                return this.transitionTo('settings.general');\r\n            }\r\n    \r\n            return this.currentUser()\r\n                .then(this.transitionAuthor())\r\n                .then(this.transitionEditor());\r\n        },\r\n    \r\n        model: function () {\r\n            return this.store.find('app');\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = AppsRoute;\n  });",
    "define(\"ghost/routes/settings/general\", \n  [\"ghost/routes/authenticated\",\"ghost/mixins/loading-indicator\",\"ghost/mixins/current-user-settings\",\"ghost/mixins/style-body\",\"ghost/mixins/shortcuts-route\",\"ghost/utils/ctrl-or-cmd\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __exports__) {\n    \"use strict\";\n    var AuthenticatedRoute = __dependency1__[\"default\"];\n\n    var loadingIndicator = __dependency2__[\"default\"];\n\n    var CurrentUserSettings = __dependency3__[\"default\"];\n\n    var styleBody = __dependency4__[\"default\"];\n\n    var ShortcutsRoute = __dependency5__[\"default\"];\n\n    var ctrlOrCmd = __dependency6__[\"default\"];\n\n    \r\n    var shortcuts = {},\r\n        SettingsGeneralRoute;\r\n    \r\n    shortcuts[ctrlOrCmd + '+s'] = {action: 'save'};\r\n    \r\n    SettingsGeneralRoute = AuthenticatedRoute.extend(styleBody, loadingIndicator, CurrentUserSettings, ShortcutsRoute, {\r\n        classNames: ['settings-view-general'],\r\n    \r\n        beforeModel: function () {\r\n            return this.currentUser()\r\n                .then(this.transitionAuthor())\r\n                .then(this.transitionEditor());\r\n        },\r\n    \r\n        model: function () {\r\n            return this.store.find('setting', {type: 'blog,theme'}).then(function (records) {\r\n                return records.get('firstObject');\r\n            });\r\n        },\r\n    \r\n        shortcuts: shortcuts,\r\n    \r\n        actions: {\r\n            save: function () {\r\n                this.get('controller').send('save');\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = SettingsGeneralRoute;\n  });",
    "define(\"ghost/routes/settings/index\", \n  [\"ghost/routes/mobile-index-route\",\"ghost/mixins/current-user-settings\",\"ghost/utils/mobile\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var MobileIndexRoute = __dependency1__[\"default\"];\n\n    var CurrentUserSettings = __dependency2__[\"default\"];\n\n    var mobileQuery = __dependency3__[\"default\"];\n\n    \r\n    var SettingsIndexRoute = MobileIndexRoute.extend(SimpleAuth.AuthenticatedRouteMixin, CurrentUserSettings, {\r\n        // Redirect users without permission to view settings,\r\n        // and show the settings.general route unless the user\r\n        // is mobile\r\n        beforeModel: function () {\r\n            var self = this;\r\n            return this.currentUser()\r\n                .then(this.transitionAuthor())\r\n                .then(this.transitionEditor())\r\n                .then(function () {\r\n                    if (!mobileQuery.matches) {\r\n                        self.transitionTo('settings.general');\r\n                    }\r\n                });\r\n        },\r\n    \r\n        desktopTransition: function () {\r\n            this.transitionTo('settings.general');\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = SettingsIndexRoute;\n  });",
    "define(\"ghost/routes/settings/tags\", \n  [\"ghost/routes/authenticated\",\"ghost/mixins/current-user-settings\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var AuthenticatedRoute = __dependency1__[\"default\"];\n\n    var CurrentUserSettings = __dependency2__[\"default\"];\n\n    \r\n    var TagsRoute = AuthenticatedRoute.extend(CurrentUserSettings, {\r\n    \r\n        beforeModel: function () {\r\n            if (!this.get('config.tagsUI')) {\r\n                return this.transitionTo('settings.general');\r\n            }\r\n    \r\n            return this.currentUser()\r\n                .then(this.transitionAuthor());\r\n        },\r\n    \r\n        model: function () {\r\n            return this.store.find('tag');\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = TagsRoute;\n  });",
    "define(\"ghost/routes/settings/users\", \n  [\"ghost/routes/authenticated\",\"ghost/mixins/current-user-settings\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var AuthenticatedRoute = __dependency1__[\"default\"];\n\n    var CurrentUserSettings = __dependency2__[\"default\"];\n\n    \r\n    var UsersRoute = AuthenticatedRoute.extend(CurrentUserSettings, {\r\n        beforeModel: function () {\r\n            return this.currentUser()\r\n                .then(this.transitionAuthor());\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = UsersRoute;\n  });",
    "define(\"ghost/routes/settings/users/index\", \n  [\"ghost/routes/authenticated\",\"ghost/mixins/pagination-route\",\"ghost/mixins/style-body\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var AuthenticatedRoute = __dependency1__[\"default\"];\n\n    var PaginationRouteMixin = __dependency2__[\"default\"];\n\n    var styleBody = __dependency3__[\"default\"];\n\n    \r\n    var paginationSettings,\r\n        UsersIndexRoute;\r\n    \r\n    paginationSettings = {\r\n        page: 1,\r\n        limit: 20,\r\n        status: 'active'\r\n    };\r\n    \r\n    UsersIndexRoute = AuthenticatedRoute.extend(styleBody, PaginationRouteMixin, {\r\n        classNames: ['settings-view-users'],\r\n    \r\n        setupController: function (controller, model) {\r\n            this._super(controller, model);\r\n            this.setupPagination(paginationSettings);\r\n        },\r\n    \r\n        model: function () {\r\n            var self = this;\r\n    \r\n            return self.store.find('user', {limit: 'all', status: 'invited'}).then(function () {\r\n                return self.store.find('user', 'me').then(function (currentUser) {\r\n                    if (currentUser.get('isEditor')) {\r\n                        // Editors only see authors in the list\r\n                        paginationSettings.role = 'Author';\r\n                    }\r\n    \r\n                    return self.store.filter('user', paginationSettings, function (user) {\r\n                        if (currentUser.get('isEditor')) {\r\n                            return user.get('isAuthor') || user === currentUser;\r\n                        }\r\n                        return true;\r\n                    });\r\n                });\r\n            });\r\n        },\r\n    \r\n        actions: {\r\n            reload: function () {\r\n                this.refresh();\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = UsersIndexRoute;\n  });",
    "define(\"ghost/routes/settings/users/user\", \n  [\"ghost/routes/authenticated\",\"ghost/mixins/style-body\",\"ghost/mixins/shortcuts-route\",\"ghost/utils/ctrl-or-cmd\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var AuthenticatedRoute = __dependency1__[\"default\"];\n\n    var styleBody = __dependency2__[\"default\"];\n\n    var ShortcutsRoute = __dependency3__[\"default\"];\n\n    var ctrlOrCmd = __dependency4__[\"default\"];\n\n    \r\n    var shortcuts = {},\r\n        SettingsUserRoute;\r\n    \r\n    shortcuts[ctrlOrCmd + '+s'] = {action: 'save'};\r\n    \r\n    SettingsUserRoute = AuthenticatedRoute.extend(styleBody, ShortcutsRoute, {\r\n        classNames: ['settings-view-user'],\r\n    \r\n        model: function (params) {\r\n            var self = this;\r\n            // TODO: Make custom user adapter that uses /api/users/:slug endpoint\r\n            // return this.store.find('user', { slug: params.slug });\r\n    \r\n            // Instead, get all the users and then find by slug\r\n            return this.store.find('user').then(function (result) {\r\n                var user = result.findBy('slug', params.slug);\r\n    \r\n                if (!user) {\r\n                    return self.transitionTo('error404', 'settings/users/' + params.slug);\r\n                }\r\n    \r\n                return user;\r\n            });\r\n        },\r\n    \r\n        afterModel: function (user) {\r\n            var self = this;\r\n            this.store.find('user', 'me').then(function (currentUser) {\r\n                var isOwnProfile = user.get('id') === currentUser.get('id'),\r\n                    isAuthor = currentUser.get('isAuthor'),\r\n                    isEditor = currentUser.get('isEditor');\r\n                if (isAuthor && !isOwnProfile) {\r\n                    self.transitionTo('settings.users.user', currentUser);\r\n                } else if (isEditor && !isOwnProfile && !user.get('isAuthor')) {\r\n                    self.transitionTo('settings.users');\r\n                }\r\n            });\r\n        },\r\n    \r\n        deactivate: function () {\r\n            var model = this.modelFor('settings.users.user');\r\n    \r\n            // we want to revert any unsaved changes on exit\r\n            if (model && model.get('isDirty')) {\r\n                model.rollback();\r\n            }\r\n    \r\n            this._super();\r\n        },\r\n    \r\n        shortcuts: shortcuts,\r\n    \r\n        actions: {\r\n            save: function () {\r\n                this.get('controller').send('save');\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = SettingsUserRoute;\n  });",
    "define(\"ghost/routes/setup\", \n  [\"ghost/mixins/style-body\",\"ghost/mixins/loading-indicator\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var styleBody = __dependency1__[\"default\"];\n\n    var loadingIndicator = __dependency2__[\"default\"];\n\n    \r\n    var SetupRoute = Ember.Route.extend(styleBody, loadingIndicator, {\r\n        classNames: ['ghost-setup'],\r\n    \r\n        // use the beforeModel hook to check to see whether or not setup has been\r\n        // previously completed.  If it has, stop the transition into the setup page.\r\n    \r\n        beforeModel: function () {\r\n            var self = this;\r\n    \r\n            // If user is logged in, setup has already been completed.\r\n            if (this.get('session').isAuthenticated) {\r\n                this.transitionTo(SimpleAuth.Configuration.routeAfterAuthentication);\r\n                return;\r\n            }\r\n    \r\n            // If user is not logged in, check the state of the setup process via the API\r\n            return ic.ajax.request(this.get('ghostPaths.url').api('authentication/setup'), {\r\n                type: 'GET'\r\n            }).then(function (result) {\r\n                var setup = result.setup[0].status;\r\n    \r\n                if (setup) {\r\n                    return self.transitionTo('signin');\r\n                }\r\n            });\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = SetupRoute;\n  });",
    "define(\"ghost/routes/signin\", \n  [\"ghost/mixins/style-body\",\"ghost/mixins/loading-indicator\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var styleBody = __dependency1__[\"default\"];\n\n    var loadingIndicator = __dependency2__[\"default\"];\n\n    \r\n    var SigninRoute = Ember.Route.extend(styleBody, loadingIndicator, {\r\n        classNames: ['ghost-login'],\r\n        beforeModel: function () {\r\n            if (this.get('session').isAuthenticated) {\r\n                this.transitionTo(SimpleAuth.Configuration.routeAfterAuthentication);\r\n            }\r\n        },\r\n    \r\n        // the deactivate hook is called after a route has been exited.\r\n        deactivate: function () {\r\n            this._super();\r\n    \r\n            // clear the properties that hold the credentials from the controller\r\n            // when we're no longer on the signin screen\r\n            this.controllerFor('signin').setProperties({identification: '', password: ''});\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = SigninRoute;\n  });",
    "define(\"ghost/routes/signout\", \n  [\"ghost/routes/authenticated\",\"ghost/mixins/style-body\",\"ghost/mixins/loading-indicator\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var AuthenticatedRoute = __dependency1__[\"default\"];\n\n    var styleBody = __dependency2__[\"default\"];\n\n    var loadingIndicator = __dependency3__[\"default\"];\n\n    \r\n    var SignoutRoute = AuthenticatedRoute.extend(styleBody, loadingIndicator, {\r\n        classNames: ['ghost-signout'],\r\n    \r\n        afterModel: function (model, transition) {\r\n            this.notifications.clear();\r\n            if (Ember.canInvoke(transition, 'send')) {\r\n                transition.send('invalidateSession');\r\n                transition.abort();\r\n            } else {\r\n                this.send('invalidateSession');\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = SignoutRoute;\n  });",
    "define(\"ghost/routes/signup\", \n  [\"ghost/mixins/style-body\",\"ghost/mixins/loading-indicator\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var styleBody = __dependency1__[\"default\"];\n\n    var loadingIndicator = __dependency2__[\"default\"];\n\n    \r\n    var SignupRoute = Ember.Route.extend(styleBody, loadingIndicator, {\r\n        classNames: ['ghost-signup'],\r\n        beforeModel: function () {\r\n            if (this.get('session').isAuthenticated) {\r\n                this.notifications.showWarn('You need to sign out to register as a new user.', {delayed: true});\r\n                this.transitionTo(SimpleAuth.Configuration.routeAfterAuthentication);\r\n            }\r\n        },\r\n    \r\n        model: function (params) {\r\n            var self = this,\r\n                tokenText,\r\n                email,\r\n                model = {},\r\n                re = /^(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$/;\r\n    \r\n            return new Ember.RSVP.Promise(function (resolve) {\r\n                if (!re.test(params.token)) {\r\n                    self.notifications.showError('Invalid token.', {delayed: true});\r\n    \r\n                    return resolve(self.transitionTo('signin'));\r\n                }\r\n    \r\n                tokenText = atob(params.token);\r\n                email = tokenText.split('|')[1];\r\n    \r\n                model.email = email;\r\n                model.token = params.token;\r\n    \r\n                return ic.ajax.request({\r\n                    url: self.get('ghostPaths.url').api('authentication', 'invitation'),\r\n                    type: 'GET',\r\n                    dataType: 'json',\r\n                    data: {\r\n                        email: email\r\n                    }\r\n                }).then(function (response) {\r\n                    if (response && response.invitation && response.invitation[0].valid === false) {\r\n                        self.notifications.showError('The invitation does not exist or is no longer valid.', {delayed: true});\r\n    \r\n                        return resolve(self.transitionTo('signin'));\r\n                    }\r\n    \r\n                    resolve(model);\r\n                }).catch(function () {\r\n                    resolve(model);\r\n                });\r\n            });\r\n        },\r\n    \r\n        deactivate: function () {\r\n            this._super();\r\n    \r\n            // clear the properties that hold the sensitive data from the controller\r\n            this.controllerFor('signup').setProperties({email: '', password: '', token: ''});\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = SignupRoute;\n  });",
    "define(\"ghost/serializers/application\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var ApplicationSerializer = DS.RESTSerializer.extend({\r\n        serializeIntoHash: function (hash, type, record, options) {\r\n            // Our API expects an id on the posted object\r\n            options = options || {};\r\n            options.includeId = true;\r\n    \r\n            // We have a plural root in the API\r\n            var root = Ember.String.pluralize(type.typeKey),\r\n                data = this.serialize(record, options);\r\n    \r\n            // Don't ever pass uuid's\r\n            delete data.uuid;\r\n    \r\n            hash[root] = [data];\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = ApplicationSerializer;\n  });",
    "define(\"ghost/serializers/post\", \n  [\"ghost/serializers/application\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ApplicationSerializer = __dependency1__[\"default\"];\n\n    \r\n    var PostSerializer = ApplicationSerializer.extend(DS.EmbeddedRecordsMixin, {\r\n        // settings for the EmbeddedRecordsMixin.\r\n        attrs: {\r\n            tags: {embedded: 'always'}\r\n        },\r\n    \r\n        normalize: function (type, hash) {\r\n            // this is to enable us to still access the raw author_id\r\n            // without requiring an extra get request (since it is an\r\n            // async relationship).\r\n            hash.author_id = hash.author;\r\n    \r\n            return this._super(type, hash);\r\n        },\r\n    \r\n        extractSingle: function (store, primaryType, payload) {\r\n            var root = this.keyForAttribute(primaryType.typeKey),\r\n                pluralizedRoot = Ember.String.pluralize(primaryType.typeKey);\r\n    \r\n            // make payload { post: { title: '', tags: [obj, obj], etc. } }.\r\n            // this allows ember-data to pull the embedded tags out again,\r\n            // in the function `updatePayloadWithEmbeddedHasMany` of the\r\n            // EmbeddedRecordsMixin (line: `if (!partial[attribute])`):\r\n            // https://github.com/emberjs/data/blob/master/packages/activemodel-adapter/lib/system/embedded_records_mixin.js#L499\r\n            payload[root] = payload[pluralizedRoot][0];\r\n            delete payload[pluralizedRoot];\r\n    \r\n            return this._super.apply(this, arguments);\r\n        },\r\n    \r\n        keyForAttribute: function (attr) {\r\n            return attr;\r\n        },\r\n    \r\n        keyForRelationship: function (relationshipName) {\r\n            // this is a hack to prevent Ember-Data from deleting our `tags` reference.\r\n            // ref: https://github.com/emberjs/data/issues/2051\r\n            // @TODO: remove this once the situation becomes clearer what to do.\r\n            if (relationshipName === 'tags') {\r\n                return 'tag';\r\n            }\r\n    \r\n            return relationshipName;\r\n        },\r\n    \r\n        serializeIntoHash: function (hash, type, record, options) {\r\n            options = options || {};\r\n    \r\n            // We have a plural root in the API\r\n            var root = Ember.String.pluralize(type.typeKey),\r\n                data = this.serialize(record, options);\r\n    \r\n            // Don't ever pass uuid's\r\n            delete data.uuid;\r\n            // Don't send HTML\r\n            delete data.html;\r\n    \r\n            hash[root] = [data];\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = PostSerializer;\n  });",
    "define(\"ghost/serializers/setting\", \n  [\"ghost/serializers/application\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ApplicationSerializer = __dependency1__[\"default\"];\n\n    \r\n    var SettingSerializer = ApplicationSerializer.extend({\r\n        serializeIntoHash: function (hash, type, record, options) {\r\n            // Settings API does not want ids\r\n            options = options || {};\r\n            options.includeId = false;\r\n    \r\n            var root = Ember.String.pluralize(type.typeKey),\r\n                data = this.serialize(record, options),\r\n                payload = [];\r\n    \r\n            delete data.id;\r\n    \r\n            Object.keys(data).forEach(function (k) {\r\n                payload.push({key: k, value: data[k]});\r\n            });\r\n    \r\n            hash[root] = payload;\r\n        },\r\n    \r\n        extractArray: function (store, type, _payload) {\r\n            var payload = {id: '0'};\r\n    \r\n            _payload.settings.forEach(function (setting) {\r\n                payload[setting.key] = setting.value;\r\n            });\r\n    \r\n            return [payload];\r\n        },\r\n    \r\n        extractSingle: function (store, type, payload) {\r\n            return this.extractArray(store, type, payload).pop();\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = SettingSerializer;\n  });",
    "define(\"ghost/serializers/user\", \n  [\"ghost/serializers/application\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ApplicationSerializer = __dependency1__[\"default\"];\n\n    \r\n    var UserSerializer = ApplicationSerializer.extend(DS.EmbeddedRecordsMixin, {\r\n        attrs: {\r\n            roles: {embedded: 'always'}\r\n        },\r\n    \r\n        extractSingle: function (store, primaryType, payload) {\r\n            var root = this.keyForAttribute(primaryType.typeKey),\r\n                pluralizedRoot = Ember.String.pluralize(primaryType.typeKey);\r\n    \r\n            payload[root] = payload[pluralizedRoot][0];\r\n            delete payload[pluralizedRoot];\r\n    \r\n            return this._super.apply(this, arguments);\r\n        },\r\n    \r\n        keyForAttribute: function (attr) {\r\n            return attr;\r\n        },\r\n    \r\n        keyForRelationship: function (relationshipName) {\r\n            // this is a hack to prevent Ember-Data from deleting our `tags` reference.\r\n            // ref: https://github.com/emberjs/data/issues/2051\r\n            // @TODO: remove this once the situation becomes clearer what to do.\r\n            if (relationshipName === 'roles') {\r\n                return 'role';\r\n            }\r\n    \r\n            return relationshipName;\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = UserSerializer;\n  });",
    "define(\"ghost/transforms/moment-date\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /* global moment */\r\n    var MomentDate = DS.Transform.extend({\r\n        deserialize: function (serialized) {\r\n            if (serialized) {\r\n                return moment(serialized);\r\n            }\r\n            return serialized;\r\n        },\r\n        serialize: function (deserialized) {\r\n            if (deserialized) {\r\n                return moment(deserialized).toDate();\r\n            }\r\n            return deserialized;\r\n        }\r\n    });\r\n    __exports__[\"default\"] = MomentDate;\n  });",
    "define(\"ghost/utils/ajax\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /* global ic */\r\n    \r\n    var ajax = window.ajax = function () {\r\n        return ic.ajax.request.apply(null, arguments);\r\n    };\r\n    \r\n    // Used in API request fail handlers to parse a standard api error\r\n    // response json for the message to display\r\n    function getRequestErrorMessage(request, performConcat) {\r\n        var message,\r\n            msgDetail;\r\n    \r\n        // Can't really continue without a request\r\n        if (!request) {\r\n            return null;\r\n        }\r\n    \r\n        // Seems like a sensible default\r\n        message = request.statusText;\r\n    \r\n        // If a non 200 response\r\n        if (request.status !== 200) {\r\n            try {\r\n                // Try to parse out the error, or default to 'Unknown'\r\n                if (request.responseJSON.errors && Ember.isArray(request.responseJSON.errors)) {\r\n                    message = request.responseJSON.errors.map(function (errorItem) {\r\n                        return errorItem.message;\r\n                    });\r\n                } else {\r\n                    message =  request.responseJSON.error || 'Unknown Error';\r\n                }\r\n            } catch (e) {\r\n                msgDetail = request.status ? request.status + ' - ' + request.statusText : 'Server was not available';\r\n                message = 'The server returned an error (' + msgDetail + ').';\r\n            }\r\n        }\r\n    \r\n        if (performConcat && Ember.isArray(message)) {\r\n            message = message.join('<br />');\r\n        }\r\n    \r\n        // return an array of errors by default\r\n        if (!performConcat && typeof message === 'string') {\r\n            message = [message];\r\n        }\r\n    \r\n        return message;\r\n    }\r\n    \r\n    __exports__.getRequestErrorMessage = getRequestErrorMessage;\n    __exports__.ajax = ajax;\n\n    __exports__[\"default\"] = ajax;\n  });",
    "define(\"ghost/utils/bind\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var slice = Array.prototype.slice;\r\n    \r\n    function bind(/* func, args, thisArg */) {\r\n        var args = slice.call(arguments),\r\n            func = args.shift(),\r\n            thisArg = args.pop();\r\n    \r\n        function bound() {\r\n            return func.apply(thisArg, args);\r\n        }\r\n    \r\n        return bound;\r\n    }\r\n    \r\n    __exports__[\"default\"] = bind;\n  });",
    "define(\"ghost/utils/bound-one-way\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\r\n     * Defines a property similarly to `Ember.computed.oneway`,\r\n     * save that while a `oneway` loses its binding upon being set,\r\n     * the `BoundOneWay` will continue to listen for upstream changes.\r\n     *\r\n     * This is an ideal tool for working with values inside of {{input}}\r\n     * elements.\r\n     * @param {*} upstream\r\n     * @param {function} transform a function to transform the **upstream** value.\r\n     */\r\n    var BoundOneWay = function (upstream, transform) {\r\n        if (typeof transform !== 'function') {\r\n            // default to the identity function\r\n            transform = function (value) { return value; };\r\n        }\r\n    \r\n        return Ember.computed(upstream, function (key, value) {\r\n            return arguments.length > 1 ? value : transform(this.get(upstream));\r\n        });\r\n    };\r\n    \r\n    __exports__[\"default\"] = BoundOneWay;\n  });",
    "define(\"ghost/utils/caja-sanitizers\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\r\n     * google-caja uses url() and id() to verify if the values are allowed.\r\n     */\r\n    var url,\r\n        id;\r\n    \r\n    /**\r\n     * Check if URL is allowed\r\n     * URLs are allowed if they start with http://, https://, or /.\r\n     */\r\n    url = function (url) {\r\n        // jscs:disable\r\n        url = url.toString().replace(/['\"]+/g, '');\r\n        if (/^https?:\\/\\//.test(url) || /^\\//.test(url)) {\r\n            return url;\r\n        }\r\n        // jscs:enable\r\n    };\r\n    \r\n    /**\r\n     * Check if ID is allowed\r\n     * All ids are allowed at the moment.\r\n     */\r\n    id = function (id) {\r\n        return id;\r\n    };\r\n    \r\n    __exports__[\"default\"] = {\r\n        url: url,\r\n        id: id\r\n    };\n  });",
    "define(\"ghost/utils/codemirror-mobile\", \n  [\"ghost/assets/lib/touch-editor\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    /*global CodeMirror, device, FastClick*/\r\n    var createTouchEditor = __dependency1__[\"default\"];\n\n    \r\n    var setupMobileCodeMirror,\r\n        TouchEditor,\r\n        init;\r\n    \r\n    setupMobileCodeMirror = function setupMobileCodeMirror() {\r\n        var noop = function () {},\r\n            key;\r\n    \r\n        for (key in CodeMirror) {\r\n            if (CodeMirror.hasOwnProperty(key)) {\r\n                CodeMirror[key] = noop;\r\n            }\r\n        }\r\n    \r\n        CodeMirror.fromTextArea = function (el, options) {\r\n            return new TouchEditor(el, options);\r\n        };\r\n    \r\n        CodeMirror.keyMap = {basic: {}};\r\n    };\r\n    \r\n    init = function init() {\r\n        // Codemirror does not function on mobile devices, or on any iDevice\r\n        if (device.mobile() || (device.tablet() && device.ios())) {\r\n            $('body').addClass('touch-editor');\r\n    \r\n            Ember.touchEditor = true;\r\n    \r\n            // initialize FastClick to remove touch delays\r\n            Ember.run.scheduleOnce('afterRender', null, function () {\r\n                FastClick.attach(document.body);\r\n            });\r\n    \r\n            TouchEditor = createTouchEditor();\r\n            setupMobileCodeMirror();\r\n        }\r\n    };\r\n    \r\n    __exports__[\"default\"] = {\r\n        createIfMobile: init\r\n    };\n  });",
    "define(\"ghost/utils/codemirror-shortcuts\", \n  [\"ghost/utils/titleize\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    /* global CodeMirror, moment, Showdown */\r\n    // jscs:disable disallowSpacesInsideParentheses\r\n    \r\n    /** Set up a shortcut function to be called via router actions.\r\n     *  See editor-base-route\r\n     */\r\n    \r\n    var titleize = __dependency1__[\"default\"];\n\n    \r\n    function init() {\r\n        // remove predefined `ctrl+h` shortcut\r\n        delete CodeMirror.keyMap.emacsy['Ctrl-H'];\r\n    \r\n        // Used for simple, noncomputational replace-and-go! shortcuts.\r\n        // See default case in shortcut function below.\r\n        CodeMirror.prototype.simpleShortcutSyntax = {\r\n            bold: '**$1**',\r\n            italic: '*$1*',\r\n            strike: '~~$1~~',\r\n            code: '`$1`',\r\n            link: '[$1](http://)',\r\n            image: '![$1](http://)',\r\n            blockquote: '> $1'\r\n        };\r\n    \r\n        CodeMirror.prototype.shortcut = function (type) {\r\n            var text = this.getSelection(),\r\n                cursor = this.getCursor(),\r\n                line = this.getLine(cursor.line),\r\n                fromLineStart = {line: cursor.line, ch: 0},\r\n                toLineEnd = {line: cursor.line, ch: line.length},\r\n                md, letterCount, textIndex, position, converter,\r\n                generatedHTML, match, currentHeaderLevel, hashPrefix,\r\n                replacementLine;\r\n    \r\n            switch (type) {\r\n            case 'cycleHeaderLevel':\r\n                match = line.match(/^#+/);\r\n    \r\n                if (!match) {\r\n                    currentHeaderLevel = 1;\r\n                } else {\r\n                    currentHeaderLevel = match[0].length;\r\n                }\r\n    \r\n                if (currentHeaderLevel > 2) {\r\n                    currentHeaderLevel = 1;\r\n                }\r\n    \r\n                hashPrefix = new Array(currentHeaderLevel + 2).join('#');\r\n    \r\n                // jscs:disable\r\n                replacementLine = hashPrefix + ' ' + line.replace(/^#* /, '');\r\n                // jscs:enable\r\n    \r\n                this.replaceRange(replacementLine, fromLineStart, toLineEnd);\r\n                this.setCursor(cursor.line, cursor.ch + replacementLine.length);\r\n                break;\r\n    \r\n            case 'link':\r\n                md = this.simpleShortcutSyntax.link.replace('$1', text);\r\n                this.replaceSelection(md, 'end');\r\n                if (!text) {\r\n                    this.setCursor(cursor.line, cursor.ch + 1);\r\n                } else {\r\n                    textIndex = line.indexOf(text, cursor.ch - text.length);\r\n                    position = textIndex + md.length - 1;\r\n                    this.setSelection({\r\n                        line: cursor.line,\r\n                        ch: position - 7\r\n                    }, {\r\n                        line: cursor.line,\r\n                        ch: position\r\n                    });\r\n                }\r\n                return;\r\n    \r\n            case 'image':\r\n                md = this.simpleShortcutSyntax.image.replace('$1', text);\r\n                if (line !== '') {\r\n                    md = '\\n\\n' + md;\r\n                }\r\n                this.replaceSelection(md, 'end');\r\n                cursor = this.getCursor();\r\n                this.setSelection({line: cursor.line, ch: cursor.ch - 8}, {line: cursor.line, ch: cursor.ch - 1});\r\n                return;\r\n    \r\n            case 'list':\r\n                // jscs:disable\r\n                md = text.replace(/^(\\s*)(\\w\\W*)/gm, '$1* $2');\r\n                // jscs:enable\r\n                this.replaceSelection(md, 'end');\r\n                return;\r\n    \r\n            case 'currentDate':\r\n                md = moment(new Date()).format('D MMMM YYYY');\r\n                this.replaceSelection(md, 'end');\r\n                return;\r\n    \r\n            case 'uppercase':\r\n                md = text.toLocaleUpperCase();\r\n                break;\r\n    \r\n            case 'lowercase':\r\n                md = text.toLocaleLowerCase();\r\n                break;\r\n    \r\n            case 'titlecase':\r\n                md = titleize(text);\r\n                break;\r\n    \r\n            case 'copyHTML':\r\n                converter = new Showdown.converter();\r\n    \r\n                if (text) {\r\n                    generatedHTML = converter.makeHtml(text);\r\n                } else {\r\n                    generatedHTML = converter.makeHtml(this.getValue());\r\n                }\r\n    \r\n                // Talk to Ember\r\n                this.component.sendAction('openModal', 'copy-html', {generatedHTML: generatedHTML});\r\n    \r\n                break;\r\n    \r\n            default:\r\n                if (this.simpleShortcutSyntax[type]) {\r\n                    md = this.simpleShortcutSyntax[type].replace('$1', text);\r\n                }\r\n            }\r\n            if (md) {\r\n                this.replaceSelection(md, 'end');\r\n                if (!text) {\r\n                    letterCount = md.length;\r\n                    this.setCursor({\r\n                        line: cursor.line,\r\n                        ch: cursor.ch + (letterCount / 2)\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }\r\n    \r\n    __exports__[\"default\"] = {\r\n        init: init\r\n    };\n  });",
    "define(\"ghost/utils/ctrl-or-cmd\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var ctrlOrCmd = navigator.userAgent.indexOf('Mac') !== -1 ? 'command' : 'ctrl';\r\n    \r\n    __exports__[\"default\"] = ctrlOrCmd;\n  });",
    "define(\"ghost/utils/date-formatting\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /* global moment */\r\n    // jscs: disable disallowSpacesInsideParentheses\r\n    \r\n    var parseDateFormats,\r\n        displayDateFormat,\r\n        verifyTimeStamp,\r\n        parseDateString,\r\n        formatDate;\r\n    \r\n    parseDateFormats = ['DD MMM YY @ HH:mm', 'DD MMM YY HH:mm',\r\n                            'DD MMM YYYY @ HH:mm', 'DD MMM YYYY HH:mm',\r\n                            'DD/MM/YY @ HH:mm', 'DD/MM/YY HH:mm',\r\n                            'DD/MM/YYYY @ HH:mm', 'DD/MM/YYYY HH:mm',\r\n                            'DD-MM-YY @ HH:mm', 'DD-MM-YY HH:mm',\r\n                            'DD-MM-YYYY @ HH:mm', 'DD-MM-YYYY HH:mm',\r\n                            'YYYY-MM-DD @ HH:mm', 'YYYY-MM-DD HH:mm',\r\n                            'DD MMM @ HH:mm', 'DD MMM HH:mm'];\r\n    \r\n    displayDateFormat = 'DD MMM YY @ HH:mm';\r\n    \r\n    // Add missing timestamps\r\n    verifyTimeStamp = function (dateString) {\r\n        if (dateString && !dateString.slice(-5).match(/\\d+:\\d\\d/)) {\r\n            dateString += ' 12:00';\r\n        }\r\n        return dateString;\r\n    };\r\n    \r\n    // Parses a string to a Moment\r\n    parseDateString = function (value) {\r\n        return value ? moment(verifyTimeStamp(value), parseDateFormats, true) : undefined;\r\n    };\r\n    \r\n    // Formats a Date or Moment\r\n    formatDate = function (value) {\r\n        return verifyTimeStamp(value ? moment(value).format(displayDateFormat) : '');\r\n    };\r\n    \r\n    __exports__.parseDateString = parseDateString;\n    __exports__.formatDate = formatDate;\n  });",
    "define(\"ghost/utils/dropdown-service\", \n  [\"ghost/mixins/body-event-listener\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    // This is used by the dropdown initializer (and subsequently popovers) to manage closing & toggling\r\n    var BodyEventListener = __dependency1__[\"default\"];\n\n    \r\n    var DropdownService = Ember.Object.extend(Ember.Evented, BodyEventListener, {\r\n        bodyClick: function (event) {\r\n            /*jshint unused:false */\r\n            this.closeDropdowns();\r\n        },\r\n        closeDropdowns: function () {\r\n            this.trigger('close');\r\n        },\r\n        toggleDropdown: function (dropdownName, dropdownButton) {\r\n            this.trigger('toggle', {target: dropdownName, button: dropdownButton});\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = DropdownService;\n  });",
    "define(\"ghost/utils/editor-shortcuts\", \n  [\"ghost/utils/ctrl-or-cmd\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ctrlOrCmd = __dependency1__[\"default\"];\n\n    \r\n    var shortcuts = {};\r\n    \r\n    // General editor shortcuts\r\n    shortcuts[ctrlOrCmd + '+s'] = 'save';\r\n    shortcuts[ctrlOrCmd + '+alt+p'] = 'publish';\r\n    shortcuts['alt+shift+z'] = 'toggleZenMode';\r\n    \r\n    // CodeMirror Markdown Shortcuts\r\n    \r\n    // Text\r\n    shortcuts['ctrl+alt+u'] = {action: 'codeMirrorShortcut', options: {type: 'strike'}};\r\n    shortcuts[ctrlOrCmd + '+b'] = {action: 'codeMirrorShortcut', options: {type: 'bold'}};\r\n    shortcuts[ctrlOrCmd + '+i'] = {action: 'codeMirrorShortcut', options: {type: 'italic'}};\r\n    \r\n    shortcuts['ctrl+u'] = {action: 'codeMirrorShortcut', options: {type: 'uppercase'}};\r\n    shortcuts['ctrl+shift+u'] = {action: 'codeMirrorShortcut', options: {type: 'lowercase'}};\r\n    shortcuts['ctrl+alt+shift+u'] = {action: 'codeMirrorShortcut', options: {type: 'titlecase'}};\r\n    shortcuts[ctrlOrCmd + '+shift+c'] = {action: 'codeMirrorShortcut', options: {type: 'copyHTML'}};\r\n    shortcuts[ctrlOrCmd + '+h'] = {action: 'codeMirrorShortcut', options: {type: 'cycleHeaderLevel'}};\r\n    \r\n    // Formatting\r\n    shortcuts['ctrl+q'] = {action: 'codeMirrorShortcut', options: {type: 'blockquote'}};\r\n    shortcuts['ctrl+l'] = {action: 'codeMirrorShortcut', options: {type: 'list'}};\r\n    \r\n    // Insert content\r\n    shortcuts['ctrl+shift+1'] = {action: 'codeMirrorShortcut', options: {type: 'currentDate'}};\r\n    shortcuts[ctrlOrCmd + '+k'] = {action: 'codeMirrorShortcut', options: {type: 'link'}};\r\n    shortcuts[ctrlOrCmd + '+shift+i'] = {action: 'codeMirrorShortcut', options: {type: 'image'}};\r\n    shortcuts[ctrlOrCmd + '+shift+k'] = {action: 'codeMirrorShortcut', options: {type: 'code'}};\r\n    \r\n    __exports__[\"default\"] = shortcuts;\n  });",
    "define(\"ghost/utils/ghost-paths\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var makeRoute = function (root, args) {\r\n        var parts = Array.prototype.slice.call(args, 0).join('/'),\r\n            route = [root, parts].join('/');\r\n    \r\n        if (route.slice(-1) !== '/') {\r\n            route += '/';\r\n        }\r\n    \r\n        return route;\r\n    };\r\n    \r\n    function ghostPaths() {\r\n        var path = window.location.pathname,\r\n            subdir = path.substr(0, path.search('/ghost/')),\r\n            adminRoot = subdir + '/ghost',\r\n            apiRoot = subdir + '/ghost/api/v0.1';\r\n    \r\n        function assetUrl(src) {\r\n            return subdir + src;\r\n        }\r\n    \r\n        return {\r\n            subdir: subdir,\r\n            blogRoot: subdir + '/',\r\n            adminRoot: adminRoot,\r\n            apiRoot: apiRoot,\r\n    \r\n            url: {\r\n                admin: function () {\r\n                    return makeRoute(adminRoot, arguments);\r\n                },\r\n    \r\n                api: function () {\r\n                    return makeRoute(apiRoot, arguments);\r\n                },\r\n    \r\n                asset: assetUrl\r\n            }\r\n        };\r\n    }\r\n    \r\n    __exports__[\"default\"] = ghostPaths;\n  });",
    "define(\"ghost/utils/isFinite\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /* globals window */\r\n    \r\n    // isFinite function from lodash\r\n    \r\n    function isFinite(value) {\r\n        return window.isFinite(value) && !window.isNaN(parseFloat(value));\r\n    }\r\n    \r\n    __exports__[\"default\"] = isFinite;\n  });",
    "define(\"ghost/utils/isNumber\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    // isNumber function from lodash\r\n    \r\n    var toString = Object.prototype.toString;\r\n    \r\n    function isNumber(value) {\r\n        return typeof value === 'number' ||\r\n          value && typeof value === 'object' && toString.call(value) === '[object Number]' || false;\r\n    }\r\n    \r\n    __exports__[\"default\"] = isNumber;\n  });",
    "define(\"ghost/utils/link-view\", \n  [],\n  function() {\n    \"use strict\";\n    Ember.LinkView.reopen({\r\n        active: Ember.computed('resolvedParams', 'routeArgs', function () {\r\n            var isActive = this._super();\r\n    \r\n            Ember.set(this, 'alternateActive', isActive);\r\n    \r\n            return isActive;\r\n        }),\r\n    \r\n        activeClass: Ember.computed('tagName', function () {\r\n            return this.get('tagName') === 'button' ? '' : 'active';\r\n        })\r\n    });\n  });",
    "define(\"ghost/utils/mobile\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var mobileQuery = matchMedia('(max-width: 900px)');\r\n    \r\n    __exports__[\"default\"] = mobileQuery;\n  });",
    "define(\"ghost/utils/notifications\", \n  [\"ghost/models/notification\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Notification = __dependency1__[\"default\"];\n\n    \r\n    var Notifications = Ember.ArrayProxy.extend({\r\n        delayedNotifications: [],\r\n        content: Ember.A(),\r\n        timeout: 3000,\r\n    \r\n        pushObject: function (object) {\r\n            // object can be either a DS.Model or a plain JS object, so when working with\r\n            // it, we need to handle both cases.\r\n    \r\n            // make sure notifications have all the necessary properties set.\r\n            if (typeof object.toJSON === 'function') {\r\n                // working with a DS.Model\r\n    \r\n                if (object.get('location') === '') {\r\n                    object.set('location', 'bottom');\r\n                }\r\n            } else {\r\n                if (!object.location) {\r\n                    object.location = 'bottom';\r\n                }\r\n            }\r\n    \r\n            this._super(object);\r\n        },\r\n        handleNotification: function (message, delayed) {\r\n            if (!message.status) {\r\n                message.status = 'passive';\r\n            }\r\n    \r\n            if (!delayed) {\r\n                this.pushObject(message);\r\n            } else {\r\n                this.delayedNotifications.push(message);\r\n            }\r\n        },\r\n        showError: function (message, options) {\r\n            options = options || {};\r\n    \r\n            if (!options.doNotClosePassive) {\r\n                this.closePassive();\r\n            }\r\n    \r\n            this.handleNotification({\r\n                type: 'error',\r\n                message: message\r\n            }, options.delayed);\r\n        },\r\n        showErrors: function (errors, options) {\r\n            options = options || {};\r\n    \r\n            if (!options.doNotClosePassive) {\r\n                this.closePassive();\r\n            }\r\n    \r\n            for (var i = 0; i < errors.length; i += 1) {\r\n                this.showError(errors[i].message || errors[i], {doNotClosePassive: true});\r\n            }\r\n        },\r\n        showAPIError: function (resp, options) {\r\n            options = options || {};\r\n    \r\n            if (!options.doNotClosePassive) {\r\n                this.closePassive();\r\n            }\r\n    \r\n            options.defaultErrorText = options.defaultErrorText || 'There was a problem on the server, please try again.';\r\n    \r\n            if (resp && resp.jqXHR && resp.jqXHR.responseJSON && resp.jqXHR.responseJSON.error) {\r\n                this.showError(resp.jqXHR.responseJSON.error, options);\r\n            } else if (resp && resp.jqXHR && resp.jqXHR.responseJSON && resp.jqXHR.responseJSON.errors) {\r\n                this.showErrors(resp.jqXHR.responseJSON.errors, options);\r\n            } else if (resp && resp.jqXHR && resp.jqXHR.responseJSON && resp.jqXHR.responseJSON.message) {\r\n                this.showError(resp.jqXHR.responseJSON.message, options);\r\n            } else {\r\n                this.showError(options.defaultErrorText, {doNotClosePassive: true});\r\n            }\r\n        },\r\n        showInfo: function (message, options) {\r\n            options = options || {};\r\n    \r\n            if (!options.doNotClosePassive) {\r\n                this.closePassive();\r\n            }\r\n    \r\n            this.handleNotification({\r\n                type: 'info',\r\n                message: message\r\n            }, options.delayed);\r\n        },\r\n        showSuccess: function (message, options) {\r\n            options = options || {};\r\n    \r\n            if (!options.doNotClosePassive) {\r\n                this.closePassive();\r\n            }\r\n    \r\n            this.handleNotification({\r\n                type: 'success',\r\n                message: message\r\n            }, options.delayed);\r\n        },\r\n        showWarn: function (message, options) {\r\n            options = options || {};\r\n    \r\n            if (!options.doNotClosePassive) {\r\n                this.closePassive();\r\n            }\r\n    \r\n            this.handleNotification({\r\n                type: 'warn',\r\n                message: message\r\n            }, options.delayed);\r\n        },\r\n        displayDelayed: function () {\r\n            var self = this;\r\n    \r\n            self.delayedNotifications.forEach(function (message) {\r\n                self.pushObject(message);\r\n            });\r\n            self.delayedNotifications = [];\r\n        },\r\n        closeNotification: function (notification) {\r\n            var self = this;\r\n    \r\n            if (notification instanceof Notification) {\r\n                notification.deleteRecord();\r\n                notification.save().finally(function () {\r\n                    self.removeObject(notification);\r\n                });\r\n            } else {\r\n                this.removeObject(notification);\r\n            }\r\n        },\r\n        closePassive: function () {\r\n            this.set('content', this.rejectBy('status', 'passive'));\r\n        },\r\n        closePersistent: function () {\r\n            this.set('content', this.rejectBy('status', 'persistent'));\r\n        },\r\n        closeAll: function () {\r\n            this.clear();\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = Notifications;\n  });",
    "define(\"ghost/utils/set-scroll-classname\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    // ## scrollShadow\r\n    // This adds a 'scroll' class to the targeted element when the element is scrolled\r\n    // `this` is expected to be a jQuery-wrapped element\r\n    // **target:** The element in which the class is applied. Defaults to scrolled element.\r\n    // **class-name:** The class which is applied.\r\n    // **offset:** How far the user has to scroll before the class is applied.\r\n    var setScrollClassName = function (options) {\r\n        var $target = options.target || this,\r\n            offset = options.offset,\r\n            className = options.className || 'scrolling';\r\n    \r\n        if (this.scrollTop() > offset) {\r\n            $target.addClass(className);\r\n        } else {\r\n            $target.removeClass(className);\r\n        }\r\n    };\r\n    \r\n    __exports__[\"default\"] = setScrollClassName;\n  });",
    "define(\"ghost/utils/text-field\", \n  [],\n  function() {\n    \"use strict\";\n    Ember.TextField.reopen({\r\n        attributeBindings: ['autofocus']\r\n    });\n  });",
    "define(\"ghost/utils/titleize\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var lowerWords = ['of', 'a', 'the', 'and', 'an', 'or', 'nor', 'but', 'is', 'if',\r\n                      'then', 'else', 'when', 'at', 'from', 'by', 'on', 'off', 'for',\r\n                      'in', 'out', 'over', 'to', 'into', 'with'];\r\n    \r\n    function titleize(input) {\r\n        var words = input.split(' ').map(function (word, index) {\r\n            if (index === 0 || lowerWords.indexOf(word) === -1) {\r\n                word = Ember.String.capitalize(word);\r\n            }\r\n    \r\n            return word;\r\n        });\r\n    \r\n        return words.join(' ');\r\n    }\r\n    \r\n    __exports__[\"default\"] = titleize;\n  });",
    "define(\"ghost/utils/validator-extensions\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    function init() {\r\n        // Provide a few custom validators\r\n        //\r\n        validator.extend('empty', function (str) {\r\n            return Ember.isBlank(str);\r\n        });\r\n    \r\n        validator.extend('notContains', function (str, badString) {\r\n            return str.indexOf(badString) === -1;\r\n        });\r\n    }\r\n    \r\n    __exports__[\"default\"] = {\r\n        init: init\r\n    };\n  });",
    "define(\"ghost/utils/word-count\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    // jscs: disable\r\n    function wordCount(s) {\r\n        s = s.replace(/(^\\s*)|(\\s*$)/gi, ''); // exclude  start and end white-space\r\n        s = s.replace(/[ ]{2,}/gi, ' '); // 2 or more space to 1\r\n        s = s.replace(/\\n /gi, '\\n'); // exclude newline with a start spacing\r\n        s = s.replace(/\\n+/gi, '\\n');\r\n    \r\n        return s.split(/ |\\n/).length;\r\n    }\r\n    \r\n    __exports__[\"default\"] = wordCount;\n  });",
    "define(\"ghost/validators/forgotten\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var ForgotValidator = Ember.Object.create({\r\n        check: function (model) {\r\n            var data = model.getProperties('email'),\r\n                validationErrors = [];\r\n    \r\n            if (!validator.isEmail(data.email)) {\r\n                validationErrors.push({\r\n                    message: 'Invalid email address'\r\n                });\r\n            }\r\n    \r\n            return validationErrors;\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = ForgotValidator;\n  });",
    "define(\"ghost/validators/new-user\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var NewUserValidator = Ember.Object.extend({\r\n        check: function (model) {\r\n            var data = model.getProperties('name', 'email', 'password'),\r\n                validationErrors = [];\r\n    \r\n            if (!validator.isLength(data.name, 1)) {\r\n                validationErrors.push({\r\n                    message: 'Please enter a name.'\r\n                });\r\n            }\r\n    \r\n            if (!validator.isEmail(data.email)) {\r\n                validationErrors.push({\r\n                    message: 'Invalid Email.'\r\n                });\r\n            }\r\n    \r\n            if (!validator.isLength(data.password, 8)) {\r\n                validationErrors.push({\r\n                    message: 'Password must be at least 8 characters long.'\r\n                });\r\n            }\r\n    \r\n            return validationErrors;\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = NewUserValidator;\n  });",
    "define(\"ghost/validators/post\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var PostValidator = Ember.Object.create({\r\n        check: function (model) {\r\n            var validationErrors = [],\r\n                data = model.getProperties('title', 'meta_title', 'meta_description');\r\n    \r\n            if (validator.empty(data.title)) {\r\n                validationErrors.push({\r\n                    message: 'You must specify a title for the post.'\r\n                });\r\n            }\r\n    \r\n            if (!validator.isLength(data.meta_title, 0, 150)) {\r\n                validationErrors.push({\r\n                    message: 'Meta Title cannot be longer than 150 characters.'\r\n                });\r\n            }\r\n    \r\n            if (!validator.isLength(data.meta_description, 0, 200)) {\r\n                validationErrors.push({\r\n                    message: 'Meta Description cannot be longer than 200 characters.'\r\n                });\r\n            }\r\n    \r\n            return validationErrors;\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = PostValidator;\n  });",
    "define(\"ghost/validators/reset\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var ResetValidator = Ember.Object.create({\r\n        check: function (model) {\r\n            var p1 = model.get('newPassword'),\r\n                p2 = model.get('ne2Password'),\r\n                validationErrors = [];\r\n    \r\n            if (!validator.equals(p1, p2)) {\r\n                validationErrors.push({\r\n                    message: 'The two new passwords don\\'t match.'\r\n                });\r\n            }\r\n    \r\n            if (!validator.isLength(p1, 8)) {\r\n                validationErrors.push({\r\n                    message: 'The password is not long enough.'\r\n                });\r\n            }\r\n            return validationErrors;\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = ResetValidator;\n  });",
    "define(\"ghost/validators/setting\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var SettingValidator = Ember.Object.create({\r\n        check: function (model) {\r\n            var validationErrors = [],\r\n                title = model.get('title'),\r\n                description = model.get('description'),\r\n                email = model.get('email'),\r\n                postsPerPage = model.get('postsPerPage');\r\n    \r\n            if (!validator.isLength(title, 0, 150)) {\r\n                validationErrors.push({message: 'Title is too long'});\r\n            }\r\n    \r\n            if (!validator.isLength(description, 0, 200)) {\r\n                validationErrors.push({message: 'Description is too long'});\r\n            }\r\n    \r\n            if (!validator.isEmail(email) || !validator.isLength(email, 0, 254)) {\r\n                validationErrors.push({message: 'Supply a valid email address'});\r\n            }\r\n    \r\n            if (postsPerPage > 1000) {\r\n                validationErrors.push({message: 'The maximum number of posts per page is 1000'});\r\n            }\r\n    \r\n            if (postsPerPage < 1) {\r\n                validationErrors.push({message: 'The minimum number of posts per page is 1'});\r\n            }\r\n    \r\n            if (!validator.isInt(postsPerPage)) {\r\n                validationErrors.push({message: 'Posts per page must be a number'});\r\n            }\r\n    \r\n            return validationErrors;\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = SettingValidator;\n  });",
    "define(\"ghost/validators/setup\", \n  [\"ghost/validators/new-user\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var NewUserValidator = __dependency1__[\"default\"];\n\n    \r\n    var SetupValidator = NewUserValidator.extend({\r\n        check: function (model) {\r\n            var data = model.getProperties('blogTitle'),\r\n                validationErrors = this._super(model);\r\n    \r\n            if (!validator.isLength(data.blogTitle, 1)) {\r\n                validationErrors.push({\r\n                    message: 'Please enter a blog title.'\r\n                });\r\n            }\r\n    \r\n            return validationErrors;\r\n        }\r\n    }).create();\r\n    \r\n    __exports__[\"default\"] = SetupValidator;\n  });",
    "define(\"ghost/validators/signin\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var SigninValidator = Ember.Object.create({\r\n        check: function (model) {\r\n            var data = model.getProperties('identification', 'password'),\r\n                validationErrors = [];\r\n    \r\n            if (!validator.isEmail(data.identification)) {\r\n                validationErrors.push('Invalid Email');\r\n            }\r\n    \r\n            if (!validator.isLength(data.password || '', 1)) {\r\n                validationErrors.push('Please enter a password');\r\n            }\r\n    \r\n            return validationErrors;\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = SigninValidator;\n  });",
    "define(\"ghost/validators/signup\", \n  [\"ghost/validators/new-user\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var NewUserValidator = __dependency1__[\"default\"];\n\n    \r\n    __exports__[\"default\"] = NewUserValidator.create();\n  });",
    "define(\"ghost/validators/user\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var UserValidator = Ember.Object.create({\r\n        check: function (model) {\r\n            var validator = this.validators[model.get('status')];\r\n    \r\n            if (typeof validator !== 'function') {\r\n                return [];\r\n            }\r\n    \r\n            return validator(model);\r\n        },\r\n    \r\n        validators: {\r\n            invited: function (model) {\r\n                var validationErrors = [],\r\n                    email = model.get('email'),\r\n                    roles = model.get('roles');\r\n    \r\n                if (!validator.isEmail(email)) {\r\n                    validationErrors.push({message: 'Please supply a valid email address'});\r\n                }\r\n    \r\n                if (roles.length < 1) {\r\n                    validationErrors.push({message: 'Please select a role'});\r\n                }\r\n    \r\n                return validationErrors;\r\n            },\r\n    \r\n            active: function (model) {\r\n                var validationErrors = [],\r\n                    name = model.get('name'),\r\n                    bio = model.get('bio'),\r\n                    email = model.get('email'),\r\n                    location = model.get('location'),\r\n                    website = model.get('website');\r\n    \r\n                if (!validator.isLength(name, 0, 150)) {\r\n                    validationErrors.push({message: 'Name is too long'});\r\n                }\r\n    \r\n                if (!validator.isLength(bio, 0, 200)) {\r\n                    validationErrors.push({message: 'Bio is too long'});\r\n                }\r\n    \r\n                if (!validator.isEmail(email)) {\r\n                    validationErrors.push({message: 'Please supply a valid email address'});\r\n                }\r\n    \r\n                if (!validator.isLength(location, 0, 150)) {\r\n                    validationErrors.push({message: 'Location is too long'});\r\n                }\r\n    \r\n                if (!Ember.isEmpty(website) &&\r\n                    (!validator.isURL(website, {require_protocol: false}) ||\r\n                    !validator.isLength(website, 0, 2000))) {\r\n                    validationErrors.push({message: 'Website is not a valid url'});\r\n                }\r\n    \r\n                return validationErrors;\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = UserValidator;\n  });",
    "define(\"ghost/views/application\", \n  [\"ghost/utils/mobile\",\"ghost/utils/bind\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var mobileQuery = __dependency1__[\"default\"];\n\n    var bind = __dependency2__[\"default\"];\n\n    \r\n    var ApplicationView = Ember.View.extend({\r\n        elementId: 'container',\r\n    \r\n        setupGlobalMobileNav: function () {\r\n            // #### Navigating within the sidebar closes it.\r\n            var self = this;\r\n            $('body').on('click tap', '.js-nav-item', function () {\r\n                if (mobileQuery.matches) {\r\n                    self.set('controller.showGlobalMobileNav', false);\r\n                }\r\n            });\r\n    \r\n            // #### Close the nav if mobile and clicking outside of the nav or not the burger toggle\r\n            $('.js-nav-cover').on('click tap', function () {\r\n                var isOpen = self.get('controller.showGlobalMobileNav');\r\n                if (isOpen) {\r\n                    self.set('controller.showGlobalMobileNav', false);\r\n                }\r\n            });\r\n    \r\n            // #### Listen to the viewport and change user-menu dropdown triangle classes accordingly\r\n            mobileQuery.addListener(this.swapUserMenuDropdownTriangleClasses);\r\n            this.swapUserMenuDropdownTriangleClasses(mobileQuery);\r\n        }.on('didInsertElement'),\r\n    \r\n        swapUserMenuDropdownTriangleClasses: function (mq) {\r\n            if (mq.matches) {\r\n                $('.js-user-menu-dropdown-menu').removeClass('dropdown-triangle-top-right ').addClass('dropdown-triangle-bottom');\r\n            } else {\r\n                $('.js-user-menu-dropdown-menu').removeClass('dropdown-triangle-bottom').addClass('dropdown-triangle-top-right');\r\n            }\r\n        },\r\n    \r\n        showGlobalMobileNavObserver: function () {\r\n            if (this.get('controller.showGlobalMobileNav')) {\r\n                $('body').addClass('global-nav-expanded');\r\n            } else {\r\n                $('body').removeClass('global-nav-expanded');\r\n            }\r\n        }.observes('controller.showGlobalMobileNav'),\r\n    \r\n        setupCloseNavOnDesktop: function () {\r\n            this.set('closeGlobalMobileNavOnDesktop', bind(function closeGlobalMobileNavOnDesktop(mq) {\r\n                if (!mq.matches) {\r\n                    // Is desktop sized\r\n                    this.set('controller.showGlobalMobileNav', false);\r\n                }\r\n            }, this));\r\n    \r\n            mobileQuery.addListener(this.closeGlobalMobileNavOnDesktop);\r\n        }.on('didInsertElement'),\r\n    \r\n        removeCloseNavOnDesktop: function () {\r\n            mobileQuery.removeListener(this.closeGlobalMobileNavOnDesktop);\r\n        }.on('willDestroyElement'),\r\n    \r\n        toggleSettingsMenuBodyClass: function () {\r\n            $('body').toggleClass('settings-menu-expanded', this.get('controller.showSettingsMenu'));\r\n        }.observes('controller.showSettingsMenu')\r\n    });\r\n    \r\n    __exports__[\"default\"] = ApplicationView;\n  });",
    "define(\"ghost/views/content-preview-content-view\", \n  [\"ghost/utils/set-scroll-classname\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var setScrollClassName = __dependency1__[\"default\"];\n\n    \r\n    var PostContentView = Ember.View.extend({\r\n        classNames: ['content-preview-content'],\r\n    \r\n        didInsertElement: function () {\r\n            var el = this.$();\r\n            el.on('scroll', Ember.run.bind(el, setScrollClassName, {\r\n                target: el.closest('.content-preview'),\r\n                offset: 10\r\n            }));\r\n        },\r\n    \r\n        contentObserver: function () {\r\n            this.$().closest('.content-preview').scrollTop(0);\r\n        }.observes('controller.content'),\r\n    \r\n        willDestroyElement: function () {\r\n            var el = this.$();\r\n            el.off('scroll');\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = PostContentView;\n  });",
    "define(\"ghost/views/editor-save-button\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var EditorSaveButtonView = Ember.View.extend({\r\n        templateName: 'editor-save-button',\r\n        tagName: 'section',\r\n        classNames: ['splitbtn', 'js-publish-splitbutton'],\r\n    \r\n        // Tracks whether we're going to change the state of the post on save\r\n        isDangerous: Ember.computed('controller.isPublished', 'controller.willPublish', function () {\r\n            return this.get('controller.isPublished') !== this.get('controller.willPublish');\r\n        }),\r\n    \r\n        publishText: Ember.computed('controller.isPublished', function () {\r\n            return this.get('controller.isPublished') ? 'Update Post' : 'Publish Now';\r\n        }),\r\n    \r\n        draftText: Ember.computed('controller.isPublished', function () {\r\n            return this.get('controller.isPublished') ? 'Unpublish' : 'Save Draft';\r\n        }),\r\n    \r\n        saveText: Ember.computed('controller.willPublish', function () {\r\n            return this.get('controller.willPublish') ? this.get('publishText') : this.get('draftText');\r\n        })\r\n    });\r\n    \r\n    __exports__[\"default\"] = EditorSaveButtonView;\n  });",
    "define(\"ghost/views/editor/edit\", \n  [\"ghost/mixins/editor-base-view\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var EditorViewMixin = __dependency1__[\"default\"];\n\n    \r\n    var EditorView = Ember.View.extend(EditorViewMixin, {\r\n        tagName: 'section',\r\n        classNames: ['entry-container']\r\n    });\r\n    \r\n    __exports__[\"default\"] = EditorView;\n  });",
    "define(\"ghost/views/editor/new\", \n  [\"ghost/mixins/editor-base-view\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var EditorViewMixin = __dependency1__[\"default\"];\n\n    \r\n    var EditorNewView = Ember.View.extend(EditorViewMixin, {\r\n        tagName: 'section',\r\n        templateName: 'editor/edit',\r\n        classNames: ['entry-container']\r\n    });\r\n    \r\n    __exports__[\"default\"] = EditorNewView;\n  });",
    "define(\"ghost/views/item-view\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var ItemView = Ember.View.extend({\r\n        classNameBindings: ['active'],\r\n    \r\n        active: Ember.computed('childViews.firstObject.active', function () {\r\n            return this.get('childViews.firstObject.active');\r\n        })\r\n    });\r\n    \r\n    __exports__[\"default\"] = ItemView;\n  });",
    "define(\"ghost/views/mobile/content-view\", \n  [\"ghost/utils/mobile\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var mobileQuery = __dependency1__[\"default\"];\n\n    \r\n    var MobileContentView = Ember.View.extend({\r\n        // Ensure that loading this view brings it into view on mobile\r\n        showContent: function () {\r\n            if (mobileQuery.matches) {\r\n                this.get('parentView').showContent();\r\n            }\r\n        }.on('didInsertElement')\r\n    });\r\n    \r\n    __exports__[\"default\"] = MobileContentView;\n  });",
    "define(\"ghost/views/mobile/index-view\", \n  [\"ghost/utils/mobile\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var mobileQuery = __dependency1__[\"default\"];\n\n    \r\n    var MobileIndexView = Ember.View.extend({\r\n        // Ensure that going to the index brings the menu into view on mobile.\r\n        showMenu: function () {\r\n            if (mobileQuery.matches) {\r\n                this.get('parentView').showMenu();\r\n            }\r\n        }.on('didInsertElement')\r\n    });\r\n    \r\n    __exports__[\"default\"] = MobileIndexView;\n  });",
    "define(\"ghost/views/mobile/parent-view\", \n  [\"ghost/utils/mobile\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var mobileQuery = __dependency1__[\"default\"];\n\n    \r\n    // A mobile parent view needs to implement three methods,\r\n    // showContent, showAll, and showMenu\r\n    // Which are called by MobileIndex and MobileContent views\r\n    var MobileParentView = Ember.View.extend({\r\n        showContent: Ember.K,\r\n        showMenu: Ember.K,\r\n        showAll: Ember.K,\r\n    \r\n        setChangeLayout: function () {\r\n            var self = this;\r\n            this.set('changeLayout', function changeLayout() {\r\n                if (mobileQuery.matches) {\r\n                    // transitioned to mobile layout, so show content\r\n                    self.showContent();\r\n                } else {\r\n                    // went from mobile to desktop\r\n                    self.showAll();\r\n                }\r\n            });\r\n        }.on('init'),\r\n    \r\n        attachChangeLayout: function () {\r\n            mobileQuery.addListener(this.changeLayout);\r\n        }.on('didInsertElement'),\r\n    \r\n        detachChangeLayout: function () {\r\n            mobileQuery.removeListener(this.changeLayout);\r\n        }.on('willDestroyElement')\r\n    });\r\n    \r\n    __exports__[\"default\"] = MobileParentView;\n  });",
    "define(\"ghost/views/paginated-scroll-box\", \n  [\"ghost/utils/set-scroll-classname\",\"ghost/mixins/pagination-view-infinite-scroll\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var setScrollClassName = __dependency1__[\"default\"];\n\n    var PaginationViewMixin = __dependency2__[\"default\"];\n\n    \r\n    var PaginatedScrollBox = Ember.View.extend(PaginationViewMixin, {\r\n        attachScrollClassHandler: function () {\r\n            var el = this.$();\r\n            el.on('scroll', Ember.run.bind(el, setScrollClassName, {\r\n                target: el.closest('.content-list'),\r\n                offset: 10\r\n            }));\r\n        }.on('didInsertElement'),\r\n    \r\n        detachScrollClassHandler: function () {\r\n            this.$().off('scroll');\r\n        }.on('willDestroyElement')\r\n    });\r\n    \r\n    __exports__[\"default\"] = PaginatedScrollBox;\n  });",
    "define(\"ghost/views/post-item-view\", \n  [\"ghost/views/item-view\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var itemView = __dependency1__[\"default\"];\n\n    \r\n    var PostItemView = itemView.extend({\r\n        classNameBindings: ['isFeatured:featured', 'isPage:page'],\r\n    \r\n        isFeatured: Ember.computed.alias('controller.model.featured'),\r\n    \r\n        isPage: Ember.computed.alias('controller.model.page'),\r\n    \r\n        doubleClick: function () {\r\n            this.get('controller').send('openEditor');\r\n        },\r\n    \r\n        click: function () {\r\n            this.get('controller').send('showPostContent');\r\n        }\r\n    \r\n    });\r\n    \r\n    __exports__[\"default\"] = PostItemView;\n  });",
    "define(\"ghost/views/post-settings-menu\", \n  [\"ghost/utils/date-formatting\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    /* global moment */\r\n    var formatDate = __dependency1__.formatDate;\n\n    \r\n    var PostSettingsMenuView = Ember.View.extend({\r\n        templateName: 'post-settings-menu',\r\n    \r\n        publishedAtBinding: Ember.Binding.oneWay('controller.publishedAt'),\r\n    \r\n        datePlaceholder: Ember.computed('controller.publishedAt', function () {\r\n            return formatDate(moment());\r\n        })\r\n    });\r\n    \r\n    __exports__[\"default\"] = PostSettingsMenuView;\n  });",
    "define(\"ghost/views/post-tags-input\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var PostTagsInputView = Ember.View.extend({\r\n        tagName: 'section',\r\n        elementId: 'entry-tags',\r\n        classNames: 'publish-bar-inner',\r\n        classNameBindings: ['hasFocus:focused'],\r\n    \r\n        templateName: 'post-tags-input',\r\n    \r\n        hasFocus: false,\r\n    \r\n        keys: {\r\n            BACKSPACE: 8,\r\n            TAB: 9,\r\n            ENTER: 13,\r\n            ESCAPE: 27,\r\n            UP: 38,\r\n            DOWN: 40,\r\n            NUMPAD_ENTER: 108,\r\n            COMMA: 188\r\n        },\r\n    \r\n        didInsertElement: function () {\r\n            this.get('controller').send('loadAllTags');\r\n        },\r\n    \r\n        willDestroyElement: function () {\r\n            this.get('controller').send('reset');\r\n        },\r\n    \r\n        overlayStyles: Ember.computed('hasFocus', 'controller.suggestions.length', function () {\r\n            var styles = [],\r\n                leftPos;\r\n    \r\n            if (this.get('hasFocus') && this.get('controller.suggestions.length')) {\r\n                leftPos = this.$().find('#tags').position().left;\r\n                styles.push('display: block');\r\n                styles.push('left: ' + leftPos + 'px');\r\n            } else {\r\n                styles.push('display: none');\r\n                styles.push('left', 0);\r\n            }\r\n    \r\n            return styles.join(';');\r\n        }),\r\n    \r\n        tagInputView: Ember.TextField.extend({\r\n            focusIn: function () {\r\n                this.get('parentView').set('hasFocus', true);\r\n            },\r\n    \r\n            focusOut: function () {\r\n                this.get('parentView').set('hasFocus', false);\r\n            },\r\n    \r\n            keyDown: function (event) {\r\n                var controller = this.get('parentView.controller'),\r\n                    keys = this.get('parentView.keys'),\r\n                    hasValue;\r\n    \r\n                switch (event.keyCode) {\r\n                    case keys.UP:\r\n                        event.preventDefault();\r\n                        controller.send('selectPreviousSuggestion');\r\n                        break;\r\n    \r\n                    case keys.DOWN:\r\n                        event.preventDefault();\r\n                        controller.send('selectNextSuggestion');\r\n                        break;\r\n    \r\n                    case keys.TAB:\r\n                    case keys.ENTER:\r\n                    case keys.NUMPAD_ENTER:\r\n                    case keys.COMMA:\r\n                        if (event.keyCode === keys.COMMA && event.shiftKey) {\r\n                            break;\r\n                        }\r\n    \r\n                        if (controller.get('selectedSuggestion')) {\r\n                            event.preventDefault();\r\n                            controller.send('addSelectedSuggestion');\r\n                        } else {\r\n                            // allow user to tab out of field if input is empty\r\n                            hasValue = !Ember.isEmpty(this.get('value'));\r\n                            if (hasValue || event.keyCode !== keys.TAB) {\r\n                                event.preventDefault();\r\n                                controller.send('addNewTag');\r\n                            }\r\n                        }\r\n                        break;\r\n    \r\n                    case keys.BACKSPACE:\r\n                        if (Ember.isEmpty(this.get('value'))) {\r\n                            event.preventDefault();\r\n                            controller.send('deleteLastTag');\r\n                        }\r\n                        break;\r\n    \r\n                    case keys.ESCAPE:\r\n                        event.preventDefault();\r\n                        controller.send('reset');\r\n                        break;\r\n                }\r\n            }\r\n        }),\r\n    \r\n        suggestionView: Ember.View.extend({\r\n            tagName: 'li',\r\n            classNameBindings: 'suggestion.selected',\r\n    \r\n            suggestion: null,\r\n    \r\n            // we can't use the 'click' event here as the focusOut event on the\r\n            // input will fire first\r\n    \r\n            mouseDown: function (event) {\r\n                event.preventDefault();\r\n            },\r\n    \r\n            mouseUp: function (event) {\r\n                event.preventDefault();\r\n                this.get('parentView.controller').send('addTag',\r\n                    this.get('suggestion.tag'));\r\n            }\r\n        }),\r\n    \r\n        actions: {\r\n            deleteTag: function (tag) {\r\n                // The view wants to keep focus on the input after a click on a tag\r\n                Ember.$('.js-tag-input').focus();\r\n                // Make the controller do the actual work\r\n                this.get('controller').send('deleteTag', tag);\r\n            }\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = PostTagsInputView;\n  });",
    "define(\"ghost/views/posts\", \n  [\"ghost/views/mobile/parent-view\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var MobileParentView = __dependency1__[\"default\"];\n\n    \r\n    var PostsView = MobileParentView.extend({\r\n        classNames: ['content-view-container'],\r\n        tagName: 'section',\r\n    \r\n        // Mobile parent view callbacks\r\n        showMenu: function () {\r\n            $('.js-content-list').addClass('show-menu').removeClass('show-content');\r\n            $('.js-content-preview').addClass('show-menu').removeClass('show-content');\r\n        },\r\n        showContent: function () {\r\n            $('.js-content-list').addClass('show-content').removeClass('show-menu');\r\n            $('.js-content-preview').addClass('show-content').removeClass('show-menu');\r\n        },\r\n        showAll: function () {\r\n            $('.js-content-list, .js-content-preview').removeClass('show-menu show-content');\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = PostsView;\n  });",
    "define(\"ghost/views/posts/index\", \n  [\"ghost/views/mobile/index-view\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var MobileIndexView = __dependency1__[\"default\"];\n\n    \r\n    var PostsIndexView = MobileIndexView.extend({\r\n        classNames: ['no-posts-box']\r\n    });\r\n    \r\n    __exports__[\"default\"] = PostsIndexView;\n  });",
    "define(\"ghost/views/posts/post\", \n  [\"ghost/views/mobile/content-view\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var MobileContentView = __dependency1__[\"default\"];\n\n    \r\n    var PostsPostView = MobileContentView.extend();\r\n    \r\n    __exports__[\"default\"] = PostsPostView;\n  });",
    "define(\"ghost/views/settings\", \n  [\"ghost/views/mobile/parent-view\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var MobileParentView = __dependency1__[\"default\"];\n\n    \r\n    var SettingsView = MobileParentView.extend({\r\n        // MobileParentView callbacks\r\n        showMenu: function () {\r\n            $('.js-settings-header-inner').css('display', 'none');\r\n            $('.js-settings-menu').css({right: '0', left: '0', 'margin-right': '0'});\r\n            $('.js-settings-content').css({right: '-100%', left: '100%', 'margin-left': '15'});\r\n        },\r\n        showContent: function () {\r\n            $('.js-settings-menu').css({right: '100%', left: '-110%', 'margin-right': '15px'});\r\n            $('.js-settings-content').css({right: '0', left: '0', 'margin-left': '0'});\r\n            $('.js-settings-header-inner').css('display', 'block');\r\n        },\r\n        showAll: function () {\r\n            $('.js-settings-menu, .js-settings-content').removeAttr('style');\r\n        }\r\n    });\r\n    \r\n    __exports__[\"default\"] = SettingsView;\n  });",
    "define(\"ghost/views/settings/about\", \n  [\"ghost/views/settings/content-base\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var BaseView = __dependency1__[\"default\"];\n\n    \r\n    var SettingsAboutView = BaseView.extend();\r\n    \r\n    __exports__[\"default\"] = SettingsAboutView;\n  });",
    "define(\"ghost/views/settings/apps\", \n  [\"ghost/views/settings/content-base\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var BaseView = __dependency1__[\"default\"];\n\n    \r\n    var SettingsAppsView = BaseView.extend();\r\n    \r\n    __exports__[\"default\"] = SettingsAppsView;\n  });",
    "define(\"ghost/views/settings/content-base\", \n  [\"ghost/views/mobile/content-view\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var MobileContentView = __dependency1__[\"default\"];\n\n    /**\r\n     * All settings views other than the index should inherit from this base class.\r\n     * It ensures that the correct screen is showing when a mobile user navigates\r\n     * to a `settings.someRouteThatIsntIndex` route.\r\n     */\r\n    \r\n    var SettingsContentBaseView = MobileContentView.extend({\r\n        tagName: 'section',\r\n        classNames: ['settings-content', 'js-settings-content', 'fade-in']\r\n    });\r\n    \r\n    __exports__[\"default\"] = SettingsContentBaseView;\n  });",
    "define(\"ghost/views/settings/general\", \n  [\"ghost/views/settings/content-base\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var BaseView = __dependency1__[\"default\"];\n\n    \r\n    var SettingsGeneralView = BaseView.extend();\r\n    \r\n    __exports__[\"default\"] = SettingsGeneralView;\n  });",
    "define(\"ghost/views/settings/index\", \n  [\"ghost/views/mobile/index-view\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var MobileIndexView = __dependency1__[\"default\"];\n\n    \r\n    var SettingsIndexView = MobileIndexView.extend();\r\n    \r\n    __exports__[\"default\"] = SettingsIndexView;\n  });",
    "define(\"ghost/views/settings/tags\", \n  [\"ghost/views/settings/content-base\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var BaseView = __dependency1__[\"default\"];\n\n    \r\n    var SettingsTagsView = BaseView.extend();\r\n    \r\n    __exports__[\"default\"] = SettingsTagsView;\n  });",
    "define(\"ghost/views/settings/users\", \n  [\"ghost/views/settings/content-base\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var BaseView = __dependency1__[\"default\"];\n\n    \r\n    var SettingsUsersView = BaseView.extend();\r\n    \r\n    __exports__[\"default\"] = SettingsUsersView;\n  });",
    "define(\"ghost/views/settings/users/user\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var SettingsUserView = Ember.View.extend({\r\n        currentUser: Ember.computed.alias('controller.session.user'),\r\n    \r\n        isNotOwnProfile: Ember.computed('controller.user.id', 'currentUser.id', function () {\r\n            return this.get('controller.user.id') !== this.get('currentUser.id');\r\n        }),\r\n    \r\n        isNotOwnersProfile: Ember.computed.not('controller.user.isOwner'),\r\n    \r\n        canAssignRoles: Ember.computed.or('currentUser.isAdmin', 'currentUser.isOwner'),\r\n    \r\n        canMakeOwner: Ember.computed.and('currentUser.isOwner', 'isNotOwnProfile', 'controller.user.isAdmin'),\r\n    \r\n        rolesDropdownIsVisible: Ember.computed.and('isNotOwnProfile', 'canAssignRoles', 'isNotOwnersProfile'),\r\n    \r\n        deleteUserActionIsVisible: Ember.computed('currentUser', 'canAssignRoles', 'controller.user', function () {\r\n            if ((this.get('canAssignRoles') && this.get('isNotOwnProfile') && !this.get('controller.user.isOwner')) ||\r\n                (this.get('currentUser.isEditor') && (this.get('isNotOwnProfile') ||\r\n                this.get('controller.user.isAuthor')))) {\r\n                return true;\r\n            }\r\n        }),\r\n    \r\n        userActionsAreVisible: Ember.computed.or('deleteUserActionIsVisible', 'canMakeOwner')\r\n    \r\n    });\r\n    \r\n    __exports__[\"default\"] = SettingsUserView;\n  });",
    "define(\"ghost/views/settings/users/users-list-view\", \n  [\"ghost/mixins/pagination-view-infinite-scroll\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var PaginationViewMixin = __dependency1__[\"default\"];\n\n    \r\n    var UsersListView = Ember.View.extend(PaginationViewMixin, {\r\n        classNames: ['settings-users']\r\n    });\r\n    \r\n    __exports__[\"default\"] = UsersListView;\n  });",
    "// Loader to create the Ember.js application\r\n/*global require */\r\n\r\nwindow.App = require('ghost/app')['default'].create();\r\n"
  ]
}